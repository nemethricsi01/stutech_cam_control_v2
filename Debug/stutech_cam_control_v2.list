
stutech_cam_control_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037c0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08003880  08003880  00013880  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080038f8  080038f8  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  080038f8  080038f8  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  080038f8  080038f8  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080038f8  080038f8  000138f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080038fc  080038fc  000138fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08003900  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000148  20000014  08003914  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000015c  08003914  0002015c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d2ad  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b23  00000000  00000000  0002d2e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bb0  00000000  00000000  0002ee10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b08  00000000  00000000  0002f9c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000ff9d  00000000  00000000  000304c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dd63  00000000  00000000  00040465  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00063048  00000000  00000000  0004e1c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b1210  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029f4  00000000  00000000  000b1260  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000014 	.word	0x20000014
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003868 	.word	0x08003868

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000018 	.word	0x20000018
 8000104:	08003868 	.word	0x08003868

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <readgomb>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
					void readgomb(void)
					{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
						actgomb[0] = HAL_GPIO_ReadPin(BUTT_1_GPIO_Port,BUTT_1_Pin);
 8000224:	4b1a      	ldr	r3, [pc, #104]	; (8000290 <readgomb+0x70>)
 8000226:	2102      	movs	r1, #2
 8000228:	0018      	movs	r0, r3
 800022a:	f001 f911 	bl	8001450 <HAL_GPIO_ReadPin>
 800022e:	0003      	movs	r3, r0
 8000230:	001a      	movs	r2, r3
 8000232:	4b18      	ldr	r3, [pc, #96]	; (8000294 <readgomb+0x74>)
 8000234:	601a      	str	r2, [r3, #0]
						actgomb[1] = HAL_GPIO_ReadPin(BUTT_2_GPIO_Port,BUTT_2_Pin);
 8000236:	2390      	movs	r3, #144	; 0x90
 8000238:	05db      	lsls	r3, r3, #23
 800023a:	2120      	movs	r1, #32
 800023c:	0018      	movs	r0, r3
 800023e:	f001 f907 	bl	8001450 <HAL_GPIO_ReadPin>
 8000242:	0003      	movs	r3, r0
 8000244:	001a      	movs	r2, r3
 8000246:	4b13      	ldr	r3, [pc, #76]	; (8000294 <readgomb+0x74>)
 8000248:	605a      	str	r2, [r3, #4]
						actgomb[2] = HAL_GPIO_ReadPin(BUTT_3_GPIO_Port,BUTT_3_Pin);
 800024a:	2390      	movs	r3, #144	; 0x90
 800024c:	05db      	lsls	r3, r3, #23
 800024e:	2140      	movs	r1, #64	; 0x40
 8000250:	0018      	movs	r0, r3
 8000252:	f001 f8fd 	bl	8001450 <HAL_GPIO_ReadPin>
 8000256:	0003      	movs	r3, r0
 8000258:	001a      	movs	r2, r3
 800025a:	4b0e      	ldr	r3, [pc, #56]	; (8000294 <readgomb+0x74>)
 800025c:	609a      	str	r2, [r3, #8]
						actgomb[3] = HAL_GPIO_ReadPin(BUTT_4_GPIO_Port,BUTT_4_Pin);
 800025e:	2390      	movs	r3, #144	; 0x90
 8000260:	05db      	lsls	r3, r3, #23
 8000262:	2180      	movs	r1, #128	; 0x80
 8000264:	0018      	movs	r0, r3
 8000266:	f001 f8f3 	bl	8001450 <HAL_GPIO_ReadPin>
 800026a:	0003      	movs	r3, r0
 800026c:	001a      	movs	r2, r3
 800026e:	4b09      	ldr	r3, [pc, #36]	; (8000294 <readgomb+0x74>)
 8000270:	60da      	str	r2, [r3, #12]
						actgomb[4] = HAL_GPIO_ReadPin(BUTT_GEN_GPIO_Port,BUTT_GEN_Pin);
 8000272:	2380      	movs	r3, #128	; 0x80
 8000274:	009a      	lsls	r2, r3, #2
 8000276:	2390      	movs	r3, #144	; 0x90
 8000278:	05db      	lsls	r3, r3, #23
 800027a:	0011      	movs	r1, r2
 800027c:	0018      	movs	r0, r3
 800027e:	f001 f8e7 	bl	8001450 <HAL_GPIO_ReadPin>
 8000282:	0003      	movs	r3, r0
 8000284:	001a      	movs	r2, r3
 8000286:	4b03      	ldr	r3, [pc, #12]	; (8000294 <readgomb+0x74>)
 8000288:	611a      	str	r2, [r3, #16]
					}
 800028a:	46c0      	nop			; (mov r8, r8)
 800028c:	46bd      	mov	sp, r7
 800028e:	bd80      	pop	{r7, pc}
 8000290:	48000400 	.word	0x48000400
 8000294:	20000100 	.word	0x20000100

08000298 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800029c:	f000 fd84 	bl	8000da8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002a0:	f000 f97c 	bl	800059c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002a4:	f000 fa32 	bl	800070c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80002a8:	f000 fa00 	bl	80006ac <MX_USART1_UART_Init>
  MX_TIM17_Init();
 80002ac:	f000 f9d6 	bl	800065c <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */
						HAL_TIM_Base_Start_IT(&htim17);
 80002b0:	4ba9      	ldr	r3, [pc, #676]	; (8000558 <main+0x2c0>)
 80002b2:	0018      	movs	r0, r3
 80002b4:	f001 fe82 	bl	8001fbc <HAL_TIM_Base_Start_IT>
						HAL_UART_Receive_IT(&huart1,&uartbuf,1);
 80002b8:	49a8      	ldr	r1, [pc, #672]	; (800055c <main+0x2c4>)
 80002ba:	4ba9      	ldr	r3, [pc, #676]	; (8000560 <main+0x2c8>)
 80002bc:	2201      	movs	r2, #1
 80002be:	0018      	movs	r0, r3
 80002c0:	f002 f968 	bl	8002594 <HAL_UART_Receive_IT>
						readgomb();
 80002c4:	f7ff ffac 	bl	8000220 <readgomb>
						lastgomb[0] = actgomb[0];
 80002c8:	4ba6      	ldr	r3, [pc, #664]	; (8000564 <main+0x2cc>)
 80002ca:	681a      	ldr	r2, [r3, #0]
 80002cc:	4ba6      	ldr	r3, [pc, #664]	; (8000568 <main+0x2d0>)
 80002ce:	601a      	str	r2, [r3, #0]
						lastgomb[1] = actgomb[1];
 80002d0:	4ba4      	ldr	r3, [pc, #656]	; (8000564 <main+0x2cc>)
 80002d2:	685a      	ldr	r2, [r3, #4]
 80002d4:	4ba4      	ldr	r3, [pc, #656]	; (8000568 <main+0x2d0>)
 80002d6:	605a      	str	r2, [r3, #4]
						lastgomb[2] = actgomb[2];
 80002d8:	4ba2      	ldr	r3, [pc, #648]	; (8000564 <main+0x2cc>)
 80002da:	689a      	ldr	r2, [r3, #8]
 80002dc:	4ba2      	ldr	r3, [pc, #648]	; (8000568 <main+0x2d0>)
 80002de:	609a      	str	r2, [r3, #8]
						lastgomb[3] = actgomb[3];
 80002e0:	4ba0      	ldr	r3, [pc, #640]	; (8000564 <main+0x2cc>)
 80002e2:	68da      	ldr	r2, [r3, #12]
 80002e4:	4ba0      	ldr	r3, [pc, #640]	; (8000568 <main+0x2d0>)
 80002e6:	60da      	str	r2, [r3, #12]
						lastgomb[4] = actgomb[4];
 80002e8:	4b9e      	ldr	r3, [pc, #632]	; (8000564 <main+0x2cc>)
 80002ea:	691a      	ldr	r2, [r3, #16]
 80002ec:	4b9e      	ldr	r3, [pc, #632]	; (8000568 <main+0x2d0>)
 80002ee:	611a      	str	r2, [r3, #16]

						//bekapcs villogas
						HAL_GPIO_WritePin(PWR_LED_GPIO_Port,PWR_LED_Pin,GPIO_PIN_SET);
 80002f0:	2380      	movs	r3, #128	; 0x80
 80002f2:	00d9      	lsls	r1, r3, #3
 80002f4:	2390      	movs	r3, #144	; 0x90
 80002f6:	05db      	lsls	r3, r3, #23
 80002f8:	2201      	movs	r2, #1
 80002fa:	0018      	movs	r0, r3
 80002fc:	f001 f8c5 	bl	800148a <HAL_GPIO_WritePin>
						HAL_Delay(200);
 8000300:	20c8      	movs	r0, #200	; 0xc8
 8000302:	f000 fdb5 	bl	8000e70 <HAL_Delay>
						HAL_GPIO_WritePin(PWR_LED_GPIO_Port,PWR_LED_Pin,GPIO_PIN_RESET);
 8000306:	2380      	movs	r3, #128	; 0x80
 8000308:	00d9      	lsls	r1, r3, #3
 800030a:	2390      	movs	r3, #144	; 0x90
 800030c:	05db      	lsls	r3, r3, #23
 800030e:	2200      	movs	r2, #0
 8000310:	0018      	movs	r0, r3
 8000312:	f001 f8ba 	bl	800148a <HAL_GPIO_WritePin>
						HAL_Delay(200);
 8000316:	20c8      	movs	r0, #200	; 0xc8
 8000318:	f000 fdaa 	bl	8000e70 <HAL_Delay>
						HAL_GPIO_WritePin(PWR_LED_GPIO_Port,PWR_LED_Pin,GPIO_PIN_SET);
 800031c:	2380      	movs	r3, #128	; 0x80
 800031e:	00d9      	lsls	r1, r3, #3
 8000320:	2390      	movs	r3, #144	; 0x90
 8000322:	05db      	lsls	r3, r3, #23
 8000324:	2201      	movs	r2, #1
 8000326:	0018      	movs	r0, r3
 8000328:	f001 f8af 	bl	800148a <HAL_GPIO_WritePin>
						HAL_Delay(200);
 800032c:	20c8      	movs	r0, #200	; 0xc8
 800032e:	f000 fd9f 	bl	8000e70 <HAL_Delay>
						HAL_GPIO_WritePin(PWR_LED_GPIO_Port,PWR_LED_Pin,GPIO_PIN_RESET);
 8000332:	2380      	movs	r3, #128	; 0x80
 8000334:	00d9      	lsls	r1, r3, #3
 8000336:	2390      	movs	r3, #144	; 0x90
 8000338:	05db      	lsls	r3, r3, #23
 800033a:	2200      	movs	r2, #0
 800033c:	0018      	movs	r0, r3
 800033e:	f001 f8a4 	bl	800148a <HAL_GPIO_WritePin>
						HAL_Delay(200);
 8000342:	20c8      	movs	r0, #200	; 0xc8
 8000344:	f000 fd94 	bl	8000e70 <HAL_Delay>
						HAL_GPIO_WritePin(PWR_LED_GPIO_Port,PWR_LED_Pin,GPIO_PIN_SET);
 8000348:	2380      	movs	r3, #128	; 0x80
 800034a:	00d9      	lsls	r1, r3, #3
 800034c:	2390      	movs	r3, #144	; 0x90
 800034e:	05db      	lsls	r3, r3, #23
 8000350:	2201      	movs	r2, #1
 8000352:	0018      	movs	r0, r3
 8000354:	f001 f899 	bl	800148a <HAL_GPIO_WritePin>
						HAL_Delay(200);
 8000358:	20c8      	movs	r0, #200	; 0xc8
 800035a:	f000 fd89 	bl	8000e70 <HAL_Delay>
						HAL_GPIO_WritePin(PWR_LED_GPIO_Port,PWR_LED_Pin,GPIO_PIN_RESET);
 800035e:	2380      	movs	r3, #128	; 0x80
 8000360:	00d9      	lsls	r1, r3, #3
 8000362:	2390      	movs	r3, #144	; 0x90
 8000364:	05db      	lsls	r3, r3, #23
 8000366:	2200      	movs	r2, #0
 8000368:	0018      	movs	r0, r3
 800036a:	f001 f88e 	bl	800148a <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
						while (1)
						{
							if((poweronflag == 1)&&(villtimer == 0))
 800036e:	4b7f      	ldr	r3, [pc, #508]	; (800056c <main+0x2d4>)
 8000370:	781b      	ldrb	r3, [r3, #0]
 8000372:	2b01      	cmp	r3, #1
 8000374:	d118      	bne.n	80003a8 <main+0x110>
 8000376:	4b7e      	ldr	r3, [pc, #504]	; (8000570 <main+0x2d8>)
 8000378:	781b      	ldrb	r3, [r3, #0]
 800037a:	2b00      	cmp	r3, #0
 800037c:	d114      	bne.n	80003a8 <main+0x110>
							{
								HAL_GPIO_WritePin(PWR_LED_GPIO_Port,PWR_LED_Pin,GPIO_PIN_SET);
 800037e:	2380      	movs	r3, #128	; 0x80
 8000380:	00d9      	lsls	r1, r3, #3
 8000382:	2390      	movs	r3, #144	; 0x90
 8000384:	05db      	lsls	r3, r3, #23
 8000386:	2201      	movs	r2, #1
 8000388:	0018      	movs	r0, r3
 800038a:	f001 f87e 	bl	800148a <HAL_GPIO_WritePin>
								if(firston == 1)
 800038e:	4b79      	ldr	r3, [pc, #484]	; (8000574 <main+0x2dc>)
 8000390:	781b      	ldrb	r3, [r3, #0]
 8000392:	2b01      	cmp	r3, #1
 8000394:	d108      	bne.n	80003a8 <main+0x110>
								{
									HAL_UART_Transmit(&huart1,autotrackon,7,100);
 8000396:	4978      	ldr	r1, [pc, #480]	; (8000578 <main+0x2e0>)
 8000398:	4871      	ldr	r0, [pc, #452]	; (8000560 <main+0x2c8>)
 800039a:	2364      	movs	r3, #100	; 0x64
 800039c:	2207      	movs	r2, #7
 800039e:	f002 f859 	bl	8002454 <HAL_UART_Transmit>
									firston = 0;
 80003a2:	4b74      	ldr	r3, [pc, #464]	; (8000574 <main+0x2dc>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	701a      	strb	r2, [r3, #0]
								}

							}
							if((poweroffflag == 1)&&(villtimer == 0))
 80003a8:	4b74      	ldr	r3, [pc, #464]	; (800057c <main+0x2e4>)
 80003aa:	781b      	ldrb	r3, [r3, #0]
 80003ac:	2b01      	cmp	r3, #1
 80003ae:	d10e      	bne.n	80003ce <main+0x136>
 80003b0:	4b6f      	ldr	r3, [pc, #444]	; (8000570 <main+0x2d8>)
 80003b2:	781b      	ldrb	r3, [r3, #0]
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d10a      	bne.n	80003ce <main+0x136>
							{
							HAL_GPIO_WritePin(PWR_LED_GPIO_Port,PWR_LED_Pin,GPIO_PIN_RESET);
 80003b8:	2380      	movs	r3, #128	; 0x80
 80003ba:	00d9      	lsls	r1, r3, #3
 80003bc:	2390      	movs	r3, #144	; 0x90
 80003be:	05db      	lsls	r3, r3, #23
 80003c0:	2200      	movs	r2, #0
 80003c2:	0018      	movs	r0, r3
 80003c4:	f001 f861 	bl	800148a <HAL_GPIO_WritePin>
							firston = 1;
 80003c8:	4b6a      	ldr	r3, [pc, #424]	; (8000574 <main+0x2dc>)
 80003ca:	2201      	movs	r2, #1
 80003cc:	701a      	strb	r2, [r3, #0]
							}


							readgomb();
 80003ce:	f7ff ff27 	bl	8000220 <readgomb>
							if((lastgomb[0] != actgomb[0])||
 80003d2:	4b65      	ldr	r3, [pc, #404]	; (8000568 <main+0x2d0>)
 80003d4:	681a      	ldr	r2, [r3, #0]
 80003d6:	4b63      	ldr	r3, [pc, #396]	; (8000564 <main+0x2cc>)
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	429a      	cmp	r2, r3
 80003dc:	d117      	bne.n	800040e <main+0x176>
								 (lastgomb[1] != actgomb[1])||
 80003de:	4b62      	ldr	r3, [pc, #392]	; (8000568 <main+0x2d0>)
 80003e0:	685a      	ldr	r2, [r3, #4]
 80003e2:	4b60      	ldr	r3, [pc, #384]	; (8000564 <main+0x2cc>)
 80003e4:	685b      	ldr	r3, [r3, #4]
							if((lastgomb[0] != actgomb[0])||
 80003e6:	429a      	cmp	r2, r3
 80003e8:	d111      	bne.n	800040e <main+0x176>
								 (lastgomb[2] != actgomb[2])||
 80003ea:	4b5f      	ldr	r3, [pc, #380]	; (8000568 <main+0x2d0>)
 80003ec:	689a      	ldr	r2, [r3, #8]
 80003ee:	4b5d      	ldr	r3, [pc, #372]	; (8000564 <main+0x2cc>)
 80003f0:	689b      	ldr	r3, [r3, #8]
								 (lastgomb[1] != actgomb[1])||
 80003f2:	429a      	cmp	r2, r3
 80003f4:	d10b      	bne.n	800040e <main+0x176>
								 (lastgomb[3] != actgomb[3])||
 80003f6:	4b5c      	ldr	r3, [pc, #368]	; (8000568 <main+0x2d0>)
 80003f8:	68da      	ldr	r2, [r3, #12]
 80003fa:	4b5a      	ldr	r3, [pc, #360]	; (8000564 <main+0x2cc>)
 80003fc:	68db      	ldr	r3, [r3, #12]
								 (lastgomb[2] != actgomb[2])||
 80003fe:	429a      	cmp	r2, r3
 8000400:	d105      	bne.n	800040e <main+0x176>
								 (lastgomb[4] != actgomb[4]))
 8000402:	4b59      	ldr	r3, [pc, #356]	; (8000568 <main+0x2d0>)
 8000404:	691a      	ldr	r2, [r3, #16]
 8000406:	4b57      	ldr	r3, [pc, #348]	; (8000564 <main+0x2cc>)
 8000408:	691b      	ldr	r3, [r3, #16]
								 (lastgomb[3] != actgomb[3])||
 800040a:	429a      	cmp	r2, r3
 800040c:	d0af      	beq.n	800036e <main+0xd6>
									{
										prelltimer = prelltime;
 800040e:	4b5c      	ldr	r3, [pc, #368]	; (8000580 <main+0x2e8>)
 8000410:	681a      	ldr	r2, [r3, #0]
 8000412:	4b5c      	ldr	r3, [pc, #368]	; (8000584 <main+0x2ec>)
 8000414:	601a      	str	r2, [r3, #0]
										while(prelltimer >0)
 8000416:	e047      	b.n	80004a8 <main+0x210>
										{
											readgomb();
 8000418:	f7ff ff02 	bl	8000220 <readgomb>
											if(lastgomb[0] != actgomb[0])
 800041c:	4b52      	ldr	r3, [pc, #328]	; (8000568 <main+0x2d0>)
 800041e:	681a      	ldr	r2, [r3, #0]
 8000420:	4b50      	ldr	r3, [pc, #320]	; (8000564 <main+0x2cc>)
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	429a      	cmp	r2, r3
 8000426:	d007      	beq.n	8000438 <main+0x1a0>
											{
												prelltimer = prelltime;
 8000428:	4b55      	ldr	r3, [pc, #340]	; (8000580 <main+0x2e8>)
 800042a:	681a      	ldr	r2, [r3, #0]
 800042c:	4b55      	ldr	r3, [pc, #340]	; (8000584 <main+0x2ec>)
 800042e:	601a      	str	r2, [r3, #0]
												lastgomb[0] = actgomb[0];
 8000430:	4b4c      	ldr	r3, [pc, #304]	; (8000564 <main+0x2cc>)
 8000432:	681a      	ldr	r2, [r3, #0]
 8000434:	4b4c      	ldr	r3, [pc, #304]	; (8000568 <main+0x2d0>)
 8000436:	601a      	str	r2, [r3, #0]
											}
											if(lastgomb[1] != actgomb[1])
 8000438:	4b4b      	ldr	r3, [pc, #300]	; (8000568 <main+0x2d0>)
 800043a:	685a      	ldr	r2, [r3, #4]
 800043c:	4b49      	ldr	r3, [pc, #292]	; (8000564 <main+0x2cc>)
 800043e:	685b      	ldr	r3, [r3, #4]
 8000440:	429a      	cmp	r2, r3
 8000442:	d007      	beq.n	8000454 <main+0x1bc>
											{
												prelltimer = prelltime;
 8000444:	4b4e      	ldr	r3, [pc, #312]	; (8000580 <main+0x2e8>)
 8000446:	681a      	ldr	r2, [r3, #0]
 8000448:	4b4e      	ldr	r3, [pc, #312]	; (8000584 <main+0x2ec>)
 800044a:	601a      	str	r2, [r3, #0]
												lastgomb[1] = actgomb[1];
 800044c:	4b45      	ldr	r3, [pc, #276]	; (8000564 <main+0x2cc>)
 800044e:	685a      	ldr	r2, [r3, #4]
 8000450:	4b45      	ldr	r3, [pc, #276]	; (8000568 <main+0x2d0>)
 8000452:	605a      	str	r2, [r3, #4]
											}
											if(lastgomb[2] != actgomb[2])
 8000454:	4b44      	ldr	r3, [pc, #272]	; (8000568 <main+0x2d0>)
 8000456:	689a      	ldr	r2, [r3, #8]
 8000458:	4b42      	ldr	r3, [pc, #264]	; (8000564 <main+0x2cc>)
 800045a:	689b      	ldr	r3, [r3, #8]
 800045c:	429a      	cmp	r2, r3
 800045e:	d007      	beq.n	8000470 <main+0x1d8>
											{
												prelltimer = prelltime;
 8000460:	4b47      	ldr	r3, [pc, #284]	; (8000580 <main+0x2e8>)
 8000462:	681a      	ldr	r2, [r3, #0]
 8000464:	4b47      	ldr	r3, [pc, #284]	; (8000584 <main+0x2ec>)
 8000466:	601a      	str	r2, [r3, #0]
												lastgomb[2] = actgomb[2];
 8000468:	4b3e      	ldr	r3, [pc, #248]	; (8000564 <main+0x2cc>)
 800046a:	689a      	ldr	r2, [r3, #8]
 800046c:	4b3e      	ldr	r3, [pc, #248]	; (8000568 <main+0x2d0>)
 800046e:	609a      	str	r2, [r3, #8]
											}
											if(lastgomb[3] != actgomb[3])
 8000470:	4b3d      	ldr	r3, [pc, #244]	; (8000568 <main+0x2d0>)
 8000472:	68da      	ldr	r2, [r3, #12]
 8000474:	4b3b      	ldr	r3, [pc, #236]	; (8000564 <main+0x2cc>)
 8000476:	68db      	ldr	r3, [r3, #12]
 8000478:	429a      	cmp	r2, r3
 800047a:	d007      	beq.n	800048c <main+0x1f4>
											{
												prelltimer = prelltime;
 800047c:	4b40      	ldr	r3, [pc, #256]	; (8000580 <main+0x2e8>)
 800047e:	681a      	ldr	r2, [r3, #0]
 8000480:	4b40      	ldr	r3, [pc, #256]	; (8000584 <main+0x2ec>)
 8000482:	601a      	str	r2, [r3, #0]
												lastgomb[3] = actgomb[3];
 8000484:	4b37      	ldr	r3, [pc, #220]	; (8000564 <main+0x2cc>)
 8000486:	68da      	ldr	r2, [r3, #12]
 8000488:	4b37      	ldr	r3, [pc, #220]	; (8000568 <main+0x2d0>)
 800048a:	60da      	str	r2, [r3, #12]
											}
											if(lastgomb[4] != actgomb[4])
 800048c:	4b36      	ldr	r3, [pc, #216]	; (8000568 <main+0x2d0>)
 800048e:	691a      	ldr	r2, [r3, #16]
 8000490:	4b34      	ldr	r3, [pc, #208]	; (8000564 <main+0x2cc>)
 8000492:	691b      	ldr	r3, [r3, #16]
 8000494:	429a      	cmp	r2, r3
 8000496:	d007      	beq.n	80004a8 <main+0x210>
											{
												prelltimer = prelltime;
 8000498:	4b39      	ldr	r3, [pc, #228]	; (8000580 <main+0x2e8>)
 800049a:	681a      	ldr	r2, [r3, #0]
 800049c:	4b39      	ldr	r3, [pc, #228]	; (8000584 <main+0x2ec>)
 800049e:	601a      	str	r2, [r3, #0]
												lastgomb[4] = actgomb[4];
 80004a0:	4b30      	ldr	r3, [pc, #192]	; (8000564 <main+0x2cc>)
 80004a2:	691a      	ldr	r2, [r3, #16]
 80004a4:	4b30      	ldr	r3, [pc, #192]	; (8000568 <main+0x2d0>)
 80004a6:	611a      	str	r2, [r3, #16]
										while(prelltimer >0)
 80004a8:	4b36      	ldr	r3, [pc, #216]	; (8000584 <main+0x2ec>)
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	dcb3      	bgt.n	8000418 <main+0x180>
											}

										}
											if(lastgomb[0] == 0)//gomb1
 80004b0:	4b2d      	ldr	r3, [pc, #180]	; (8000568 <main+0x2d0>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d114      	bne.n	80004e2 <main+0x24a>
											{
												HAL_UART_Transmit(&huart1,autotrackoff,7,100);
 80004b8:	4933      	ldr	r1, [pc, #204]	; (8000588 <main+0x2f0>)
 80004ba:	4829      	ldr	r0, [pc, #164]	; (8000560 <main+0x2c8>)
 80004bc:	2364      	movs	r3, #100	; 0x64
 80004be:	2207      	movs	r2, #7
 80004c0:	f001 ffc8 	bl	8002454 <HAL_UART_Transmit>
												HAL_UART_Transmit(&huart1,cam2preset,7,100);
 80004c4:	4931      	ldr	r1, [pc, #196]	; (800058c <main+0x2f4>)
 80004c6:	4826      	ldr	r0, [pc, #152]	; (8000560 <main+0x2c8>)
 80004c8:	2364      	movs	r3, #100	; 0x64
 80004ca:	2207      	movs	r2, #7
 80004cc:	f001 ffc2 	bl	8002454 <HAL_UART_Transmit>
												HAL_UART_Transmit(&huart1,powerinquiry,5,100);
 80004d0:	492f      	ldr	r1, [pc, #188]	; (8000590 <main+0x2f8>)
 80004d2:	4823      	ldr	r0, [pc, #140]	; (8000560 <main+0x2c8>)
 80004d4:	2364      	movs	r3, #100	; 0x64
 80004d6:	2205      	movs	r2, #5
 80004d8:	f001 ffbc 	bl	8002454 <HAL_UART_Transmit>
												villtimer = 200;
 80004dc:	4b24      	ldr	r3, [pc, #144]	; (8000570 <main+0x2d8>)
 80004de:	22c8      	movs	r2, #200	; 0xc8
 80004e0:	701a      	strb	r2, [r3, #0]
											}
											if(lastgomb[1] == 0)//gomb2
 80004e2:	4b21      	ldr	r3, [pc, #132]	; (8000568 <main+0x2d0>)
 80004e4:	685b      	ldr	r3, [r3, #4]
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d10e      	bne.n	8000508 <main+0x270>
											{
												HAL_UART_Transmit(&huart1,cam3preset,7,100);
 80004ea:	492a      	ldr	r1, [pc, #168]	; (8000594 <main+0x2fc>)
 80004ec:	481c      	ldr	r0, [pc, #112]	; (8000560 <main+0x2c8>)
 80004ee:	2364      	movs	r3, #100	; 0x64
 80004f0:	2207      	movs	r2, #7
 80004f2:	f001 ffaf 	bl	8002454 <HAL_UART_Transmit>
												HAL_UART_Transmit(&huart1,powerinquiry,5,100);
 80004f6:	4926      	ldr	r1, [pc, #152]	; (8000590 <main+0x2f8>)
 80004f8:	4819      	ldr	r0, [pc, #100]	; (8000560 <main+0x2c8>)
 80004fa:	2364      	movs	r3, #100	; 0x64
 80004fc:	2205      	movs	r2, #5
 80004fe:	f001 ffa9 	bl	8002454 <HAL_UART_Transmit>
												villtimer = 200;
 8000502:	4b1b      	ldr	r3, [pc, #108]	; (8000570 <main+0x2d8>)
 8000504:	22c8      	movs	r2, #200	; 0xc8
 8000506:	701a      	strb	r2, [r3, #0]
											}
											if(lastgomb[2] == 0)//gomb3
 8000508:	4b17      	ldr	r3, [pc, #92]	; (8000568 <main+0x2d0>)
 800050a:	689b      	ldr	r3, [r3, #8]
 800050c:	2b00      	cmp	r3, #0
 800050e:	d10e      	bne.n	800052e <main+0x296>
											{
												HAL_UART_Transmit(&huart1,cam4preset,7,100);
 8000510:	4921      	ldr	r1, [pc, #132]	; (8000598 <main+0x300>)
 8000512:	4813      	ldr	r0, [pc, #76]	; (8000560 <main+0x2c8>)
 8000514:	2364      	movs	r3, #100	; 0x64
 8000516:	2207      	movs	r2, #7
 8000518:	f001 ff9c 	bl	8002454 <HAL_UART_Transmit>
												HAL_UART_Transmit(&huart1,powerinquiry,5,100);
 800051c:	491c      	ldr	r1, [pc, #112]	; (8000590 <main+0x2f8>)
 800051e:	4810      	ldr	r0, [pc, #64]	; (8000560 <main+0x2c8>)
 8000520:	2364      	movs	r3, #100	; 0x64
 8000522:	2205      	movs	r2, #5
 8000524:	f001 ff96 	bl	8002454 <HAL_UART_Transmit>
												villtimer = 200;
 8000528:	4b11      	ldr	r3, [pc, #68]	; (8000570 <main+0x2d8>)
 800052a:	22c8      	movs	r2, #200	; 0xc8
 800052c:	701a      	strb	r2, [r3, #0]
											}
											if(lastgomb[3] == 0)//gomb4
 800052e:	4b0e      	ldr	r3, [pc, #56]	; (8000568 <main+0x2d0>)
 8000530:	68db      	ldr	r3, [r3, #12]
 8000532:	2b00      	cmp	r3, #0
 8000534:	d000      	beq.n	8000538 <main+0x2a0>
 8000536:	e71a      	b.n	800036e <main+0xd6>
											{
												HAL_UART_Transmit(&huart1,autotrackon,7,100);
 8000538:	490f      	ldr	r1, [pc, #60]	; (8000578 <main+0x2e0>)
 800053a:	4809      	ldr	r0, [pc, #36]	; (8000560 <main+0x2c8>)
 800053c:	2364      	movs	r3, #100	; 0x64
 800053e:	2207      	movs	r2, #7
 8000540:	f001 ff88 	bl	8002454 <HAL_UART_Transmit>
												HAL_UART_Transmit(&huart1,powerinquiry,5,100);
 8000544:	4912      	ldr	r1, [pc, #72]	; (8000590 <main+0x2f8>)
 8000546:	4806      	ldr	r0, [pc, #24]	; (8000560 <main+0x2c8>)
 8000548:	2364      	movs	r3, #100	; 0x64
 800054a:	2205      	movs	r2, #5
 800054c:	f001 ff82 	bl	8002454 <HAL_UART_Transmit>
												villtimer = 200;
 8000550:	4b07      	ldr	r3, [pc, #28]	; (8000570 <main+0x2d8>)
 8000552:	22c8      	movs	r2, #200	; 0xc8
 8000554:	701a      	strb	r2, [r3, #0]
							if((poweronflag == 1)&&(villtimer == 0))
 8000556:	e70a      	b.n	800036e <main+0xd6>
 8000558:	20000030 	.word	0x20000030
 800055c:	20000144 	.word	0x20000144
 8000560:	20000078 	.word	0x20000078
 8000564:	20000100 	.word	0x20000100
 8000568:	20000114 	.word	0x20000114
 800056c:	20000148 	.word	0x20000148
 8000570:	2000014a 	.word	0x2000014a
 8000574:	20000004 	.word	0x20000004
 8000578:	080038a8 	.word	0x080038a8
 800057c:	20000149 	.word	0x20000149
 8000580:	20000000 	.word	0x20000000
 8000584:	20000128 	.word	0x20000128
 8000588:	080038b0 	.word	0x080038b0
 800058c:	08003890 	.word	0x08003890
 8000590:	080038b8 	.word	0x080038b8
 8000594:	08003898 	.word	0x08003898
 8000598:	080038a0 	.word	0x080038a0

0800059c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800059c:	b590      	push	{r4, r7, lr}
 800059e:	b095      	sub	sp, #84	; 0x54
 80005a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005a2:	2420      	movs	r4, #32
 80005a4:	193b      	adds	r3, r7, r4
 80005a6:	0018      	movs	r0, r3
 80005a8:	2330      	movs	r3, #48	; 0x30
 80005aa:	001a      	movs	r2, r3
 80005ac:	2100      	movs	r1, #0
 80005ae:	f003 f953 	bl	8003858 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b2:	2310      	movs	r3, #16
 80005b4:	18fb      	adds	r3, r7, r3
 80005b6:	0018      	movs	r0, r3
 80005b8:	2310      	movs	r3, #16
 80005ba:	001a      	movs	r2, r3
 80005bc:	2100      	movs	r1, #0
 80005be:	f003 f94b 	bl	8003858 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005c2:	003b      	movs	r3, r7
 80005c4:	0018      	movs	r0, r3
 80005c6:	2310      	movs	r3, #16
 80005c8:	001a      	movs	r2, r3
 80005ca:	2100      	movs	r1, #0
 80005cc:	f003 f944 	bl	8003858 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005d0:	0021      	movs	r1, r4
 80005d2:	187b      	adds	r3, r7, r1
 80005d4:	2201      	movs	r2, #1
 80005d6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005d8:	187b      	adds	r3, r7, r1
 80005da:	2201      	movs	r2, #1
 80005dc:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005de:	187b      	adds	r3, r7, r1
 80005e0:	2202      	movs	r2, #2
 80005e2:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005e4:	187b      	adds	r3, r7, r1
 80005e6:	2280      	movs	r2, #128	; 0x80
 80005e8:	0252      	lsls	r2, r2, #9
 80005ea:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80005ec:	187b      	adds	r3, r7, r1
 80005ee:	2280      	movs	r2, #128	; 0x80
 80005f0:	0352      	lsls	r2, r2, #13
 80005f2:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80005f4:	187b      	adds	r3, r7, r1
 80005f6:	2200      	movs	r2, #0
 80005f8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005fa:	187b      	adds	r3, r7, r1
 80005fc:	0018      	movs	r0, r3
 80005fe:	f000 ff61 	bl	80014c4 <HAL_RCC_OscConfig>
 8000602:	1e03      	subs	r3, r0, #0
 8000604:	d001      	beq.n	800060a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000606:	f000 fac9 	bl	8000b9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800060a:	2110      	movs	r1, #16
 800060c:	187b      	adds	r3, r7, r1
 800060e:	2207      	movs	r2, #7
 8000610:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000612:	187b      	adds	r3, r7, r1
 8000614:	2202      	movs	r2, #2
 8000616:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000618:	187b      	adds	r3, r7, r1
 800061a:	2200      	movs	r2, #0
 800061c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800061e:	187b      	adds	r3, r7, r1
 8000620:	2200      	movs	r2, #0
 8000622:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000624:	187b      	adds	r3, r7, r1
 8000626:	2101      	movs	r1, #1
 8000628:	0018      	movs	r0, r3
 800062a:	f001 fa65 	bl	8001af8 <HAL_RCC_ClockConfig>
 800062e:	1e03      	subs	r3, r0, #0
 8000630:	d001      	beq.n	8000636 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000632:	f000 fab3 	bl	8000b9c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000636:	003b      	movs	r3, r7
 8000638:	2201      	movs	r2, #1
 800063a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800063c:	003b      	movs	r3, r7
 800063e:	2200      	movs	r2, #0
 8000640:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000642:	003b      	movs	r3, r7
 8000644:	0018      	movs	r0, r3
 8000646:	f001 fb9b 	bl	8001d80 <HAL_RCCEx_PeriphCLKConfig>
 800064a:	1e03      	subs	r3, r0, #0
 800064c:	d001      	beq.n	8000652 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800064e:	f000 faa5 	bl	8000b9c <Error_Handler>
  }
}
 8000652:	46c0      	nop			; (mov r8, r8)
 8000654:	46bd      	mov	sp, r7
 8000656:	b015      	add	sp, #84	; 0x54
 8000658:	bd90      	pop	{r4, r7, pc}
	...

0800065c <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000660:	4b0f      	ldr	r3, [pc, #60]	; (80006a0 <MX_TIM17_Init+0x44>)
 8000662:	4a10      	ldr	r2, [pc, #64]	; (80006a4 <MX_TIM17_Init+0x48>)
 8000664:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 10;
 8000666:	4b0e      	ldr	r3, [pc, #56]	; (80006a0 <MX_TIM17_Init+0x44>)
 8000668:	220a      	movs	r2, #10
 800066a:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800066c:	4b0c      	ldr	r3, [pc, #48]	; (80006a0 <MX_TIM17_Init+0x44>)
 800066e:	2200      	movs	r2, #0
 8000670:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 4469;
 8000672:	4b0b      	ldr	r3, [pc, #44]	; (80006a0 <MX_TIM17_Init+0x44>)
 8000674:	4a0c      	ldr	r2, [pc, #48]	; (80006a8 <MX_TIM17_Init+0x4c>)
 8000676:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000678:	4b09      	ldr	r3, [pc, #36]	; (80006a0 <MX_TIM17_Init+0x44>)
 800067a:	2200      	movs	r2, #0
 800067c:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 800067e:	4b08      	ldr	r3, [pc, #32]	; (80006a0 <MX_TIM17_Init+0x44>)
 8000680:	2200      	movs	r2, #0
 8000682:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000684:	4b06      	ldr	r3, [pc, #24]	; (80006a0 <MX_TIM17_Init+0x44>)
 8000686:	2280      	movs	r2, #128	; 0x80
 8000688:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800068a:	4b05      	ldr	r3, [pc, #20]	; (80006a0 <MX_TIM17_Init+0x44>)
 800068c:	0018      	movs	r0, r3
 800068e:	f001 fc45 	bl	8001f1c <HAL_TIM_Base_Init>
 8000692:	1e03      	subs	r3, r0, #0
 8000694:	d001      	beq.n	800069a <MX_TIM17_Init+0x3e>
  {
    Error_Handler();
 8000696:	f000 fa81 	bl	8000b9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 800069a:	46c0      	nop			; (mov r8, r8)
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	20000030 	.word	0x20000030
 80006a4:	40014800 	.word	0x40014800
 80006a8:	00001175 	.word	0x00001175

080006ac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006b0:	4b14      	ldr	r3, [pc, #80]	; (8000704 <MX_USART1_UART_Init+0x58>)
 80006b2:	4a15      	ldr	r2, [pc, #84]	; (8000708 <MX_USART1_UART_Init+0x5c>)
 80006b4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80006b6:	4b13      	ldr	r3, [pc, #76]	; (8000704 <MX_USART1_UART_Init+0x58>)
 80006b8:	2296      	movs	r2, #150	; 0x96
 80006ba:	0192      	lsls	r2, r2, #6
 80006bc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006be:	4b11      	ldr	r3, [pc, #68]	; (8000704 <MX_USART1_UART_Init+0x58>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006c4:	4b0f      	ldr	r3, [pc, #60]	; (8000704 <MX_USART1_UART_Init+0x58>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006ca:	4b0e      	ldr	r3, [pc, #56]	; (8000704 <MX_USART1_UART_Init+0x58>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006d0:	4b0c      	ldr	r3, [pc, #48]	; (8000704 <MX_USART1_UART_Init+0x58>)
 80006d2:	220c      	movs	r2, #12
 80006d4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006d6:	4b0b      	ldr	r3, [pc, #44]	; (8000704 <MX_USART1_UART_Init+0x58>)
 80006d8:	2200      	movs	r2, #0
 80006da:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006dc:	4b09      	ldr	r3, [pc, #36]	; (8000704 <MX_USART1_UART_Init+0x58>)
 80006de:	2200      	movs	r2, #0
 80006e0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006e2:	4b08      	ldr	r3, [pc, #32]	; (8000704 <MX_USART1_UART_Init+0x58>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006e8:	4b06      	ldr	r3, [pc, #24]	; (8000704 <MX_USART1_UART_Init+0x58>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006ee:	4b05      	ldr	r3, [pc, #20]	; (8000704 <MX_USART1_UART_Init+0x58>)
 80006f0:	0018      	movs	r0, r3
 80006f2:	f001 fe5b 	bl	80023ac <HAL_UART_Init>
 80006f6:	1e03      	subs	r3, r0, #0
 80006f8:	d001      	beq.n	80006fe <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80006fa:	f000 fa4f 	bl	8000b9c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006fe:	46c0      	nop			; (mov r8, r8)
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	20000078 	.word	0x20000078
 8000708:	40013800 	.word	0x40013800

0800070c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800070c:	b590      	push	{r4, r7, lr}
 800070e:	b089      	sub	sp, #36	; 0x24
 8000710:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000712:	240c      	movs	r4, #12
 8000714:	193b      	adds	r3, r7, r4
 8000716:	0018      	movs	r0, r3
 8000718:	2314      	movs	r3, #20
 800071a:	001a      	movs	r2, r3
 800071c:	2100      	movs	r1, #0
 800071e:	f003 f89b 	bl	8003858 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000722:	4b35      	ldr	r3, [pc, #212]	; (80007f8 <MX_GPIO_Init+0xec>)
 8000724:	695a      	ldr	r2, [r3, #20]
 8000726:	4b34      	ldr	r3, [pc, #208]	; (80007f8 <MX_GPIO_Init+0xec>)
 8000728:	2180      	movs	r1, #128	; 0x80
 800072a:	03c9      	lsls	r1, r1, #15
 800072c:	430a      	orrs	r2, r1
 800072e:	615a      	str	r2, [r3, #20]
 8000730:	4b31      	ldr	r3, [pc, #196]	; (80007f8 <MX_GPIO_Init+0xec>)
 8000732:	695a      	ldr	r2, [r3, #20]
 8000734:	2380      	movs	r3, #128	; 0x80
 8000736:	03db      	lsls	r3, r3, #15
 8000738:	4013      	ands	r3, r2
 800073a:	60bb      	str	r3, [r7, #8]
 800073c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800073e:	4b2e      	ldr	r3, [pc, #184]	; (80007f8 <MX_GPIO_Init+0xec>)
 8000740:	695a      	ldr	r2, [r3, #20]
 8000742:	4b2d      	ldr	r3, [pc, #180]	; (80007f8 <MX_GPIO_Init+0xec>)
 8000744:	2180      	movs	r1, #128	; 0x80
 8000746:	0289      	lsls	r1, r1, #10
 8000748:	430a      	orrs	r2, r1
 800074a:	615a      	str	r2, [r3, #20]
 800074c:	4b2a      	ldr	r3, [pc, #168]	; (80007f8 <MX_GPIO_Init+0xec>)
 800074e:	695a      	ldr	r2, [r3, #20]
 8000750:	2380      	movs	r3, #128	; 0x80
 8000752:	029b      	lsls	r3, r3, #10
 8000754:	4013      	ands	r3, r2
 8000756:	607b      	str	r3, [r7, #4]
 8000758:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800075a:	4b27      	ldr	r3, [pc, #156]	; (80007f8 <MX_GPIO_Init+0xec>)
 800075c:	695a      	ldr	r2, [r3, #20]
 800075e:	4b26      	ldr	r3, [pc, #152]	; (80007f8 <MX_GPIO_Init+0xec>)
 8000760:	2180      	movs	r1, #128	; 0x80
 8000762:	02c9      	lsls	r1, r1, #11
 8000764:	430a      	orrs	r2, r1
 8000766:	615a      	str	r2, [r3, #20]
 8000768:	4b23      	ldr	r3, [pc, #140]	; (80007f8 <MX_GPIO_Init+0xec>)
 800076a:	695a      	ldr	r2, [r3, #20]
 800076c:	2380      	movs	r3, #128	; 0x80
 800076e:	02db      	lsls	r3, r3, #11
 8000770:	4013      	ands	r3, r2
 8000772:	603b      	str	r3, [r7, #0]
 8000774:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PWR_LED_GPIO_Port, PWR_LED_Pin, GPIO_PIN_RESET);
 8000776:	2380      	movs	r3, #128	; 0x80
 8000778:	00d9      	lsls	r1, r3, #3
 800077a:	2390      	movs	r3, #144	; 0x90
 800077c:	05db      	lsls	r3, r3, #23
 800077e:	2200      	movs	r2, #0
 8000780:	0018      	movs	r0, r3
 8000782:	f000 fe82 	bl	800148a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BUTT_2_Pin BUTT_3_Pin BUTT_4_Pin BUTT_GEN_Pin */
  GPIO_InitStruct.Pin = BUTT_2_Pin|BUTT_3_Pin|BUTT_4_Pin|BUTT_GEN_Pin;
 8000786:	193b      	adds	r3, r7, r4
 8000788:	22b8      	movs	r2, #184	; 0xb8
 800078a:	0092      	lsls	r2, r2, #2
 800078c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800078e:	193b      	adds	r3, r7, r4
 8000790:	2200      	movs	r2, #0
 8000792:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000794:	193b      	adds	r3, r7, r4
 8000796:	2201      	movs	r2, #1
 8000798:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800079a:	193a      	adds	r2, r7, r4
 800079c:	2390      	movs	r3, #144	; 0x90
 800079e:	05db      	lsls	r3, r3, #23
 80007a0:	0011      	movs	r1, r2
 80007a2:	0018      	movs	r0, r3
 80007a4:	f000 fce4 	bl	8001170 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTT_1_Pin */
  GPIO_InitStruct.Pin = BUTT_1_Pin;
 80007a8:	193b      	adds	r3, r7, r4
 80007aa:	2202      	movs	r2, #2
 80007ac:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007ae:	193b      	adds	r3, r7, r4
 80007b0:	2200      	movs	r2, #0
 80007b2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007b4:	193b      	adds	r3, r7, r4
 80007b6:	2201      	movs	r2, #1
 80007b8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BUTT_1_GPIO_Port, &GPIO_InitStruct);
 80007ba:	193b      	adds	r3, r7, r4
 80007bc:	4a0f      	ldr	r2, [pc, #60]	; (80007fc <MX_GPIO_Init+0xf0>)
 80007be:	0019      	movs	r1, r3
 80007c0:	0010      	movs	r0, r2
 80007c2:	f000 fcd5 	bl	8001170 <HAL_GPIO_Init>

  /*Configure GPIO pin : PWR_LED_Pin */
  GPIO_InitStruct.Pin = PWR_LED_Pin;
 80007c6:	0021      	movs	r1, r4
 80007c8:	187b      	adds	r3, r7, r1
 80007ca:	2280      	movs	r2, #128	; 0x80
 80007cc:	00d2      	lsls	r2, r2, #3
 80007ce:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d0:	187b      	adds	r3, r7, r1
 80007d2:	2201      	movs	r2, #1
 80007d4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d6:	187b      	adds	r3, r7, r1
 80007d8:	2200      	movs	r2, #0
 80007da:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007dc:	187b      	adds	r3, r7, r1
 80007de:	2200      	movs	r2, #0
 80007e0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(PWR_LED_GPIO_Port, &GPIO_InitStruct);
 80007e2:	187a      	adds	r2, r7, r1
 80007e4:	2390      	movs	r3, #144	; 0x90
 80007e6:	05db      	lsls	r3, r3, #23
 80007e8:	0011      	movs	r1, r2
 80007ea:	0018      	movs	r0, r3
 80007ec:	f000 fcc0 	bl	8001170 <HAL_GPIO_Init>

}
 80007f0:	46c0      	nop			; (mov r8, r8)
 80007f2:	46bd      	mov	sp, r7
 80007f4:	b009      	add	sp, #36	; 0x24
 80007f6:	bd90      	pop	{r4, r7, pc}
 80007f8:	40021000 	.word	0x40021000
 80007fc:	48000400 	.word	0x48000400

08000800 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
					void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
					{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]

					if(prelltimer >0)
 8000808:	4b79      	ldr	r3, [pc, #484]	; (80009f0 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	2b00      	cmp	r3, #0
 800080e:	dd04      	ble.n	800081a <HAL_TIM_PeriodElapsedCallback+0x1a>
					{
						prelltimer--;
 8000810:	4b77      	ldr	r3, [pc, #476]	; (80009f0 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	1e5a      	subs	r2, r3, #1
 8000816:	4b76      	ldr	r3, [pc, #472]	; (80009f0 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8000818:	601a      	str	r2, [r3, #0]
					}
					if(villtimer >0)
 800081a:	4b76      	ldr	r3, [pc, #472]	; (80009f4 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	2b00      	cmp	r3, #0
 8000820:	d035      	beq.n	800088e <HAL_TIM_PeriodElapsedCallback+0x8e>
					{
						villtimer--;
 8000822:	4b74      	ldr	r3, [pc, #464]	; (80009f4 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	3b01      	subs	r3, #1
 8000828:	b2da      	uxtb	r2, r3
 800082a:	4b72      	ldr	r3, [pc, #456]	; (80009f4 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 800082c:	701a      	strb	r2, [r3, #0]
						if(poweronflag == 1)
 800082e:	4b72      	ldr	r3, [pc, #456]	; (80009f8 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8000830:	781b      	ldrb	r3, [r3, #0]
 8000832:	2b01      	cmp	r3, #1
 8000834:	d113      	bne.n	800085e <HAL_TIM_PeriodElapsedCallback+0x5e>
						{
							HAL_GPIO_WritePin(PWR_LED_GPIO_Port,PWR_LED_Pin,GPIO_PIN_RESET);//led off
 8000836:	2380      	movs	r3, #128	; 0x80
 8000838:	00d9      	lsls	r1, r3, #3
 800083a:	2390      	movs	r3, #144	; 0x90
 800083c:	05db      	lsls	r3, r3, #23
 800083e:	2200      	movs	r2, #0
 8000840:	0018      	movs	r0, r3
 8000842:	f000 fe22 	bl	800148a <HAL_GPIO_WritePin>
							if(villtimer == 0)
 8000846:	4b6b      	ldr	r3, [pc, #428]	; (80009f4 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8000848:	781b      	ldrb	r3, [r3, #0]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d107      	bne.n	800085e <HAL_TIM_PeriodElapsedCallback+0x5e>
							{
								HAL_GPIO_WritePin(PWR_LED_GPIO_Port,PWR_LED_Pin,GPIO_PIN_SET);//led on
 800084e:	2380      	movs	r3, #128	; 0x80
 8000850:	00d9      	lsls	r1, r3, #3
 8000852:	2390      	movs	r3, #144	; 0x90
 8000854:	05db      	lsls	r3, r3, #23
 8000856:	2201      	movs	r2, #1
 8000858:	0018      	movs	r0, r3
 800085a:	f000 fe16 	bl	800148a <HAL_GPIO_WritePin>
							}
						}
						if(poweroffflag == 1)
 800085e:	4b67      	ldr	r3, [pc, #412]	; (80009fc <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	2b01      	cmp	r3, #1
 8000864:	d113      	bne.n	800088e <HAL_TIM_PeriodElapsedCallback+0x8e>
						{
							HAL_GPIO_WritePin(PWR_LED_GPIO_Port,PWR_LED_Pin,GPIO_PIN_SET);//led on
 8000866:	2380      	movs	r3, #128	; 0x80
 8000868:	00d9      	lsls	r1, r3, #3
 800086a:	2390      	movs	r3, #144	; 0x90
 800086c:	05db      	lsls	r3, r3, #23
 800086e:	2201      	movs	r2, #1
 8000870:	0018      	movs	r0, r3
 8000872:	f000 fe0a 	bl	800148a <HAL_GPIO_WritePin>
							if(villtimer == 0)
 8000876:	4b5f      	ldr	r3, [pc, #380]	; (80009f4 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8000878:	781b      	ldrb	r3, [r3, #0]
 800087a:	2b00      	cmp	r3, #0
 800087c:	d107      	bne.n	800088e <HAL_TIM_PeriodElapsedCallback+0x8e>
							{
								HAL_GPIO_WritePin(PWR_LED_GPIO_Port,PWR_LED_Pin,GPIO_PIN_RESET);//led off
 800087e:	2380      	movs	r3, #128	; 0x80
 8000880:	00d9      	lsls	r1, r3, #3
 8000882:	2390      	movs	r3, #144	; 0x90
 8000884:	05db      	lsls	r3, r3, #23
 8000886:	2200      	movs	r2, #0
 8000888:	0018      	movs	r0, r3
 800088a:	f000 fdfe 	bl	800148a <HAL_GPIO_WritePin>
							}
						}
					}
					if(actgomb[0] == 0)
 800088e:	4b5c      	ldr	r3, [pc, #368]	; (8000a00 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	2b00      	cmp	r3, #0
 8000894:	d129      	bne.n	80008ea <HAL_TIM_PeriodElapsedCallback+0xea>
					{
						gomb0hosszutime++;
 8000896:	4b5b      	ldr	r3, [pc, #364]	; (8000a04 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	1c5a      	adds	r2, r3, #1
 800089c:	4b59      	ldr	r3, [pc, #356]	; (8000a04 <HAL_TIM_PeriodElapsedCallback+0x204>)
 800089e:	601a      	str	r2, [r3, #0]
						if(gomb0hosszutime > 3000)
 80008a0:	4b58      	ldr	r3, [pc, #352]	; (8000a04 <HAL_TIM_PeriodElapsedCallback+0x204>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	4a58      	ldr	r2, [pc, #352]	; (8000a08 <HAL_TIM_PeriodElapsedCallback+0x208>)
 80008a6:	4293      	cmp	r3, r2
 80008a8:	dd18      	ble.n	80008dc <HAL_TIM_PeriodElapsedCallback+0xdc>
						{
							HAL_UART_Transmit(&huart1,pwron,6,100);
 80008aa:	4958      	ldr	r1, [pc, #352]	; (8000a0c <HAL_TIM_PeriodElapsedCallback+0x20c>)
 80008ac:	4858      	ldr	r0, [pc, #352]	; (8000a10 <HAL_TIM_PeriodElapsedCallback+0x210>)
 80008ae:	2364      	movs	r3, #100	; 0x64
 80008b0:	2206      	movs	r2, #6
 80008b2:	f001 fdcf 	bl	8002454 <HAL_UART_Transmit>
							pwrtime = 100;
 80008b6:	4b57      	ldr	r3, [pc, #348]	; (8000a14 <HAL_TIM_PeriodElapsedCallback+0x214>)
 80008b8:	2264      	movs	r2, #100	; 0x64
 80008ba:	601a      	str	r2, [r3, #0]
							poweronflag = 1;
 80008bc:	4b4e      	ldr	r3, [pc, #312]	; (80009f8 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 80008be:	2201      	movs	r2, #1
 80008c0:	701a      	strb	r2, [r3, #0]
							poweroffflag = 0;
 80008c2:	4b4e      	ldr	r3, [pc, #312]	; (80009fc <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	701a      	strb	r2, [r3, #0]
							gomb0hosszutime = 0;
 80008c8:	4b4e      	ldr	r3, [pc, #312]	; (8000a04 <HAL_TIM_PeriodElapsedCallback+0x204>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	601a      	str	r2, [r3, #0]
							HAL_UART_Transmit(&huart1,powerinquiry,5,100);
 80008ce:	4952      	ldr	r1, [pc, #328]	; (8000a18 <HAL_TIM_PeriodElapsedCallback+0x218>)
 80008d0:	484f      	ldr	r0, [pc, #316]	; (8000a10 <HAL_TIM_PeriodElapsedCallback+0x210>)
 80008d2:	2364      	movs	r3, #100	; 0x64
 80008d4:	2205      	movs	r2, #5
 80008d6:	f001 fdbd 	bl	8002454 <HAL_UART_Transmit>
 80008da:	e006      	b.n	80008ea <HAL_TIM_PeriodElapsedCallback+0xea>
						}
						else if(actgomb[0] == 1)
 80008dc:	4b48      	ldr	r3, [pc, #288]	; (8000a00 <HAL_TIM_PeriodElapsedCallback+0x200>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	2b01      	cmp	r3, #1
 80008e2:	d102      	bne.n	80008ea <HAL_TIM_PeriodElapsedCallback+0xea>
						{
							gomb0hosszutime = 0;
 80008e4:	4b47      	ldr	r3, [pc, #284]	; (8000a04 <HAL_TIM_PeriodElapsedCallback+0x204>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	601a      	str	r2, [r3, #0]
						}
					}

					if(actgomb[0] == 1)
 80008ea:	4b45      	ldr	r3, [pc, #276]	; (8000a00 <HAL_TIM_PeriodElapsedCallback+0x200>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	2b01      	cmp	r3, #1
 80008f0:	d113      	bne.n	800091a <HAL_TIM_PeriodElapsedCallback+0x11a>
					{
						if(gomb0hosszutime >0)
 80008f2:	4b44      	ldr	r3, [pc, #272]	; (8000a04 <HAL_TIM_PeriodElapsedCallback+0x204>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	dd05      	ble.n	8000906 <HAL_TIM_PeriodElapsedCallback+0x106>
						{
							gomb0prell++;
 80008fa:	4b48      	ldr	r3, [pc, #288]	; (8000a1c <HAL_TIM_PeriodElapsedCallback+0x21c>)
 80008fc:	781b      	ldrb	r3, [r3, #0]
 80008fe:	3301      	adds	r3, #1
 8000900:	b2da      	uxtb	r2, r3
 8000902:	4b46      	ldr	r3, [pc, #280]	; (8000a1c <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8000904:	701a      	strb	r2, [r3, #0]
						}
						if(gomb0prell >50)
 8000906:	4b45      	ldr	r3, [pc, #276]	; (8000a1c <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8000908:	781b      	ldrb	r3, [r3, #0]
 800090a:	2b32      	cmp	r3, #50	; 0x32
 800090c:	d905      	bls.n	800091a <HAL_TIM_PeriodElapsedCallback+0x11a>
						{
							gomb0hosszutime = 0;
 800090e:	4b3d      	ldr	r3, [pc, #244]	; (8000a04 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8000910:	2200      	movs	r2, #0
 8000912:	601a      	str	r2, [r3, #0]
							gomb0prell = 0;
 8000914:	4b41      	ldr	r3, [pc, #260]	; (8000a1c <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8000916:	2200      	movs	r2, #0
 8000918:	701a      	strb	r2, [r3, #0]
						}

					}
					if(actgomb[3] == 0)
 800091a:	4b39      	ldr	r3, [pc, #228]	; (8000a00 <HAL_TIM_PeriodElapsedCallback+0x200>)
 800091c:	68db      	ldr	r3, [r3, #12]
 800091e:	2b00      	cmp	r3, #0
 8000920:	d12a      	bne.n	8000978 <HAL_TIM_PeriodElapsedCallback+0x178>
					{
						gomb4hosszutime++;
 8000922:	4b3f      	ldr	r3, [pc, #252]	; (8000a20 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	1c5a      	adds	r2, r3, #1
 8000928:	4b3d      	ldr	r3, [pc, #244]	; (8000a20 <HAL_TIM_PeriodElapsedCallback+0x220>)
 800092a:	601a      	str	r2, [r3, #0]
						if(gomb4hosszutime > 3000)
 800092c:	4b3c      	ldr	r3, [pc, #240]	; (8000a20 <HAL_TIM_PeriodElapsedCallback+0x220>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4a35      	ldr	r2, [pc, #212]	; (8000a08 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8000932:	4293      	cmp	r3, r2
 8000934:	dd19      	ble.n	800096a <HAL_TIM_PeriodElapsedCallback+0x16a>
						{
							HAL_UART_Transmit(&huart1,pwroff,6,100);
 8000936:	493b      	ldr	r1, [pc, #236]	; (8000a24 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8000938:	4835      	ldr	r0, [pc, #212]	; (8000a10 <HAL_TIM_PeriodElapsedCallback+0x210>)
 800093a:	2364      	movs	r3, #100	; 0x64
 800093c:	2206      	movs	r2, #6
 800093e:	f001 fd89 	bl	8002454 <HAL_UART_Transmit>
							pwrtime = 300;
 8000942:	4b34      	ldr	r3, [pc, #208]	; (8000a14 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8000944:	2296      	movs	r2, #150	; 0x96
 8000946:	0052      	lsls	r2, r2, #1
 8000948:	601a      	str	r2, [r3, #0]
							poweronflag = 0;
 800094a:	4b2b      	ldr	r3, [pc, #172]	; (80009f8 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 800094c:	2200      	movs	r2, #0
 800094e:	701a      	strb	r2, [r3, #0]
							poweroffflag = 1;
 8000950:	4b2a      	ldr	r3, [pc, #168]	; (80009fc <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8000952:	2201      	movs	r2, #1
 8000954:	701a      	strb	r2, [r3, #0]
							gomb4hosszutime = 0;
 8000956:	4b32      	ldr	r3, [pc, #200]	; (8000a20 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
							HAL_UART_Transmit(&huart1,powerinquiry,5,100);
 800095c:	492e      	ldr	r1, [pc, #184]	; (8000a18 <HAL_TIM_PeriodElapsedCallback+0x218>)
 800095e:	482c      	ldr	r0, [pc, #176]	; (8000a10 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8000960:	2364      	movs	r3, #100	; 0x64
 8000962:	2205      	movs	r2, #5
 8000964:	f001 fd76 	bl	8002454 <HAL_UART_Transmit>
 8000968:	e006      	b.n	8000978 <HAL_TIM_PeriodElapsedCallback+0x178>
						}
						else if(actgomb[3] == 1)
 800096a:	4b25      	ldr	r3, [pc, #148]	; (8000a00 <HAL_TIM_PeriodElapsedCallback+0x200>)
 800096c:	68db      	ldr	r3, [r3, #12]
 800096e:	2b01      	cmp	r3, #1
 8000970:	d102      	bne.n	8000978 <HAL_TIM_PeriodElapsedCallback+0x178>
						{
							gomb4hosszutime = 0;
 8000972:	4b2b      	ldr	r3, [pc, #172]	; (8000a20 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8000974:	2200      	movs	r2, #0
 8000976:	601a      	str	r2, [r3, #0]
						}
					}
					if(actgomb[3] == 1)
 8000978:	4b21      	ldr	r3, [pc, #132]	; (8000a00 <HAL_TIM_PeriodElapsedCallback+0x200>)
 800097a:	68db      	ldr	r3, [r3, #12]
 800097c:	2b01      	cmp	r3, #1
 800097e:	d113      	bne.n	80009a8 <HAL_TIM_PeriodElapsedCallback+0x1a8>
					{
							if(gomb4hosszutime >0)
 8000980:	4b27      	ldr	r3, [pc, #156]	; (8000a20 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	2b00      	cmp	r3, #0
 8000986:	dd05      	ble.n	8000994 <HAL_TIM_PeriodElapsedCallback+0x194>
						{
							gomb3prell++;
 8000988:	4b27      	ldr	r3, [pc, #156]	; (8000a28 <HAL_TIM_PeriodElapsedCallback+0x228>)
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	3301      	adds	r3, #1
 800098e:	b2da      	uxtb	r2, r3
 8000990:	4b25      	ldr	r3, [pc, #148]	; (8000a28 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8000992:	701a      	strb	r2, [r3, #0]
						}
						if(gomb3prell >50)
 8000994:	4b24      	ldr	r3, [pc, #144]	; (8000a28 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	2b32      	cmp	r3, #50	; 0x32
 800099a:	d905      	bls.n	80009a8 <HAL_TIM_PeriodElapsedCallback+0x1a8>
						{
							gomb4hosszutime = 0;
 800099c:	4b20      	ldr	r3, [pc, #128]	; (8000a20 <HAL_TIM_PeriodElapsedCallback+0x220>)
 800099e:	2200      	movs	r2, #0
 80009a0:	601a      	str	r2, [r3, #0]
							gomb3prell = 0;
 80009a2:	4b21      	ldr	r3, [pc, #132]	; (8000a28 <HAL_TIM_PeriodElapsedCallback+0x228>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	701a      	strb	r2, [r3, #0]
						}
					}

					if(pwrtime >0)
 80009a8:	4b1a      	ldr	r3, [pc, #104]	; (8000a14 <HAL_TIM_PeriodElapsedCallback+0x214>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	dd1a      	ble.n	80009e6 <HAL_TIM_PeriodElapsedCallback+0x1e6>
					{
						pwrtime--;
 80009b0:	4b18      	ldr	r3, [pc, #96]	; (8000a14 <HAL_TIM_PeriodElapsedCallback+0x214>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	1e5a      	subs	r2, r3, #1
 80009b6:	4b17      	ldr	r3, [pc, #92]	; (8000a14 <HAL_TIM_PeriodElapsedCallback+0x214>)
 80009b8:	601a      	str	r2, [r3, #0]
						if((pwrtime == 0)||(pwrtime == 99)||(pwrtime == 150)||(pwrtime == 250))
 80009ba:	4b16      	ldr	r3, [pc, #88]	; (8000a14 <HAL_TIM_PeriodElapsedCallback+0x214>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d00b      	beq.n	80009da <HAL_TIM_PeriodElapsedCallback+0x1da>
 80009c2:	4b14      	ldr	r3, [pc, #80]	; (8000a14 <HAL_TIM_PeriodElapsedCallback+0x214>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	2b63      	cmp	r3, #99	; 0x63
 80009c8:	d007      	beq.n	80009da <HAL_TIM_PeriodElapsedCallback+0x1da>
 80009ca:	4b12      	ldr	r3, [pc, #72]	; (8000a14 <HAL_TIM_PeriodElapsedCallback+0x214>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	2b96      	cmp	r3, #150	; 0x96
 80009d0:	d003      	beq.n	80009da <HAL_TIM_PeriodElapsedCallback+0x1da>
 80009d2:	4b10      	ldr	r3, [pc, #64]	; (8000a14 <HAL_TIM_PeriodElapsedCallback+0x214>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	2bfa      	cmp	r3, #250	; 0xfa
 80009d8:	d105      	bne.n	80009e6 <HAL_TIM_PeriodElapsedCallback+0x1e6>
						{
							HAL_UART_Transmit(&huart1,powerinquiry,5,100);
 80009da:	490f      	ldr	r1, [pc, #60]	; (8000a18 <HAL_TIM_PeriodElapsedCallback+0x218>)
 80009dc:	480c      	ldr	r0, [pc, #48]	; (8000a10 <HAL_TIM_PeriodElapsedCallback+0x210>)
 80009de:	2364      	movs	r3, #100	; 0x64
 80009e0:	2205      	movs	r2, #5
 80009e2:	f001 fd37 	bl	8002454 <HAL_UART_Transmit>
						}
					}

					}
 80009e6:	46c0      	nop			; (mov r8, r8)
 80009e8:	46bd      	mov	sp, r7
 80009ea:	b002      	add	sp, #8
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	46c0      	nop			; (mov r8, r8)
 80009f0:	20000128 	.word	0x20000128
 80009f4:	2000014a 	.word	0x2000014a
 80009f8:	20000148 	.word	0x20000148
 80009fc:	20000149 	.word	0x20000149
 8000a00:	20000100 	.word	0x20000100
 8000a04:	2000014c 	.word	0x2000014c
 8000a08:	00000bb8 	.word	0x00000bb8
 8000a0c:	08003880 	.word	0x08003880
 8000a10:	20000078 	.word	0x20000078
 8000a14:	20000154 	.word	0x20000154
 8000a18:	080038b8 	.word	0x080038b8
 8000a1c:	2000012c 	.word	0x2000012c
 8000a20:	20000150 	.word	0x20000150
 8000a24:	08003888 	.word	0x08003888
 8000a28:	2000012d 	.word	0x2000012d

08000a2c <HAL_UART_RxCpltCallback>:

					void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
					{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
						uartbuff[uartcount] = uartbuf;
 8000a34:	4b50      	ldr	r3, [pc, #320]	; (8000b78 <HAL_UART_RxCpltCallback+0x14c>)
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	001a      	movs	r2, r3
 8000a3a:	4b50      	ldr	r3, [pc, #320]	; (8000b7c <HAL_UART_RxCpltCallback+0x150>)
 8000a3c:	7819      	ldrb	r1, [r3, #0]
 8000a3e:	4b50      	ldr	r3, [pc, #320]	; (8000b80 <HAL_UART_RxCpltCallback+0x154>)
 8000a40:	5499      	strb	r1, [r3, r2]
						uartcount++;
 8000a42:	4b4d      	ldr	r3, [pc, #308]	; (8000b78 <HAL_UART_RxCpltCallback+0x14c>)
 8000a44:	781b      	ldrb	r3, [r3, #0]
 8000a46:	3301      	adds	r3, #1
 8000a48:	b2da      	uxtb	r2, r3
 8000a4a:	4b4b      	ldr	r3, [pc, #300]	; (8000b78 <HAL_UART_RxCpltCallback+0x14c>)
 8000a4c:	701a      	strb	r2, [r3, #0]
						if(uartcount > 5)
 8000a4e:	4b4a      	ldr	r3, [pc, #296]	; (8000b78 <HAL_UART_RxCpltCallback+0x14c>)
 8000a50:	781b      	ldrb	r3, [r3, #0]
 8000a52:	2b05      	cmp	r3, #5
 8000a54:	d908      	bls.n	8000a68 <HAL_UART_RxCpltCallback+0x3c>
						{
							uartcount = 0;
 8000a56:	4b48      	ldr	r3, [pc, #288]	; (8000b78 <HAL_UART_RxCpltCallback+0x14c>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	701a      	strb	r2, [r3, #0]
							memset(uartbuff,0,10);
 8000a5c:	4b48      	ldr	r3, [pc, #288]	; (8000b80 <HAL_UART_RxCpltCallback+0x154>)
 8000a5e:	220a      	movs	r2, #10
 8000a60:	2100      	movs	r1, #0
 8000a62:	0018      	movs	r0, r3
 8000a64:	f002 fef8 	bl	8003858 <memset>
						}

						if((uartbuff[0] == 0x90)&&(uartbuff[1] == 0x41)&&(uartbuff[2] == 0xFF))
 8000a68:	4b45      	ldr	r3, [pc, #276]	; (8000b80 <HAL_UART_RxCpltCallback+0x154>)
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	2b90      	cmp	r3, #144	; 0x90
 8000a6e:	d117      	bne.n	8000aa0 <HAL_UART_RxCpltCallback+0x74>
 8000a70:	4b43      	ldr	r3, [pc, #268]	; (8000b80 <HAL_UART_RxCpltCallback+0x154>)
 8000a72:	785b      	ldrb	r3, [r3, #1]
 8000a74:	2b41      	cmp	r3, #65	; 0x41
 8000a76:	d113      	bne.n	8000aa0 <HAL_UART_RxCpltCallback+0x74>
 8000a78:	4b41      	ldr	r3, [pc, #260]	; (8000b80 <HAL_UART_RxCpltCallback+0x154>)
 8000a7a:	789b      	ldrb	r3, [r3, #2]
 8000a7c:	2bff      	cmp	r3, #255	; 0xff
 8000a7e:	d10f      	bne.n	8000aa0 <HAL_UART_RxCpltCallback+0x74>
						{
							villtimer = 200;
 8000a80:	4b40      	ldr	r3, [pc, #256]	; (8000b84 <HAL_UART_RxCpltCallback+0x158>)
 8000a82:	22c8      	movs	r2, #200	; 0xc8
 8000a84:	701a      	strb	r2, [r3, #0]
							uartcount = 0;
 8000a86:	4b3c      	ldr	r3, [pc, #240]	; (8000b78 <HAL_UART_RxCpltCallback+0x14c>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	701a      	strb	r2, [r3, #0]
							ackflag = 1;
 8000a8c:	4b3e      	ldr	r3, [pc, #248]	; (8000b88 <HAL_UART_RxCpltCallback+0x15c>)
 8000a8e:	2201      	movs	r2, #1
 8000a90:	701a      	strb	r2, [r3, #0]
							memset(uartbuff,0,10);
 8000a92:	4b3b      	ldr	r3, [pc, #236]	; (8000b80 <HAL_UART_RxCpltCallback+0x154>)
 8000a94:	220a      	movs	r2, #10
 8000a96:	2100      	movs	r1, #0
 8000a98:	0018      	movs	r0, r3
 8000a9a:	f002 fedd 	bl	8003858 <memset>
 8000a9e:	e060      	b.n	8000b62 <HAL_UART_RxCpltCallback+0x136>
						}else if((uartbuff[0] == 0x90)&&(uartbuff[1] == 0x51)&&(uartbuff[2] == 0xFF))
 8000aa0:	4b37      	ldr	r3, [pc, #220]	; (8000b80 <HAL_UART_RxCpltCallback+0x154>)
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	2b90      	cmp	r3, #144	; 0x90
 8000aa6:	d117      	bne.n	8000ad8 <HAL_UART_RxCpltCallback+0xac>
 8000aa8:	4b35      	ldr	r3, [pc, #212]	; (8000b80 <HAL_UART_RxCpltCallback+0x154>)
 8000aaa:	785b      	ldrb	r3, [r3, #1]
 8000aac:	2b51      	cmp	r3, #81	; 0x51
 8000aae:	d113      	bne.n	8000ad8 <HAL_UART_RxCpltCallback+0xac>
 8000ab0:	4b33      	ldr	r3, [pc, #204]	; (8000b80 <HAL_UART_RxCpltCallback+0x154>)
 8000ab2:	789b      	ldrb	r3, [r3, #2]
 8000ab4:	2bff      	cmp	r3, #255	; 0xff
 8000ab6:	d10f      	bne.n	8000ad8 <HAL_UART_RxCpltCallback+0xac>
						{
							villtimer = 200;
 8000ab8:	4b32      	ldr	r3, [pc, #200]	; (8000b84 <HAL_UART_RxCpltCallback+0x158>)
 8000aba:	22c8      	movs	r2, #200	; 0xc8
 8000abc:	701a      	strb	r2, [r3, #0]
							uartcount = 0;
 8000abe:	4b2e      	ldr	r3, [pc, #184]	; (8000b78 <HAL_UART_RxCpltCallback+0x14c>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	701a      	strb	r2, [r3, #0]
							cpltflag = 1;
 8000ac4:	4b31      	ldr	r3, [pc, #196]	; (8000b8c <HAL_UART_RxCpltCallback+0x160>)
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	701a      	strb	r2, [r3, #0]
							memset(uartbuff,0,10);
 8000aca:	4b2d      	ldr	r3, [pc, #180]	; (8000b80 <HAL_UART_RxCpltCallback+0x154>)
 8000acc:	220a      	movs	r2, #10
 8000ace:	2100      	movs	r1, #0
 8000ad0:	0018      	movs	r0, r3
 8000ad2:	f002 fec1 	bl	8003858 <memset>
 8000ad6:	e044      	b.n	8000b62 <HAL_UART_RxCpltCallback+0x136>
						}
						else if((uartbuff[0] == 0x90)&&(uartbuff[1] == 0x50)&&(uartbuff[2] == 0x02)&&(uartbuff[3] == 0xFF))//pwr on
 8000ad8:	4b29      	ldr	r3, [pc, #164]	; (8000b80 <HAL_UART_RxCpltCallback+0x154>)
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	2b90      	cmp	r3, #144	; 0x90
 8000ade:	d11e      	bne.n	8000b1e <HAL_UART_RxCpltCallback+0xf2>
 8000ae0:	4b27      	ldr	r3, [pc, #156]	; (8000b80 <HAL_UART_RxCpltCallback+0x154>)
 8000ae2:	785b      	ldrb	r3, [r3, #1]
 8000ae4:	2b50      	cmp	r3, #80	; 0x50
 8000ae6:	d11a      	bne.n	8000b1e <HAL_UART_RxCpltCallback+0xf2>
 8000ae8:	4b25      	ldr	r3, [pc, #148]	; (8000b80 <HAL_UART_RxCpltCallback+0x154>)
 8000aea:	789b      	ldrb	r3, [r3, #2]
 8000aec:	2b02      	cmp	r3, #2
 8000aee:	d116      	bne.n	8000b1e <HAL_UART_RxCpltCallback+0xf2>
 8000af0:	4b23      	ldr	r3, [pc, #140]	; (8000b80 <HAL_UART_RxCpltCallback+0x154>)
 8000af2:	78db      	ldrb	r3, [r3, #3]
 8000af4:	2bff      	cmp	r3, #255	; 0xff
 8000af6:	d112      	bne.n	8000b1e <HAL_UART_RxCpltCallback+0xf2>
						{
							villtimer = 200;
 8000af8:	4b22      	ldr	r3, [pc, #136]	; (8000b84 <HAL_UART_RxCpltCallback+0x158>)
 8000afa:	22c8      	movs	r2, #200	; 0xc8
 8000afc:	701a      	strb	r2, [r3, #0]
							uartcount = 0;
 8000afe:	4b1e      	ldr	r3, [pc, #120]	; (8000b78 <HAL_UART_RxCpltCallback+0x14c>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	701a      	strb	r2, [r3, #0]
							poweronflag = 1;
 8000b04:	4b22      	ldr	r3, [pc, #136]	; (8000b90 <HAL_UART_RxCpltCallback+0x164>)
 8000b06:	2201      	movs	r2, #1
 8000b08:	701a      	strb	r2, [r3, #0]
							poweroffflag = 0;
 8000b0a:	4b22      	ldr	r3, [pc, #136]	; (8000b94 <HAL_UART_RxCpltCallback+0x168>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	701a      	strb	r2, [r3, #0]
							memset(uartbuff,0,10);
 8000b10:	4b1b      	ldr	r3, [pc, #108]	; (8000b80 <HAL_UART_RxCpltCallback+0x154>)
 8000b12:	220a      	movs	r2, #10
 8000b14:	2100      	movs	r1, #0
 8000b16:	0018      	movs	r0, r3
 8000b18:	f002 fe9e 	bl	8003858 <memset>
 8000b1c:	e021      	b.n	8000b62 <HAL_UART_RxCpltCallback+0x136>
						}else if((uartbuff[0] == 0x90)&&(uartbuff[1] == 0x50)&&(uartbuff[2] == 0x03)&&(uartbuff[3] == 0xFF))//pwr off
 8000b1e:	4b18      	ldr	r3, [pc, #96]	; (8000b80 <HAL_UART_RxCpltCallback+0x154>)
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	2b90      	cmp	r3, #144	; 0x90
 8000b24:	d11d      	bne.n	8000b62 <HAL_UART_RxCpltCallback+0x136>
 8000b26:	4b16      	ldr	r3, [pc, #88]	; (8000b80 <HAL_UART_RxCpltCallback+0x154>)
 8000b28:	785b      	ldrb	r3, [r3, #1]
 8000b2a:	2b50      	cmp	r3, #80	; 0x50
 8000b2c:	d119      	bne.n	8000b62 <HAL_UART_RxCpltCallback+0x136>
 8000b2e:	4b14      	ldr	r3, [pc, #80]	; (8000b80 <HAL_UART_RxCpltCallback+0x154>)
 8000b30:	789b      	ldrb	r3, [r3, #2]
 8000b32:	2b03      	cmp	r3, #3
 8000b34:	d115      	bne.n	8000b62 <HAL_UART_RxCpltCallback+0x136>
 8000b36:	4b12      	ldr	r3, [pc, #72]	; (8000b80 <HAL_UART_RxCpltCallback+0x154>)
 8000b38:	78db      	ldrb	r3, [r3, #3]
 8000b3a:	2bff      	cmp	r3, #255	; 0xff
 8000b3c:	d111      	bne.n	8000b62 <HAL_UART_RxCpltCallback+0x136>
						{
							villtimer = 200;
 8000b3e:	4b11      	ldr	r3, [pc, #68]	; (8000b84 <HAL_UART_RxCpltCallback+0x158>)
 8000b40:	22c8      	movs	r2, #200	; 0xc8
 8000b42:	701a      	strb	r2, [r3, #0]
							uartcount = 0;
 8000b44:	4b0c      	ldr	r3, [pc, #48]	; (8000b78 <HAL_UART_RxCpltCallback+0x14c>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	701a      	strb	r2, [r3, #0]
							poweroffflag = 1;
 8000b4a:	4b12      	ldr	r3, [pc, #72]	; (8000b94 <HAL_UART_RxCpltCallback+0x168>)
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	701a      	strb	r2, [r3, #0]
							poweronflag = 0;
 8000b50:	4b0f      	ldr	r3, [pc, #60]	; (8000b90 <HAL_UART_RxCpltCallback+0x164>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	701a      	strb	r2, [r3, #0]
							memset(uartbuff,0,10);
 8000b56:	4b0a      	ldr	r3, [pc, #40]	; (8000b80 <HAL_UART_RxCpltCallback+0x154>)
 8000b58:	220a      	movs	r2, #10
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	0018      	movs	r0, r3
 8000b5e:	f002 fe7b 	bl	8003858 <memset>
						}
						HAL_UART_Receive_IT(&huart1,&uartbuf,1);
 8000b62:	4906      	ldr	r1, [pc, #24]	; (8000b7c <HAL_UART_RxCpltCallback+0x150>)
 8000b64:	4b0c      	ldr	r3, [pc, #48]	; (8000b98 <HAL_UART_RxCpltCallback+0x16c>)
 8000b66:	2201      	movs	r2, #1
 8000b68:	0018      	movs	r0, r3
 8000b6a:	f001 fd13 	bl	8002594 <HAL_UART_Receive_IT>
					}
 8000b6e:	46c0      	nop			; (mov r8, r8)
 8000b70:	46bd      	mov	sp, r7
 8000b72:	b002      	add	sp, #8
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	46c0      	nop			; (mov r8, r8)
 8000b78:	20000145 	.word	0x20000145
 8000b7c:	20000144 	.word	0x20000144
 8000b80:	20000130 	.word	0x20000130
 8000b84:	2000014a 	.word	0x2000014a
 8000b88:	20000146 	.word	0x20000146
 8000b8c:	20000147 	.word	0x20000147
 8000b90:	20000148 	.word	0x20000148
 8000b94:	20000149 	.word	0x20000149
 8000b98:	20000078 	.word	0x20000078

08000b9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
						/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000ba0:	46c0      	nop			; (mov r8, r8)
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
	...

08000ba8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bae:	4b0f      	ldr	r3, [pc, #60]	; (8000bec <HAL_MspInit+0x44>)
 8000bb0:	699a      	ldr	r2, [r3, #24]
 8000bb2:	4b0e      	ldr	r3, [pc, #56]	; (8000bec <HAL_MspInit+0x44>)
 8000bb4:	2101      	movs	r1, #1
 8000bb6:	430a      	orrs	r2, r1
 8000bb8:	619a      	str	r2, [r3, #24]
 8000bba:	4b0c      	ldr	r3, [pc, #48]	; (8000bec <HAL_MspInit+0x44>)
 8000bbc:	699b      	ldr	r3, [r3, #24]
 8000bbe:	2201      	movs	r2, #1
 8000bc0:	4013      	ands	r3, r2
 8000bc2:	607b      	str	r3, [r7, #4]
 8000bc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bc6:	4b09      	ldr	r3, [pc, #36]	; (8000bec <HAL_MspInit+0x44>)
 8000bc8:	69da      	ldr	r2, [r3, #28]
 8000bca:	4b08      	ldr	r3, [pc, #32]	; (8000bec <HAL_MspInit+0x44>)
 8000bcc:	2180      	movs	r1, #128	; 0x80
 8000bce:	0549      	lsls	r1, r1, #21
 8000bd0:	430a      	orrs	r2, r1
 8000bd2:	61da      	str	r2, [r3, #28]
 8000bd4:	4b05      	ldr	r3, [pc, #20]	; (8000bec <HAL_MspInit+0x44>)
 8000bd6:	69da      	ldr	r2, [r3, #28]
 8000bd8:	2380      	movs	r3, #128	; 0x80
 8000bda:	055b      	lsls	r3, r3, #21
 8000bdc:	4013      	ands	r3, r2
 8000bde:	603b      	str	r3, [r7, #0]
 8000be0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000be2:	46c0      	nop			; (mov r8, r8)
 8000be4:	46bd      	mov	sp, r7
 8000be6:	b002      	add	sp, #8
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	46c0      	nop			; (mov r8, r8)
 8000bec:	40021000 	.word	0x40021000

08000bf0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b084      	sub	sp, #16
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a0e      	ldr	r2, [pc, #56]	; (8000c38 <HAL_TIM_Base_MspInit+0x48>)
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d115      	bne.n	8000c2e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 8000c02:	4b0e      	ldr	r3, [pc, #56]	; (8000c3c <HAL_TIM_Base_MspInit+0x4c>)
 8000c04:	699a      	ldr	r2, [r3, #24]
 8000c06:	4b0d      	ldr	r3, [pc, #52]	; (8000c3c <HAL_TIM_Base_MspInit+0x4c>)
 8000c08:	2180      	movs	r1, #128	; 0x80
 8000c0a:	02c9      	lsls	r1, r1, #11
 8000c0c:	430a      	orrs	r2, r1
 8000c0e:	619a      	str	r2, [r3, #24]
 8000c10:	4b0a      	ldr	r3, [pc, #40]	; (8000c3c <HAL_TIM_Base_MspInit+0x4c>)
 8000c12:	699a      	ldr	r2, [r3, #24]
 8000c14:	2380      	movs	r3, #128	; 0x80
 8000c16:	02db      	lsls	r3, r3, #11
 8000c18:	4013      	ands	r3, r2
 8000c1a:	60fb      	str	r3, [r7, #12]
 8000c1c:	68fb      	ldr	r3, [r7, #12]
    /* TIM17 interrupt Init */
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8000c1e:	2200      	movs	r2, #0
 8000c20:	2100      	movs	r1, #0
 8000c22:	2016      	movs	r0, #22
 8000c24:	f000 f9f4 	bl	8001010 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8000c28:	2016      	movs	r0, #22
 8000c2a:	f000 fa06 	bl	800103a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8000c2e:	46c0      	nop			; (mov r8, r8)
 8000c30:	46bd      	mov	sp, r7
 8000c32:	b004      	add	sp, #16
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	46c0      	nop			; (mov r8, r8)
 8000c38:	40014800 	.word	0x40014800
 8000c3c:	40021000 	.word	0x40021000

08000c40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c40:	b590      	push	{r4, r7, lr}
 8000c42:	b08b      	sub	sp, #44	; 0x2c
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c48:	2414      	movs	r4, #20
 8000c4a:	193b      	adds	r3, r7, r4
 8000c4c:	0018      	movs	r0, r3
 8000c4e:	2314      	movs	r3, #20
 8000c50:	001a      	movs	r2, r3
 8000c52:	2100      	movs	r1, #0
 8000c54:	f002 fe00 	bl	8003858 <memset>
  if(huart->Instance==USART1)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a20      	ldr	r2, [pc, #128]	; (8000ce0 <HAL_UART_MspInit+0xa0>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d13a      	bne.n	8000cd8 <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c62:	4b20      	ldr	r3, [pc, #128]	; (8000ce4 <HAL_UART_MspInit+0xa4>)
 8000c64:	699a      	ldr	r2, [r3, #24]
 8000c66:	4b1f      	ldr	r3, [pc, #124]	; (8000ce4 <HAL_UART_MspInit+0xa4>)
 8000c68:	2180      	movs	r1, #128	; 0x80
 8000c6a:	01c9      	lsls	r1, r1, #7
 8000c6c:	430a      	orrs	r2, r1
 8000c6e:	619a      	str	r2, [r3, #24]
 8000c70:	4b1c      	ldr	r3, [pc, #112]	; (8000ce4 <HAL_UART_MspInit+0xa4>)
 8000c72:	699a      	ldr	r2, [r3, #24]
 8000c74:	2380      	movs	r3, #128	; 0x80
 8000c76:	01db      	lsls	r3, r3, #7
 8000c78:	4013      	ands	r3, r2
 8000c7a:	613b      	str	r3, [r7, #16]
 8000c7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c7e:	4b19      	ldr	r3, [pc, #100]	; (8000ce4 <HAL_UART_MspInit+0xa4>)
 8000c80:	695a      	ldr	r2, [r3, #20]
 8000c82:	4b18      	ldr	r3, [pc, #96]	; (8000ce4 <HAL_UART_MspInit+0xa4>)
 8000c84:	2180      	movs	r1, #128	; 0x80
 8000c86:	0289      	lsls	r1, r1, #10
 8000c88:	430a      	orrs	r2, r1
 8000c8a:	615a      	str	r2, [r3, #20]
 8000c8c:	4b15      	ldr	r3, [pc, #84]	; (8000ce4 <HAL_UART_MspInit+0xa4>)
 8000c8e:	695a      	ldr	r2, [r3, #20]
 8000c90:	2380      	movs	r3, #128	; 0x80
 8000c92:	029b      	lsls	r3, r3, #10
 8000c94:	4013      	ands	r3, r2
 8000c96:	60fb      	str	r3, [r7, #12]
 8000c98:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA2     ------> USART1_TX
    PA3     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c9a:	0021      	movs	r1, r4
 8000c9c:	187b      	adds	r3, r7, r1
 8000c9e:	220c      	movs	r2, #12
 8000ca0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca2:	187b      	adds	r3, r7, r1
 8000ca4:	2202      	movs	r2, #2
 8000ca6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca8:	187b      	adds	r3, r7, r1
 8000caa:	2200      	movs	r2, #0
 8000cac:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cae:	187b      	adds	r3, r7, r1
 8000cb0:	2203      	movs	r2, #3
 8000cb2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000cb4:	187b      	adds	r3, r7, r1
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cba:	187a      	adds	r2, r7, r1
 8000cbc:	2390      	movs	r3, #144	; 0x90
 8000cbe:	05db      	lsls	r3, r3, #23
 8000cc0:	0011      	movs	r1, r2
 8000cc2:	0018      	movs	r0, r3
 8000cc4:	f000 fa54 	bl	8001170 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000cc8:	2200      	movs	r2, #0
 8000cca:	2100      	movs	r1, #0
 8000ccc:	201b      	movs	r0, #27
 8000cce:	f000 f99f 	bl	8001010 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000cd2:	201b      	movs	r0, #27
 8000cd4:	f000 f9b1 	bl	800103a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000cd8:	46c0      	nop			; (mov r8, r8)
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	b00b      	add	sp, #44	; 0x2c
 8000cde:	bd90      	pop	{r4, r7, pc}
 8000ce0:	40013800 	.word	0x40013800
 8000ce4:	40021000 	.word	0x40021000

08000ce8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cec:	e7fe      	b.n	8000cec <NMI_Handler+0x4>

08000cee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cee:	b580      	push	{r7, lr}
 8000cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cf2:	e7fe      	b.n	8000cf2 <HardFault_Handler+0x4>

08000cf4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000cf8:	46c0      	nop			; (mov r8, r8)
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}

08000cfe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cfe:	b580      	push	{r7, lr}
 8000d00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d02:	46c0      	nop			; (mov r8, r8)
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}

08000d08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d0c:	f000 f894 	bl	8000e38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d10:	46c0      	nop			; (mov r8, r8)
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
	...

08000d18 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8000d1c:	4b03      	ldr	r3, [pc, #12]	; (8000d2c <TIM17_IRQHandler+0x14>)
 8000d1e:	0018      	movs	r0, r3
 8000d20:	f001 f992 	bl	8002048 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8000d24:	46c0      	nop			; (mov r8, r8)
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	46c0      	nop			; (mov r8, r8)
 8000d2c:	20000030 	.word	0x20000030

08000d30 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000d34:	4b03      	ldr	r3, [pc, #12]	; (8000d44 <USART1_IRQHandler+0x14>)
 8000d36:	0018      	movs	r0, r3
 8000d38:	f001 fc84 	bl	8002644 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000d3c:	46c0      	nop			; (mov r8, r8)
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	46c0      	nop			; (mov r8, r8)
 8000d44:	20000078 	.word	0x20000078

08000d48 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000d4c:	46c0      	nop			; (mov r8, r8)
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
	...

08000d54 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d54:	480d      	ldr	r0, [pc, #52]	; (8000d8c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d56:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d58:	f7ff fff6 	bl	8000d48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d5c:	480c      	ldr	r0, [pc, #48]	; (8000d90 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d5e:	490d      	ldr	r1, [pc, #52]	; (8000d94 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d60:	4a0d      	ldr	r2, [pc, #52]	; (8000d98 <LoopForever+0xe>)
  movs r3, #0
 8000d62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d64:	e002      	b.n	8000d6c <LoopCopyDataInit>

08000d66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d6a:	3304      	adds	r3, #4

08000d6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d70:	d3f9      	bcc.n	8000d66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d72:	4a0a      	ldr	r2, [pc, #40]	; (8000d9c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d74:	4c0a      	ldr	r4, [pc, #40]	; (8000da0 <LoopForever+0x16>)
  movs r3, #0
 8000d76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d78:	e001      	b.n	8000d7e <LoopFillZerobss>

08000d7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d7c:	3204      	adds	r2, #4

08000d7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d80:	d3fb      	bcc.n	8000d7a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000d82:	f002 fd45 	bl	8003810 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d86:	f7ff fa87 	bl	8000298 <main>

08000d8a <LoopForever>:

LoopForever:
    b LoopForever
 8000d8a:	e7fe      	b.n	8000d8a <LoopForever>
  ldr   r0, =_estack
 8000d8c:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8000d90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d94:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000d98:	08003900 	.word	0x08003900
  ldr r2, =_sbss
 8000d9c:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000da0:	2000015c 	.word	0x2000015c

08000da4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000da4:	e7fe      	b.n	8000da4 <ADC1_IRQHandler>
	...

08000da8 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dac:	4b07      	ldr	r3, [pc, #28]	; (8000dcc <HAL_Init+0x24>)
 8000dae:	681a      	ldr	r2, [r3, #0]
 8000db0:	4b06      	ldr	r3, [pc, #24]	; (8000dcc <HAL_Init+0x24>)
 8000db2:	2110      	movs	r1, #16
 8000db4:	430a      	orrs	r2, r1
 8000db6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000db8:	2000      	movs	r0, #0
 8000dba:	f000 f809 	bl	8000dd0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dbe:	f7ff fef3 	bl	8000ba8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dc2:	2300      	movs	r3, #0
}
 8000dc4:	0018      	movs	r0, r3
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	46c0      	nop			; (mov r8, r8)
 8000dcc:	40022000 	.word	0x40022000

08000dd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dd0:	b590      	push	{r4, r7, lr}
 8000dd2:	b083      	sub	sp, #12
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dd8:	4b14      	ldr	r3, [pc, #80]	; (8000e2c <HAL_InitTick+0x5c>)
 8000dda:	681c      	ldr	r4, [r3, #0]
 8000ddc:	4b14      	ldr	r3, [pc, #80]	; (8000e30 <HAL_InitTick+0x60>)
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	0019      	movs	r1, r3
 8000de2:	23fa      	movs	r3, #250	; 0xfa
 8000de4:	0098      	lsls	r0, r3, #2
 8000de6:	f7ff f98f 	bl	8000108 <__udivsi3>
 8000dea:	0003      	movs	r3, r0
 8000dec:	0019      	movs	r1, r3
 8000dee:	0020      	movs	r0, r4
 8000df0:	f7ff f98a 	bl	8000108 <__udivsi3>
 8000df4:	0003      	movs	r3, r0
 8000df6:	0018      	movs	r0, r3
 8000df8:	f000 f92f 	bl	800105a <HAL_SYSTICK_Config>
 8000dfc:	1e03      	subs	r3, r0, #0
 8000dfe:	d001      	beq.n	8000e04 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000e00:	2301      	movs	r3, #1
 8000e02:	e00f      	b.n	8000e24 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	2b03      	cmp	r3, #3
 8000e08:	d80b      	bhi.n	8000e22 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e0a:	6879      	ldr	r1, [r7, #4]
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	425b      	negs	r3, r3
 8000e10:	2200      	movs	r2, #0
 8000e12:	0018      	movs	r0, r3
 8000e14:	f000 f8fc 	bl	8001010 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e18:	4b06      	ldr	r3, [pc, #24]	; (8000e34 <HAL_InitTick+0x64>)
 8000e1a:	687a      	ldr	r2, [r7, #4]
 8000e1c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	e000      	b.n	8000e24 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000e22:	2301      	movs	r3, #1
}
 8000e24:	0018      	movs	r0, r3
 8000e26:	46bd      	mov	sp, r7
 8000e28:	b003      	add	sp, #12
 8000e2a:	bd90      	pop	{r4, r7, pc}
 8000e2c:	20000008 	.word	0x20000008
 8000e30:	20000010 	.word	0x20000010
 8000e34:	2000000c 	.word	0x2000000c

08000e38 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e3c:	4b05      	ldr	r3, [pc, #20]	; (8000e54 <HAL_IncTick+0x1c>)
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	001a      	movs	r2, r3
 8000e42:	4b05      	ldr	r3, [pc, #20]	; (8000e58 <HAL_IncTick+0x20>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	18d2      	adds	r2, r2, r3
 8000e48:	4b03      	ldr	r3, [pc, #12]	; (8000e58 <HAL_IncTick+0x20>)
 8000e4a:	601a      	str	r2, [r3, #0]
}
 8000e4c:	46c0      	nop			; (mov r8, r8)
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	46c0      	nop			; (mov r8, r8)
 8000e54:	20000010 	.word	0x20000010
 8000e58:	20000158 	.word	0x20000158

08000e5c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e60:	4b02      	ldr	r3, [pc, #8]	; (8000e6c <HAL_GetTick+0x10>)
 8000e62:	681b      	ldr	r3, [r3, #0]
}
 8000e64:	0018      	movs	r0, r3
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	46c0      	nop			; (mov r8, r8)
 8000e6c:	20000158 	.word	0x20000158

08000e70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b084      	sub	sp, #16
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e78:	f7ff fff0 	bl	8000e5c <HAL_GetTick>
 8000e7c:	0003      	movs	r3, r0
 8000e7e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	3301      	adds	r3, #1
 8000e88:	d005      	beq.n	8000e96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e8a:	4b0a      	ldr	r3, [pc, #40]	; (8000eb4 <HAL_Delay+0x44>)
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	001a      	movs	r2, r3
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	189b      	adds	r3, r3, r2
 8000e94:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000e96:	46c0      	nop			; (mov r8, r8)
 8000e98:	f7ff ffe0 	bl	8000e5c <HAL_GetTick>
 8000e9c:	0002      	movs	r2, r0
 8000e9e:	68bb      	ldr	r3, [r7, #8]
 8000ea0:	1ad3      	subs	r3, r2, r3
 8000ea2:	68fa      	ldr	r2, [r7, #12]
 8000ea4:	429a      	cmp	r2, r3
 8000ea6:	d8f7      	bhi.n	8000e98 <HAL_Delay+0x28>
  {
  }
}
 8000ea8:	46c0      	nop			; (mov r8, r8)
 8000eaa:	46c0      	nop			; (mov r8, r8)
 8000eac:	46bd      	mov	sp, r7
 8000eae:	b004      	add	sp, #16
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	46c0      	nop			; (mov r8, r8)
 8000eb4:	20000010 	.word	0x20000010

08000eb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	0002      	movs	r2, r0
 8000ec0:	1dfb      	adds	r3, r7, #7
 8000ec2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000ec4:	1dfb      	adds	r3, r7, #7
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	2b7f      	cmp	r3, #127	; 0x7f
 8000eca:	d809      	bhi.n	8000ee0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ecc:	1dfb      	adds	r3, r7, #7
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	001a      	movs	r2, r3
 8000ed2:	231f      	movs	r3, #31
 8000ed4:	401a      	ands	r2, r3
 8000ed6:	4b04      	ldr	r3, [pc, #16]	; (8000ee8 <__NVIC_EnableIRQ+0x30>)
 8000ed8:	2101      	movs	r1, #1
 8000eda:	4091      	lsls	r1, r2
 8000edc:	000a      	movs	r2, r1
 8000ede:	601a      	str	r2, [r3, #0]
  }
}
 8000ee0:	46c0      	nop			; (mov r8, r8)
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	b002      	add	sp, #8
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	e000e100 	.word	0xe000e100

08000eec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000eec:	b590      	push	{r4, r7, lr}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	0002      	movs	r2, r0
 8000ef4:	6039      	str	r1, [r7, #0]
 8000ef6:	1dfb      	adds	r3, r7, #7
 8000ef8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000efa:	1dfb      	adds	r3, r7, #7
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	2b7f      	cmp	r3, #127	; 0x7f
 8000f00:	d828      	bhi.n	8000f54 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f02:	4a2f      	ldr	r2, [pc, #188]	; (8000fc0 <__NVIC_SetPriority+0xd4>)
 8000f04:	1dfb      	adds	r3, r7, #7
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	b25b      	sxtb	r3, r3
 8000f0a:	089b      	lsrs	r3, r3, #2
 8000f0c:	33c0      	adds	r3, #192	; 0xc0
 8000f0e:	009b      	lsls	r3, r3, #2
 8000f10:	589b      	ldr	r3, [r3, r2]
 8000f12:	1dfa      	adds	r2, r7, #7
 8000f14:	7812      	ldrb	r2, [r2, #0]
 8000f16:	0011      	movs	r1, r2
 8000f18:	2203      	movs	r2, #3
 8000f1a:	400a      	ands	r2, r1
 8000f1c:	00d2      	lsls	r2, r2, #3
 8000f1e:	21ff      	movs	r1, #255	; 0xff
 8000f20:	4091      	lsls	r1, r2
 8000f22:	000a      	movs	r2, r1
 8000f24:	43d2      	mvns	r2, r2
 8000f26:	401a      	ands	r2, r3
 8000f28:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	019b      	lsls	r3, r3, #6
 8000f2e:	22ff      	movs	r2, #255	; 0xff
 8000f30:	401a      	ands	r2, r3
 8000f32:	1dfb      	adds	r3, r7, #7
 8000f34:	781b      	ldrb	r3, [r3, #0]
 8000f36:	0018      	movs	r0, r3
 8000f38:	2303      	movs	r3, #3
 8000f3a:	4003      	ands	r3, r0
 8000f3c:	00db      	lsls	r3, r3, #3
 8000f3e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f40:	481f      	ldr	r0, [pc, #124]	; (8000fc0 <__NVIC_SetPriority+0xd4>)
 8000f42:	1dfb      	adds	r3, r7, #7
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	b25b      	sxtb	r3, r3
 8000f48:	089b      	lsrs	r3, r3, #2
 8000f4a:	430a      	orrs	r2, r1
 8000f4c:	33c0      	adds	r3, #192	; 0xc0
 8000f4e:	009b      	lsls	r3, r3, #2
 8000f50:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000f52:	e031      	b.n	8000fb8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f54:	4a1b      	ldr	r2, [pc, #108]	; (8000fc4 <__NVIC_SetPriority+0xd8>)
 8000f56:	1dfb      	adds	r3, r7, #7
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	0019      	movs	r1, r3
 8000f5c:	230f      	movs	r3, #15
 8000f5e:	400b      	ands	r3, r1
 8000f60:	3b08      	subs	r3, #8
 8000f62:	089b      	lsrs	r3, r3, #2
 8000f64:	3306      	adds	r3, #6
 8000f66:	009b      	lsls	r3, r3, #2
 8000f68:	18d3      	adds	r3, r2, r3
 8000f6a:	3304      	adds	r3, #4
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	1dfa      	adds	r2, r7, #7
 8000f70:	7812      	ldrb	r2, [r2, #0]
 8000f72:	0011      	movs	r1, r2
 8000f74:	2203      	movs	r2, #3
 8000f76:	400a      	ands	r2, r1
 8000f78:	00d2      	lsls	r2, r2, #3
 8000f7a:	21ff      	movs	r1, #255	; 0xff
 8000f7c:	4091      	lsls	r1, r2
 8000f7e:	000a      	movs	r2, r1
 8000f80:	43d2      	mvns	r2, r2
 8000f82:	401a      	ands	r2, r3
 8000f84:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	019b      	lsls	r3, r3, #6
 8000f8a:	22ff      	movs	r2, #255	; 0xff
 8000f8c:	401a      	ands	r2, r3
 8000f8e:	1dfb      	adds	r3, r7, #7
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	0018      	movs	r0, r3
 8000f94:	2303      	movs	r3, #3
 8000f96:	4003      	ands	r3, r0
 8000f98:	00db      	lsls	r3, r3, #3
 8000f9a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f9c:	4809      	ldr	r0, [pc, #36]	; (8000fc4 <__NVIC_SetPriority+0xd8>)
 8000f9e:	1dfb      	adds	r3, r7, #7
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	001c      	movs	r4, r3
 8000fa4:	230f      	movs	r3, #15
 8000fa6:	4023      	ands	r3, r4
 8000fa8:	3b08      	subs	r3, #8
 8000faa:	089b      	lsrs	r3, r3, #2
 8000fac:	430a      	orrs	r2, r1
 8000fae:	3306      	adds	r3, #6
 8000fb0:	009b      	lsls	r3, r3, #2
 8000fb2:	18c3      	adds	r3, r0, r3
 8000fb4:	3304      	adds	r3, #4
 8000fb6:	601a      	str	r2, [r3, #0]
}
 8000fb8:	46c0      	nop			; (mov r8, r8)
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	b003      	add	sp, #12
 8000fbe:	bd90      	pop	{r4, r7, pc}
 8000fc0:	e000e100 	.word	0xe000e100
 8000fc4:	e000ed00 	.word	0xe000ed00

08000fc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	1e5a      	subs	r2, r3, #1
 8000fd4:	2380      	movs	r3, #128	; 0x80
 8000fd6:	045b      	lsls	r3, r3, #17
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	d301      	bcc.n	8000fe0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fdc:	2301      	movs	r3, #1
 8000fde:	e010      	b.n	8001002 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fe0:	4b0a      	ldr	r3, [pc, #40]	; (800100c <SysTick_Config+0x44>)
 8000fe2:	687a      	ldr	r2, [r7, #4]
 8000fe4:	3a01      	subs	r2, #1
 8000fe6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fe8:	2301      	movs	r3, #1
 8000fea:	425b      	negs	r3, r3
 8000fec:	2103      	movs	r1, #3
 8000fee:	0018      	movs	r0, r3
 8000ff0:	f7ff ff7c 	bl	8000eec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ff4:	4b05      	ldr	r3, [pc, #20]	; (800100c <SysTick_Config+0x44>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ffa:	4b04      	ldr	r3, [pc, #16]	; (800100c <SysTick_Config+0x44>)
 8000ffc:	2207      	movs	r2, #7
 8000ffe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001000:	2300      	movs	r3, #0
}
 8001002:	0018      	movs	r0, r3
 8001004:	46bd      	mov	sp, r7
 8001006:	b002      	add	sp, #8
 8001008:	bd80      	pop	{r7, pc}
 800100a:	46c0      	nop			; (mov r8, r8)
 800100c:	e000e010 	.word	0xe000e010

08001010 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001010:	b580      	push	{r7, lr}
 8001012:	b084      	sub	sp, #16
 8001014:	af00      	add	r7, sp, #0
 8001016:	60b9      	str	r1, [r7, #8]
 8001018:	607a      	str	r2, [r7, #4]
 800101a:	210f      	movs	r1, #15
 800101c:	187b      	adds	r3, r7, r1
 800101e:	1c02      	adds	r2, r0, #0
 8001020:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001022:	68ba      	ldr	r2, [r7, #8]
 8001024:	187b      	adds	r3, r7, r1
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	b25b      	sxtb	r3, r3
 800102a:	0011      	movs	r1, r2
 800102c:	0018      	movs	r0, r3
 800102e:	f7ff ff5d 	bl	8000eec <__NVIC_SetPriority>
}
 8001032:	46c0      	nop			; (mov r8, r8)
 8001034:	46bd      	mov	sp, r7
 8001036:	b004      	add	sp, #16
 8001038:	bd80      	pop	{r7, pc}

0800103a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800103a:	b580      	push	{r7, lr}
 800103c:	b082      	sub	sp, #8
 800103e:	af00      	add	r7, sp, #0
 8001040:	0002      	movs	r2, r0
 8001042:	1dfb      	adds	r3, r7, #7
 8001044:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001046:	1dfb      	adds	r3, r7, #7
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	b25b      	sxtb	r3, r3
 800104c:	0018      	movs	r0, r3
 800104e:	f7ff ff33 	bl	8000eb8 <__NVIC_EnableIRQ>
}
 8001052:	46c0      	nop			; (mov r8, r8)
 8001054:	46bd      	mov	sp, r7
 8001056:	b002      	add	sp, #8
 8001058:	bd80      	pop	{r7, pc}

0800105a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800105a:	b580      	push	{r7, lr}
 800105c:	b082      	sub	sp, #8
 800105e:	af00      	add	r7, sp, #0
 8001060:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	0018      	movs	r0, r3
 8001066:	f7ff ffaf 	bl	8000fc8 <SysTick_Config>
 800106a:	0003      	movs	r3, r0
}
 800106c:	0018      	movs	r0, r3
 800106e:	46bd      	mov	sp, r7
 8001070:	b002      	add	sp, #8
 8001072:	bd80      	pop	{r7, pc}

08001074 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2221      	movs	r2, #33	; 0x21
 8001080:	5c9b      	ldrb	r3, [r3, r2]
 8001082:	b2db      	uxtb	r3, r3
 8001084:	2b02      	cmp	r3, #2
 8001086:	d008      	beq.n	800109a <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2204      	movs	r2, #4
 800108c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	2220      	movs	r2, #32
 8001092:	2100      	movs	r1, #0
 8001094:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001096:	2301      	movs	r3, #1
 8001098:	e020      	b.n	80010dc <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	210e      	movs	r1, #14
 80010a6:	438a      	bics	r2, r1
 80010a8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	2101      	movs	r1, #1
 80010b6:	438a      	bics	r2, r1
 80010b8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010c2:	2101      	movs	r1, #1
 80010c4:	4091      	lsls	r1, r2
 80010c6:	000a      	movs	r2, r1
 80010c8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	2221      	movs	r2, #33	; 0x21
 80010ce:	2101      	movs	r1, #1
 80010d0:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2220      	movs	r2, #32
 80010d6:	2100      	movs	r1, #0
 80010d8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80010da:	2300      	movs	r3, #0
}
 80010dc:	0018      	movs	r0, r3
 80010de:	46bd      	mov	sp, r7
 80010e0:	b002      	add	sp, #8
 80010e2:	bd80      	pop	{r7, pc}

080010e4 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b084      	sub	sp, #16
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80010ec:	210f      	movs	r1, #15
 80010ee:	187b      	adds	r3, r7, r1
 80010f0:	2200      	movs	r2, #0
 80010f2:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2221      	movs	r2, #33	; 0x21
 80010f8:	5c9b      	ldrb	r3, [r3, r2]
 80010fa:	b2db      	uxtb	r3, r3
 80010fc:	2b02      	cmp	r3, #2
 80010fe:	d006      	beq.n	800110e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2204      	movs	r2, #4
 8001104:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8001106:	187b      	adds	r3, r7, r1
 8001108:	2201      	movs	r2, #1
 800110a:	701a      	strb	r2, [r3, #0]
 800110c:	e028      	b.n	8001160 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	210e      	movs	r1, #14
 800111a:	438a      	bics	r2, r1
 800111c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	2101      	movs	r1, #1
 800112a:	438a      	bics	r2, r1
 800112c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001136:	2101      	movs	r1, #1
 8001138:	4091      	lsls	r1, r2
 800113a:	000a      	movs	r2, r1
 800113c:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2221      	movs	r2, #33	; 0x21
 8001142:	2101      	movs	r1, #1
 8001144:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	2220      	movs	r2, #32
 800114a:	2100      	movs	r1, #0
 800114c:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001152:	2b00      	cmp	r3, #0
 8001154:	d004      	beq.n	8001160 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800115a:	687a      	ldr	r2, [r7, #4]
 800115c:	0010      	movs	r0, r2
 800115e:	4798      	blx	r3
    }
  }
  return status;
 8001160:	230f      	movs	r3, #15
 8001162:	18fb      	adds	r3, r7, r3
 8001164:	781b      	ldrb	r3, [r3, #0]
}
 8001166:	0018      	movs	r0, r3
 8001168:	46bd      	mov	sp, r7
 800116a:	b004      	add	sp, #16
 800116c:	bd80      	pop	{r7, pc}
	...

08001170 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b086      	sub	sp, #24
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
 8001178:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800117a:	2300      	movs	r3, #0
 800117c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800117e:	e14f      	b.n	8001420 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	2101      	movs	r1, #1
 8001186:	697a      	ldr	r2, [r7, #20]
 8001188:	4091      	lsls	r1, r2
 800118a:	000a      	movs	r2, r1
 800118c:	4013      	ands	r3, r2
 800118e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d100      	bne.n	8001198 <HAL_GPIO_Init+0x28>
 8001196:	e140      	b.n	800141a <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	2203      	movs	r2, #3
 800119e:	4013      	ands	r3, r2
 80011a0:	2b01      	cmp	r3, #1
 80011a2:	d005      	beq.n	80011b0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	2203      	movs	r2, #3
 80011aa:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80011ac:	2b02      	cmp	r3, #2
 80011ae:	d130      	bne.n	8001212 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	689b      	ldr	r3, [r3, #8]
 80011b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	005b      	lsls	r3, r3, #1
 80011ba:	2203      	movs	r2, #3
 80011bc:	409a      	lsls	r2, r3
 80011be:	0013      	movs	r3, r2
 80011c0:	43da      	mvns	r2, r3
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	4013      	ands	r3, r2
 80011c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	68da      	ldr	r2, [r3, #12]
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	005b      	lsls	r3, r3, #1
 80011d0:	409a      	lsls	r2, r3
 80011d2:	0013      	movs	r3, r2
 80011d4:	693a      	ldr	r2, [r7, #16]
 80011d6:	4313      	orrs	r3, r2
 80011d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	693a      	ldr	r2, [r7, #16]
 80011de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011e6:	2201      	movs	r2, #1
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	409a      	lsls	r2, r3
 80011ec:	0013      	movs	r3, r2
 80011ee:	43da      	mvns	r2, r3
 80011f0:	693b      	ldr	r3, [r7, #16]
 80011f2:	4013      	ands	r3, r2
 80011f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	091b      	lsrs	r3, r3, #4
 80011fc:	2201      	movs	r2, #1
 80011fe:	401a      	ands	r2, r3
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	409a      	lsls	r2, r3
 8001204:	0013      	movs	r3, r2
 8001206:	693a      	ldr	r2, [r7, #16]
 8001208:	4313      	orrs	r3, r2
 800120a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	693a      	ldr	r2, [r7, #16]
 8001210:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	2203      	movs	r2, #3
 8001218:	4013      	ands	r3, r2
 800121a:	2b03      	cmp	r3, #3
 800121c:	d017      	beq.n	800124e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	68db      	ldr	r3, [r3, #12]
 8001222:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	005b      	lsls	r3, r3, #1
 8001228:	2203      	movs	r2, #3
 800122a:	409a      	lsls	r2, r3
 800122c:	0013      	movs	r3, r2
 800122e:	43da      	mvns	r2, r3
 8001230:	693b      	ldr	r3, [r7, #16]
 8001232:	4013      	ands	r3, r2
 8001234:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	689a      	ldr	r2, [r3, #8]
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	005b      	lsls	r3, r3, #1
 800123e:	409a      	lsls	r2, r3
 8001240:	0013      	movs	r3, r2
 8001242:	693a      	ldr	r2, [r7, #16]
 8001244:	4313      	orrs	r3, r2
 8001246:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	693a      	ldr	r2, [r7, #16]
 800124c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	2203      	movs	r2, #3
 8001254:	4013      	ands	r3, r2
 8001256:	2b02      	cmp	r3, #2
 8001258:	d123      	bne.n	80012a2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800125a:	697b      	ldr	r3, [r7, #20]
 800125c:	08da      	lsrs	r2, r3, #3
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	3208      	adds	r2, #8
 8001262:	0092      	lsls	r2, r2, #2
 8001264:	58d3      	ldr	r3, [r2, r3]
 8001266:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	2207      	movs	r2, #7
 800126c:	4013      	ands	r3, r2
 800126e:	009b      	lsls	r3, r3, #2
 8001270:	220f      	movs	r2, #15
 8001272:	409a      	lsls	r2, r3
 8001274:	0013      	movs	r3, r2
 8001276:	43da      	mvns	r2, r3
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	4013      	ands	r3, r2
 800127c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	691a      	ldr	r2, [r3, #16]
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	2107      	movs	r1, #7
 8001286:	400b      	ands	r3, r1
 8001288:	009b      	lsls	r3, r3, #2
 800128a:	409a      	lsls	r2, r3
 800128c:	0013      	movs	r3, r2
 800128e:	693a      	ldr	r2, [r7, #16]
 8001290:	4313      	orrs	r3, r2
 8001292:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	08da      	lsrs	r2, r3, #3
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	3208      	adds	r2, #8
 800129c:	0092      	lsls	r2, r2, #2
 800129e:	6939      	ldr	r1, [r7, #16]
 80012a0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	005b      	lsls	r3, r3, #1
 80012ac:	2203      	movs	r2, #3
 80012ae:	409a      	lsls	r2, r3
 80012b0:	0013      	movs	r3, r2
 80012b2:	43da      	mvns	r2, r3
 80012b4:	693b      	ldr	r3, [r7, #16]
 80012b6:	4013      	ands	r3, r2
 80012b8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	2203      	movs	r2, #3
 80012c0:	401a      	ands	r2, r3
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	005b      	lsls	r3, r3, #1
 80012c6:	409a      	lsls	r2, r3
 80012c8:	0013      	movs	r3, r2
 80012ca:	693a      	ldr	r2, [r7, #16]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	693a      	ldr	r2, [r7, #16]
 80012d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	685a      	ldr	r2, [r3, #4]
 80012da:	23c0      	movs	r3, #192	; 0xc0
 80012dc:	029b      	lsls	r3, r3, #10
 80012de:	4013      	ands	r3, r2
 80012e0:	d100      	bne.n	80012e4 <HAL_GPIO_Init+0x174>
 80012e2:	e09a      	b.n	800141a <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012e4:	4b54      	ldr	r3, [pc, #336]	; (8001438 <HAL_GPIO_Init+0x2c8>)
 80012e6:	699a      	ldr	r2, [r3, #24]
 80012e8:	4b53      	ldr	r3, [pc, #332]	; (8001438 <HAL_GPIO_Init+0x2c8>)
 80012ea:	2101      	movs	r1, #1
 80012ec:	430a      	orrs	r2, r1
 80012ee:	619a      	str	r2, [r3, #24]
 80012f0:	4b51      	ldr	r3, [pc, #324]	; (8001438 <HAL_GPIO_Init+0x2c8>)
 80012f2:	699b      	ldr	r3, [r3, #24]
 80012f4:	2201      	movs	r2, #1
 80012f6:	4013      	ands	r3, r2
 80012f8:	60bb      	str	r3, [r7, #8]
 80012fa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80012fc:	4a4f      	ldr	r2, [pc, #316]	; (800143c <HAL_GPIO_Init+0x2cc>)
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	089b      	lsrs	r3, r3, #2
 8001302:	3302      	adds	r3, #2
 8001304:	009b      	lsls	r3, r3, #2
 8001306:	589b      	ldr	r3, [r3, r2]
 8001308:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	2203      	movs	r2, #3
 800130e:	4013      	ands	r3, r2
 8001310:	009b      	lsls	r3, r3, #2
 8001312:	220f      	movs	r2, #15
 8001314:	409a      	lsls	r2, r3
 8001316:	0013      	movs	r3, r2
 8001318:	43da      	mvns	r2, r3
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	4013      	ands	r3, r2
 800131e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001320:	687a      	ldr	r2, [r7, #4]
 8001322:	2390      	movs	r3, #144	; 0x90
 8001324:	05db      	lsls	r3, r3, #23
 8001326:	429a      	cmp	r2, r3
 8001328:	d013      	beq.n	8001352 <HAL_GPIO_Init+0x1e2>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	4a44      	ldr	r2, [pc, #272]	; (8001440 <HAL_GPIO_Init+0x2d0>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d00d      	beq.n	800134e <HAL_GPIO_Init+0x1de>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4a43      	ldr	r2, [pc, #268]	; (8001444 <HAL_GPIO_Init+0x2d4>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d007      	beq.n	800134a <HAL_GPIO_Init+0x1da>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4a42      	ldr	r2, [pc, #264]	; (8001448 <HAL_GPIO_Init+0x2d8>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d101      	bne.n	8001346 <HAL_GPIO_Init+0x1d6>
 8001342:	2303      	movs	r3, #3
 8001344:	e006      	b.n	8001354 <HAL_GPIO_Init+0x1e4>
 8001346:	2305      	movs	r3, #5
 8001348:	e004      	b.n	8001354 <HAL_GPIO_Init+0x1e4>
 800134a:	2302      	movs	r3, #2
 800134c:	e002      	b.n	8001354 <HAL_GPIO_Init+0x1e4>
 800134e:	2301      	movs	r3, #1
 8001350:	e000      	b.n	8001354 <HAL_GPIO_Init+0x1e4>
 8001352:	2300      	movs	r3, #0
 8001354:	697a      	ldr	r2, [r7, #20]
 8001356:	2103      	movs	r1, #3
 8001358:	400a      	ands	r2, r1
 800135a:	0092      	lsls	r2, r2, #2
 800135c:	4093      	lsls	r3, r2
 800135e:	693a      	ldr	r2, [r7, #16]
 8001360:	4313      	orrs	r3, r2
 8001362:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001364:	4935      	ldr	r1, [pc, #212]	; (800143c <HAL_GPIO_Init+0x2cc>)
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	089b      	lsrs	r3, r3, #2
 800136a:	3302      	adds	r3, #2
 800136c:	009b      	lsls	r3, r3, #2
 800136e:	693a      	ldr	r2, [r7, #16]
 8001370:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001372:	4b36      	ldr	r3, [pc, #216]	; (800144c <HAL_GPIO_Init+0x2dc>)
 8001374:	689b      	ldr	r3, [r3, #8]
 8001376:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	43da      	mvns	r2, r3
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	4013      	ands	r3, r2
 8001380:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	685a      	ldr	r2, [r3, #4]
 8001386:	2380      	movs	r3, #128	; 0x80
 8001388:	035b      	lsls	r3, r3, #13
 800138a:	4013      	ands	r3, r2
 800138c:	d003      	beq.n	8001396 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 800138e:	693a      	ldr	r2, [r7, #16]
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	4313      	orrs	r3, r2
 8001394:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001396:	4b2d      	ldr	r3, [pc, #180]	; (800144c <HAL_GPIO_Init+0x2dc>)
 8001398:	693a      	ldr	r2, [r7, #16]
 800139a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800139c:	4b2b      	ldr	r3, [pc, #172]	; (800144c <HAL_GPIO_Init+0x2dc>)
 800139e:	68db      	ldr	r3, [r3, #12]
 80013a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	43da      	mvns	r2, r3
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	4013      	ands	r3, r2
 80013aa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	685a      	ldr	r2, [r3, #4]
 80013b0:	2380      	movs	r3, #128	; 0x80
 80013b2:	039b      	lsls	r3, r3, #14
 80013b4:	4013      	ands	r3, r2
 80013b6:	d003      	beq.n	80013c0 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80013b8:	693a      	ldr	r2, [r7, #16]
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	4313      	orrs	r3, r2
 80013be:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80013c0:	4b22      	ldr	r3, [pc, #136]	; (800144c <HAL_GPIO_Init+0x2dc>)
 80013c2:	693a      	ldr	r2, [r7, #16]
 80013c4:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 80013c6:	4b21      	ldr	r3, [pc, #132]	; (800144c <HAL_GPIO_Init+0x2dc>)
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	43da      	mvns	r2, r3
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	4013      	ands	r3, r2
 80013d4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	685a      	ldr	r2, [r3, #4]
 80013da:	2380      	movs	r3, #128	; 0x80
 80013dc:	029b      	lsls	r3, r3, #10
 80013de:	4013      	ands	r3, r2
 80013e0:	d003      	beq.n	80013ea <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80013e2:	693a      	ldr	r2, [r7, #16]
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	4313      	orrs	r3, r2
 80013e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80013ea:	4b18      	ldr	r3, [pc, #96]	; (800144c <HAL_GPIO_Init+0x2dc>)
 80013ec:	693a      	ldr	r2, [r7, #16]
 80013ee:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80013f0:	4b16      	ldr	r3, [pc, #88]	; (800144c <HAL_GPIO_Init+0x2dc>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	43da      	mvns	r2, r3
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	4013      	ands	r3, r2
 80013fe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	685a      	ldr	r2, [r3, #4]
 8001404:	2380      	movs	r3, #128	; 0x80
 8001406:	025b      	lsls	r3, r3, #9
 8001408:	4013      	ands	r3, r2
 800140a:	d003      	beq.n	8001414 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 800140c:	693a      	ldr	r2, [r7, #16]
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	4313      	orrs	r3, r2
 8001412:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001414:	4b0d      	ldr	r3, [pc, #52]	; (800144c <HAL_GPIO_Init+0x2dc>)
 8001416:	693a      	ldr	r2, [r7, #16]
 8001418:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	3301      	adds	r3, #1
 800141e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	40da      	lsrs	r2, r3
 8001428:	1e13      	subs	r3, r2, #0
 800142a:	d000      	beq.n	800142e <HAL_GPIO_Init+0x2be>
 800142c:	e6a8      	b.n	8001180 <HAL_GPIO_Init+0x10>
  } 
}
 800142e:	46c0      	nop			; (mov r8, r8)
 8001430:	46c0      	nop			; (mov r8, r8)
 8001432:	46bd      	mov	sp, r7
 8001434:	b006      	add	sp, #24
 8001436:	bd80      	pop	{r7, pc}
 8001438:	40021000 	.word	0x40021000
 800143c:	40010000 	.word	0x40010000
 8001440:	48000400 	.word	0x48000400
 8001444:	48000800 	.word	0x48000800
 8001448:	48000c00 	.word	0x48000c00
 800144c:	40010400 	.word	0x40010400

08001450 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b084      	sub	sp, #16
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
 8001458:	000a      	movs	r2, r1
 800145a:	1cbb      	adds	r3, r7, #2
 800145c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	691b      	ldr	r3, [r3, #16]
 8001462:	1cba      	adds	r2, r7, #2
 8001464:	8812      	ldrh	r2, [r2, #0]
 8001466:	4013      	ands	r3, r2
 8001468:	d004      	beq.n	8001474 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800146a:	230f      	movs	r3, #15
 800146c:	18fb      	adds	r3, r7, r3
 800146e:	2201      	movs	r2, #1
 8001470:	701a      	strb	r2, [r3, #0]
 8001472:	e003      	b.n	800147c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001474:	230f      	movs	r3, #15
 8001476:	18fb      	adds	r3, r7, r3
 8001478:	2200      	movs	r2, #0
 800147a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800147c:	230f      	movs	r3, #15
 800147e:	18fb      	adds	r3, r7, r3
 8001480:	781b      	ldrb	r3, [r3, #0]
  }
 8001482:	0018      	movs	r0, r3
 8001484:	46bd      	mov	sp, r7
 8001486:	b004      	add	sp, #16
 8001488:	bd80      	pop	{r7, pc}

0800148a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800148a:	b580      	push	{r7, lr}
 800148c:	b082      	sub	sp, #8
 800148e:	af00      	add	r7, sp, #0
 8001490:	6078      	str	r0, [r7, #4]
 8001492:	0008      	movs	r0, r1
 8001494:	0011      	movs	r1, r2
 8001496:	1cbb      	adds	r3, r7, #2
 8001498:	1c02      	adds	r2, r0, #0
 800149a:	801a      	strh	r2, [r3, #0]
 800149c:	1c7b      	adds	r3, r7, #1
 800149e:	1c0a      	adds	r2, r1, #0
 80014a0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014a2:	1c7b      	adds	r3, r7, #1
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d004      	beq.n	80014b4 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80014aa:	1cbb      	adds	r3, r7, #2
 80014ac:	881a      	ldrh	r2, [r3, #0]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80014b2:	e003      	b.n	80014bc <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80014b4:	1cbb      	adds	r3, r7, #2
 80014b6:	881a      	ldrh	r2, [r3, #0]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	629a      	str	r2, [r3, #40]	; 0x28
}
 80014bc:	46c0      	nop			; (mov r8, r8)
 80014be:	46bd      	mov	sp, r7
 80014c0:	b002      	add	sp, #8
 80014c2:	bd80      	pop	{r7, pc}

080014c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b088      	sub	sp, #32
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d101      	bne.n	80014d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	e301      	b.n	8001ada <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	2201      	movs	r2, #1
 80014dc:	4013      	ands	r3, r2
 80014de:	d100      	bne.n	80014e2 <HAL_RCC_OscConfig+0x1e>
 80014e0:	e08d      	b.n	80015fe <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80014e2:	4bc3      	ldr	r3, [pc, #780]	; (80017f0 <HAL_RCC_OscConfig+0x32c>)
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	220c      	movs	r2, #12
 80014e8:	4013      	ands	r3, r2
 80014ea:	2b04      	cmp	r3, #4
 80014ec:	d00e      	beq.n	800150c <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80014ee:	4bc0      	ldr	r3, [pc, #768]	; (80017f0 <HAL_RCC_OscConfig+0x32c>)
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	220c      	movs	r2, #12
 80014f4:	4013      	ands	r3, r2
 80014f6:	2b08      	cmp	r3, #8
 80014f8:	d116      	bne.n	8001528 <HAL_RCC_OscConfig+0x64>
 80014fa:	4bbd      	ldr	r3, [pc, #756]	; (80017f0 <HAL_RCC_OscConfig+0x32c>)
 80014fc:	685a      	ldr	r2, [r3, #4]
 80014fe:	2380      	movs	r3, #128	; 0x80
 8001500:	025b      	lsls	r3, r3, #9
 8001502:	401a      	ands	r2, r3
 8001504:	2380      	movs	r3, #128	; 0x80
 8001506:	025b      	lsls	r3, r3, #9
 8001508:	429a      	cmp	r2, r3
 800150a:	d10d      	bne.n	8001528 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800150c:	4bb8      	ldr	r3, [pc, #736]	; (80017f0 <HAL_RCC_OscConfig+0x32c>)
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	2380      	movs	r3, #128	; 0x80
 8001512:	029b      	lsls	r3, r3, #10
 8001514:	4013      	ands	r3, r2
 8001516:	d100      	bne.n	800151a <HAL_RCC_OscConfig+0x56>
 8001518:	e070      	b.n	80015fc <HAL_RCC_OscConfig+0x138>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d000      	beq.n	8001524 <HAL_RCC_OscConfig+0x60>
 8001522:	e06b      	b.n	80015fc <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001524:	2301      	movs	r3, #1
 8001526:	e2d8      	b.n	8001ada <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	2b01      	cmp	r3, #1
 800152e:	d107      	bne.n	8001540 <HAL_RCC_OscConfig+0x7c>
 8001530:	4baf      	ldr	r3, [pc, #700]	; (80017f0 <HAL_RCC_OscConfig+0x32c>)
 8001532:	681a      	ldr	r2, [r3, #0]
 8001534:	4bae      	ldr	r3, [pc, #696]	; (80017f0 <HAL_RCC_OscConfig+0x32c>)
 8001536:	2180      	movs	r1, #128	; 0x80
 8001538:	0249      	lsls	r1, r1, #9
 800153a:	430a      	orrs	r2, r1
 800153c:	601a      	str	r2, [r3, #0]
 800153e:	e02f      	b.n	80015a0 <HAL_RCC_OscConfig+0xdc>
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d10c      	bne.n	8001562 <HAL_RCC_OscConfig+0x9e>
 8001548:	4ba9      	ldr	r3, [pc, #676]	; (80017f0 <HAL_RCC_OscConfig+0x32c>)
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	4ba8      	ldr	r3, [pc, #672]	; (80017f0 <HAL_RCC_OscConfig+0x32c>)
 800154e:	49a9      	ldr	r1, [pc, #676]	; (80017f4 <HAL_RCC_OscConfig+0x330>)
 8001550:	400a      	ands	r2, r1
 8001552:	601a      	str	r2, [r3, #0]
 8001554:	4ba6      	ldr	r3, [pc, #664]	; (80017f0 <HAL_RCC_OscConfig+0x32c>)
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	4ba5      	ldr	r3, [pc, #660]	; (80017f0 <HAL_RCC_OscConfig+0x32c>)
 800155a:	49a7      	ldr	r1, [pc, #668]	; (80017f8 <HAL_RCC_OscConfig+0x334>)
 800155c:	400a      	ands	r2, r1
 800155e:	601a      	str	r2, [r3, #0]
 8001560:	e01e      	b.n	80015a0 <HAL_RCC_OscConfig+0xdc>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	2b05      	cmp	r3, #5
 8001568:	d10e      	bne.n	8001588 <HAL_RCC_OscConfig+0xc4>
 800156a:	4ba1      	ldr	r3, [pc, #644]	; (80017f0 <HAL_RCC_OscConfig+0x32c>)
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	4ba0      	ldr	r3, [pc, #640]	; (80017f0 <HAL_RCC_OscConfig+0x32c>)
 8001570:	2180      	movs	r1, #128	; 0x80
 8001572:	02c9      	lsls	r1, r1, #11
 8001574:	430a      	orrs	r2, r1
 8001576:	601a      	str	r2, [r3, #0]
 8001578:	4b9d      	ldr	r3, [pc, #628]	; (80017f0 <HAL_RCC_OscConfig+0x32c>)
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	4b9c      	ldr	r3, [pc, #624]	; (80017f0 <HAL_RCC_OscConfig+0x32c>)
 800157e:	2180      	movs	r1, #128	; 0x80
 8001580:	0249      	lsls	r1, r1, #9
 8001582:	430a      	orrs	r2, r1
 8001584:	601a      	str	r2, [r3, #0]
 8001586:	e00b      	b.n	80015a0 <HAL_RCC_OscConfig+0xdc>
 8001588:	4b99      	ldr	r3, [pc, #612]	; (80017f0 <HAL_RCC_OscConfig+0x32c>)
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	4b98      	ldr	r3, [pc, #608]	; (80017f0 <HAL_RCC_OscConfig+0x32c>)
 800158e:	4999      	ldr	r1, [pc, #612]	; (80017f4 <HAL_RCC_OscConfig+0x330>)
 8001590:	400a      	ands	r2, r1
 8001592:	601a      	str	r2, [r3, #0]
 8001594:	4b96      	ldr	r3, [pc, #600]	; (80017f0 <HAL_RCC_OscConfig+0x32c>)
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	4b95      	ldr	r3, [pc, #596]	; (80017f0 <HAL_RCC_OscConfig+0x32c>)
 800159a:	4997      	ldr	r1, [pc, #604]	; (80017f8 <HAL_RCC_OscConfig+0x334>)
 800159c:	400a      	ands	r2, r1
 800159e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d014      	beq.n	80015d2 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015a8:	f7ff fc58 	bl	8000e5c <HAL_GetTick>
 80015ac:	0003      	movs	r3, r0
 80015ae:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015b0:	e008      	b.n	80015c4 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015b2:	f7ff fc53 	bl	8000e5c <HAL_GetTick>
 80015b6:	0002      	movs	r2, r0
 80015b8:	69bb      	ldr	r3, [r7, #24]
 80015ba:	1ad3      	subs	r3, r2, r3
 80015bc:	2b64      	cmp	r3, #100	; 0x64
 80015be:	d901      	bls.n	80015c4 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80015c0:	2303      	movs	r3, #3
 80015c2:	e28a      	b.n	8001ada <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015c4:	4b8a      	ldr	r3, [pc, #552]	; (80017f0 <HAL_RCC_OscConfig+0x32c>)
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	2380      	movs	r3, #128	; 0x80
 80015ca:	029b      	lsls	r3, r3, #10
 80015cc:	4013      	ands	r3, r2
 80015ce:	d0f0      	beq.n	80015b2 <HAL_RCC_OscConfig+0xee>
 80015d0:	e015      	b.n	80015fe <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015d2:	f7ff fc43 	bl	8000e5c <HAL_GetTick>
 80015d6:	0003      	movs	r3, r0
 80015d8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015da:	e008      	b.n	80015ee <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015dc:	f7ff fc3e 	bl	8000e5c <HAL_GetTick>
 80015e0:	0002      	movs	r2, r0
 80015e2:	69bb      	ldr	r3, [r7, #24]
 80015e4:	1ad3      	subs	r3, r2, r3
 80015e6:	2b64      	cmp	r3, #100	; 0x64
 80015e8:	d901      	bls.n	80015ee <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80015ea:	2303      	movs	r3, #3
 80015ec:	e275      	b.n	8001ada <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015ee:	4b80      	ldr	r3, [pc, #512]	; (80017f0 <HAL_RCC_OscConfig+0x32c>)
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	2380      	movs	r3, #128	; 0x80
 80015f4:	029b      	lsls	r3, r3, #10
 80015f6:	4013      	ands	r3, r2
 80015f8:	d1f0      	bne.n	80015dc <HAL_RCC_OscConfig+0x118>
 80015fa:	e000      	b.n	80015fe <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015fc:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	2202      	movs	r2, #2
 8001604:	4013      	ands	r3, r2
 8001606:	d100      	bne.n	800160a <HAL_RCC_OscConfig+0x146>
 8001608:	e069      	b.n	80016de <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800160a:	4b79      	ldr	r3, [pc, #484]	; (80017f0 <HAL_RCC_OscConfig+0x32c>)
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	220c      	movs	r2, #12
 8001610:	4013      	ands	r3, r2
 8001612:	d00b      	beq.n	800162c <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001614:	4b76      	ldr	r3, [pc, #472]	; (80017f0 <HAL_RCC_OscConfig+0x32c>)
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	220c      	movs	r2, #12
 800161a:	4013      	ands	r3, r2
 800161c:	2b08      	cmp	r3, #8
 800161e:	d11c      	bne.n	800165a <HAL_RCC_OscConfig+0x196>
 8001620:	4b73      	ldr	r3, [pc, #460]	; (80017f0 <HAL_RCC_OscConfig+0x32c>)
 8001622:	685a      	ldr	r2, [r3, #4]
 8001624:	2380      	movs	r3, #128	; 0x80
 8001626:	025b      	lsls	r3, r3, #9
 8001628:	4013      	ands	r3, r2
 800162a:	d116      	bne.n	800165a <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800162c:	4b70      	ldr	r3, [pc, #448]	; (80017f0 <HAL_RCC_OscConfig+0x32c>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	2202      	movs	r2, #2
 8001632:	4013      	ands	r3, r2
 8001634:	d005      	beq.n	8001642 <HAL_RCC_OscConfig+0x17e>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	68db      	ldr	r3, [r3, #12]
 800163a:	2b01      	cmp	r3, #1
 800163c:	d001      	beq.n	8001642 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800163e:	2301      	movs	r3, #1
 8001640:	e24b      	b.n	8001ada <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001642:	4b6b      	ldr	r3, [pc, #428]	; (80017f0 <HAL_RCC_OscConfig+0x32c>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	22f8      	movs	r2, #248	; 0xf8
 8001648:	4393      	bics	r3, r2
 800164a:	0019      	movs	r1, r3
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	691b      	ldr	r3, [r3, #16]
 8001650:	00da      	lsls	r2, r3, #3
 8001652:	4b67      	ldr	r3, [pc, #412]	; (80017f0 <HAL_RCC_OscConfig+0x32c>)
 8001654:	430a      	orrs	r2, r1
 8001656:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001658:	e041      	b.n	80016de <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	68db      	ldr	r3, [r3, #12]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d024      	beq.n	80016ac <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001662:	4b63      	ldr	r3, [pc, #396]	; (80017f0 <HAL_RCC_OscConfig+0x32c>)
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	4b62      	ldr	r3, [pc, #392]	; (80017f0 <HAL_RCC_OscConfig+0x32c>)
 8001668:	2101      	movs	r1, #1
 800166a:	430a      	orrs	r2, r1
 800166c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800166e:	f7ff fbf5 	bl	8000e5c <HAL_GetTick>
 8001672:	0003      	movs	r3, r0
 8001674:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001676:	e008      	b.n	800168a <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001678:	f7ff fbf0 	bl	8000e5c <HAL_GetTick>
 800167c:	0002      	movs	r2, r0
 800167e:	69bb      	ldr	r3, [r7, #24]
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	2b02      	cmp	r3, #2
 8001684:	d901      	bls.n	800168a <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001686:	2303      	movs	r3, #3
 8001688:	e227      	b.n	8001ada <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800168a:	4b59      	ldr	r3, [pc, #356]	; (80017f0 <HAL_RCC_OscConfig+0x32c>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	2202      	movs	r2, #2
 8001690:	4013      	ands	r3, r2
 8001692:	d0f1      	beq.n	8001678 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001694:	4b56      	ldr	r3, [pc, #344]	; (80017f0 <HAL_RCC_OscConfig+0x32c>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	22f8      	movs	r2, #248	; 0xf8
 800169a:	4393      	bics	r3, r2
 800169c:	0019      	movs	r1, r3
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	691b      	ldr	r3, [r3, #16]
 80016a2:	00da      	lsls	r2, r3, #3
 80016a4:	4b52      	ldr	r3, [pc, #328]	; (80017f0 <HAL_RCC_OscConfig+0x32c>)
 80016a6:	430a      	orrs	r2, r1
 80016a8:	601a      	str	r2, [r3, #0]
 80016aa:	e018      	b.n	80016de <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016ac:	4b50      	ldr	r3, [pc, #320]	; (80017f0 <HAL_RCC_OscConfig+0x32c>)
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	4b4f      	ldr	r3, [pc, #316]	; (80017f0 <HAL_RCC_OscConfig+0x32c>)
 80016b2:	2101      	movs	r1, #1
 80016b4:	438a      	bics	r2, r1
 80016b6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016b8:	f7ff fbd0 	bl	8000e5c <HAL_GetTick>
 80016bc:	0003      	movs	r3, r0
 80016be:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016c0:	e008      	b.n	80016d4 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016c2:	f7ff fbcb 	bl	8000e5c <HAL_GetTick>
 80016c6:	0002      	movs	r2, r0
 80016c8:	69bb      	ldr	r3, [r7, #24]
 80016ca:	1ad3      	subs	r3, r2, r3
 80016cc:	2b02      	cmp	r3, #2
 80016ce:	d901      	bls.n	80016d4 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 80016d0:	2303      	movs	r3, #3
 80016d2:	e202      	b.n	8001ada <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016d4:	4b46      	ldr	r3, [pc, #280]	; (80017f0 <HAL_RCC_OscConfig+0x32c>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	2202      	movs	r2, #2
 80016da:	4013      	ands	r3, r2
 80016dc:	d1f1      	bne.n	80016c2 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	2208      	movs	r2, #8
 80016e4:	4013      	ands	r3, r2
 80016e6:	d036      	beq.n	8001756 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	69db      	ldr	r3, [r3, #28]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d019      	beq.n	8001724 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016f0:	4b3f      	ldr	r3, [pc, #252]	; (80017f0 <HAL_RCC_OscConfig+0x32c>)
 80016f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016f4:	4b3e      	ldr	r3, [pc, #248]	; (80017f0 <HAL_RCC_OscConfig+0x32c>)
 80016f6:	2101      	movs	r1, #1
 80016f8:	430a      	orrs	r2, r1
 80016fa:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016fc:	f7ff fbae 	bl	8000e5c <HAL_GetTick>
 8001700:	0003      	movs	r3, r0
 8001702:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001704:	e008      	b.n	8001718 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001706:	f7ff fba9 	bl	8000e5c <HAL_GetTick>
 800170a:	0002      	movs	r2, r0
 800170c:	69bb      	ldr	r3, [r7, #24]
 800170e:	1ad3      	subs	r3, r2, r3
 8001710:	2b02      	cmp	r3, #2
 8001712:	d901      	bls.n	8001718 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001714:	2303      	movs	r3, #3
 8001716:	e1e0      	b.n	8001ada <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001718:	4b35      	ldr	r3, [pc, #212]	; (80017f0 <HAL_RCC_OscConfig+0x32c>)
 800171a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800171c:	2202      	movs	r2, #2
 800171e:	4013      	ands	r3, r2
 8001720:	d0f1      	beq.n	8001706 <HAL_RCC_OscConfig+0x242>
 8001722:	e018      	b.n	8001756 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001724:	4b32      	ldr	r3, [pc, #200]	; (80017f0 <HAL_RCC_OscConfig+0x32c>)
 8001726:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001728:	4b31      	ldr	r3, [pc, #196]	; (80017f0 <HAL_RCC_OscConfig+0x32c>)
 800172a:	2101      	movs	r1, #1
 800172c:	438a      	bics	r2, r1
 800172e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001730:	f7ff fb94 	bl	8000e5c <HAL_GetTick>
 8001734:	0003      	movs	r3, r0
 8001736:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001738:	e008      	b.n	800174c <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800173a:	f7ff fb8f 	bl	8000e5c <HAL_GetTick>
 800173e:	0002      	movs	r2, r0
 8001740:	69bb      	ldr	r3, [r7, #24]
 8001742:	1ad3      	subs	r3, r2, r3
 8001744:	2b02      	cmp	r3, #2
 8001746:	d901      	bls.n	800174c <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001748:	2303      	movs	r3, #3
 800174a:	e1c6      	b.n	8001ada <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800174c:	4b28      	ldr	r3, [pc, #160]	; (80017f0 <HAL_RCC_OscConfig+0x32c>)
 800174e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001750:	2202      	movs	r2, #2
 8001752:	4013      	ands	r3, r2
 8001754:	d1f1      	bne.n	800173a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	2204      	movs	r2, #4
 800175c:	4013      	ands	r3, r2
 800175e:	d100      	bne.n	8001762 <HAL_RCC_OscConfig+0x29e>
 8001760:	e0b4      	b.n	80018cc <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001762:	201f      	movs	r0, #31
 8001764:	183b      	adds	r3, r7, r0
 8001766:	2200      	movs	r2, #0
 8001768:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800176a:	4b21      	ldr	r3, [pc, #132]	; (80017f0 <HAL_RCC_OscConfig+0x32c>)
 800176c:	69da      	ldr	r2, [r3, #28]
 800176e:	2380      	movs	r3, #128	; 0x80
 8001770:	055b      	lsls	r3, r3, #21
 8001772:	4013      	ands	r3, r2
 8001774:	d110      	bne.n	8001798 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001776:	4b1e      	ldr	r3, [pc, #120]	; (80017f0 <HAL_RCC_OscConfig+0x32c>)
 8001778:	69da      	ldr	r2, [r3, #28]
 800177a:	4b1d      	ldr	r3, [pc, #116]	; (80017f0 <HAL_RCC_OscConfig+0x32c>)
 800177c:	2180      	movs	r1, #128	; 0x80
 800177e:	0549      	lsls	r1, r1, #21
 8001780:	430a      	orrs	r2, r1
 8001782:	61da      	str	r2, [r3, #28]
 8001784:	4b1a      	ldr	r3, [pc, #104]	; (80017f0 <HAL_RCC_OscConfig+0x32c>)
 8001786:	69da      	ldr	r2, [r3, #28]
 8001788:	2380      	movs	r3, #128	; 0x80
 800178a:	055b      	lsls	r3, r3, #21
 800178c:	4013      	ands	r3, r2
 800178e:	60fb      	str	r3, [r7, #12]
 8001790:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001792:	183b      	adds	r3, r7, r0
 8001794:	2201      	movs	r2, #1
 8001796:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001798:	4b18      	ldr	r3, [pc, #96]	; (80017fc <HAL_RCC_OscConfig+0x338>)
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	2380      	movs	r3, #128	; 0x80
 800179e:	005b      	lsls	r3, r3, #1
 80017a0:	4013      	ands	r3, r2
 80017a2:	d11a      	bne.n	80017da <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017a4:	4b15      	ldr	r3, [pc, #84]	; (80017fc <HAL_RCC_OscConfig+0x338>)
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	4b14      	ldr	r3, [pc, #80]	; (80017fc <HAL_RCC_OscConfig+0x338>)
 80017aa:	2180      	movs	r1, #128	; 0x80
 80017ac:	0049      	lsls	r1, r1, #1
 80017ae:	430a      	orrs	r2, r1
 80017b0:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017b2:	f7ff fb53 	bl	8000e5c <HAL_GetTick>
 80017b6:	0003      	movs	r3, r0
 80017b8:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017ba:	e008      	b.n	80017ce <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017bc:	f7ff fb4e 	bl	8000e5c <HAL_GetTick>
 80017c0:	0002      	movs	r2, r0
 80017c2:	69bb      	ldr	r3, [r7, #24]
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	2b64      	cmp	r3, #100	; 0x64
 80017c8:	d901      	bls.n	80017ce <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 80017ca:	2303      	movs	r3, #3
 80017cc:	e185      	b.n	8001ada <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017ce:	4b0b      	ldr	r3, [pc, #44]	; (80017fc <HAL_RCC_OscConfig+0x338>)
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	2380      	movs	r3, #128	; 0x80
 80017d4:	005b      	lsls	r3, r3, #1
 80017d6:	4013      	ands	r3, r2
 80017d8:	d0f0      	beq.n	80017bc <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	2b01      	cmp	r3, #1
 80017e0:	d10e      	bne.n	8001800 <HAL_RCC_OscConfig+0x33c>
 80017e2:	4b03      	ldr	r3, [pc, #12]	; (80017f0 <HAL_RCC_OscConfig+0x32c>)
 80017e4:	6a1a      	ldr	r2, [r3, #32]
 80017e6:	4b02      	ldr	r3, [pc, #8]	; (80017f0 <HAL_RCC_OscConfig+0x32c>)
 80017e8:	2101      	movs	r1, #1
 80017ea:	430a      	orrs	r2, r1
 80017ec:	621a      	str	r2, [r3, #32]
 80017ee:	e035      	b.n	800185c <HAL_RCC_OscConfig+0x398>
 80017f0:	40021000 	.word	0x40021000
 80017f4:	fffeffff 	.word	0xfffeffff
 80017f8:	fffbffff 	.word	0xfffbffff
 80017fc:	40007000 	.word	0x40007000
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d10c      	bne.n	8001822 <HAL_RCC_OscConfig+0x35e>
 8001808:	4bb6      	ldr	r3, [pc, #728]	; (8001ae4 <HAL_RCC_OscConfig+0x620>)
 800180a:	6a1a      	ldr	r2, [r3, #32]
 800180c:	4bb5      	ldr	r3, [pc, #724]	; (8001ae4 <HAL_RCC_OscConfig+0x620>)
 800180e:	2101      	movs	r1, #1
 8001810:	438a      	bics	r2, r1
 8001812:	621a      	str	r2, [r3, #32]
 8001814:	4bb3      	ldr	r3, [pc, #716]	; (8001ae4 <HAL_RCC_OscConfig+0x620>)
 8001816:	6a1a      	ldr	r2, [r3, #32]
 8001818:	4bb2      	ldr	r3, [pc, #712]	; (8001ae4 <HAL_RCC_OscConfig+0x620>)
 800181a:	2104      	movs	r1, #4
 800181c:	438a      	bics	r2, r1
 800181e:	621a      	str	r2, [r3, #32]
 8001820:	e01c      	b.n	800185c <HAL_RCC_OscConfig+0x398>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	2b05      	cmp	r3, #5
 8001828:	d10c      	bne.n	8001844 <HAL_RCC_OscConfig+0x380>
 800182a:	4bae      	ldr	r3, [pc, #696]	; (8001ae4 <HAL_RCC_OscConfig+0x620>)
 800182c:	6a1a      	ldr	r2, [r3, #32]
 800182e:	4bad      	ldr	r3, [pc, #692]	; (8001ae4 <HAL_RCC_OscConfig+0x620>)
 8001830:	2104      	movs	r1, #4
 8001832:	430a      	orrs	r2, r1
 8001834:	621a      	str	r2, [r3, #32]
 8001836:	4bab      	ldr	r3, [pc, #684]	; (8001ae4 <HAL_RCC_OscConfig+0x620>)
 8001838:	6a1a      	ldr	r2, [r3, #32]
 800183a:	4baa      	ldr	r3, [pc, #680]	; (8001ae4 <HAL_RCC_OscConfig+0x620>)
 800183c:	2101      	movs	r1, #1
 800183e:	430a      	orrs	r2, r1
 8001840:	621a      	str	r2, [r3, #32]
 8001842:	e00b      	b.n	800185c <HAL_RCC_OscConfig+0x398>
 8001844:	4ba7      	ldr	r3, [pc, #668]	; (8001ae4 <HAL_RCC_OscConfig+0x620>)
 8001846:	6a1a      	ldr	r2, [r3, #32]
 8001848:	4ba6      	ldr	r3, [pc, #664]	; (8001ae4 <HAL_RCC_OscConfig+0x620>)
 800184a:	2101      	movs	r1, #1
 800184c:	438a      	bics	r2, r1
 800184e:	621a      	str	r2, [r3, #32]
 8001850:	4ba4      	ldr	r3, [pc, #656]	; (8001ae4 <HAL_RCC_OscConfig+0x620>)
 8001852:	6a1a      	ldr	r2, [r3, #32]
 8001854:	4ba3      	ldr	r3, [pc, #652]	; (8001ae4 <HAL_RCC_OscConfig+0x620>)
 8001856:	2104      	movs	r1, #4
 8001858:	438a      	bics	r2, r1
 800185a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d014      	beq.n	800188e <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001864:	f7ff fafa 	bl	8000e5c <HAL_GetTick>
 8001868:	0003      	movs	r3, r0
 800186a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800186c:	e009      	b.n	8001882 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800186e:	f7ff faf5 	bl	8000e5c <HAL_GetTick>
 8001872:	0002      	movs	r2, r0
 8001874:	69bb      	ldr	r3, [r7, #24]
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	4a9b      	ldr	r2, [pc, #620]	; (8001ae8 <HAL_RCC_OscConfig+0x624>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d901      	bls.n	8001882 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 800187e:	2303      	movs	r3, #3
 8001880:	e12b      	b.n	8001ada <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001882:	4b98      	ldr	r3, [pc, #608]	; (8001ae4 <HAL_RCC_OscConfig+0x620>)
 8001884:	6a1b      	ldr	r3, [r3, #32]
 8001886:	2202      	movs	r2, #2
 8001888:	4013      	ands	r3, r2
 800188a:	d0f0      	beq.n	800186e <HAL_RCC_OscConfig+0x3aa>
 800188c:	e013      	b.n	80018b6 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800188e:	f7ff fae5 	bl	8000e5c <HAL_GetTick>
 8001892:	0003      	movs	r3, r0
 8001894:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001896:	e009      	b.n	80018ac <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001898:	f7ff fae0 	bl	8000e5c <HAL_GetTick>
 800189c:	0002      	movs	r2, r0
 800189e:	69bb      	ldr	r3, [r7, #24]
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	4a91      	ldr	r2, [pc, #580]	; (8001ae8 <HAL_RCC_OscConfig+0x624>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d901      	bls.n	80018ac <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 80018a8:	2303      	movs	r3, #3
 80018aa:	e116      	b.n	8001ada <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018ac:	4b8d      	ldr	r3, [pc, #564]	; (8001ae4 <HAL_RCC_OscConfig+0x620>)
 80018ae:	6a1b      	ldr	r3, [r3, #32]
 80018b0:	2202      	movs	r2, #2
 80018b2:	4013      	ands	r3, r2
 80018b4:	d1f0      	bne.n	8001898 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80018b6:	231f      	movs	r3, #31
 80018b8:	18fb      	adds	r3, r7, r3
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	2b01      	cmp	r3, #1
 80018be:	d105      	bne.n	80018cc <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018c0:	4b88      	ldr	r3, [pc, #544]	; (8001ae4 <HAL_RCC_OscConfig+0x620>)
 80018c2:	69da      	ldr	r2, [r3, #28]
 80018c4:	4b87      	ldr	r3, [pc, #540]	; (8001ae4 <HAL_RCC_OscConfig+0x620>)
 80018c6:	4989      	ldr	r1, [pc, #548]	; (8001aec <HAL_RCC_OscConfig+0x628>)
 80018c8:	400a      	ands	r2, r1
 80018ca:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	2210      	movs	r2, #16
 80018d2:	4013      	ands	r3, r2
 80018d4:	d063      	beq.n	800199e <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	695b      	ldr	r3, [r3, #20]
 80018da:	2b01      	cmp	r3, #1
 80018dc:	d12a      	bne.n	8001934 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80018de:	4b81      	ldr	r3, [pc, #516]	; (8001ae4 <HAL_RCC_OscConfig+0x620>)
 80018e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018e2:	4b80      	ldr	r3, [pc, #512]	; (8001ae4 <HAL_RCC_OscConfig+0x620>)
 80018e4:	2104      	movs	r1, #4
 80018e6:	430a      	orrs	r2, r1
 80018e8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80018ea:	4b7e      	ldr	r3, [pc, #504]	; (8001ae4 <HAL_RCC_OscConfig+0x620>)
 80018ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018ee:	4b7d      	ldr	r3, [pc, #500]	; (8001ae4 <HAL_RCC_OscConfig+0x620>)
 80018f0:	2101      	movs	r1, #1
 80018f2:	430a      	orrs	r2, r1
 80018f4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018f6:	f7ff fab1 	bl	8000e5c <HAL_GetTick>
 80018fa:	0003      	movs	r3, r0
 80018fc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80018fe:	e008      	b.n	8001912 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001900:	f7ff faac 	bl	8000e5c <HAL_GetTick>
 8001904:	0002      	movs	r2, r0
 8001906:	69bb      	ldr	r3, [r7, #24]
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	2b02      	cmp	r3, #2
 800190c:	d901      	bls.n	8001912 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 800190e:	2303      	movs	r3, #3
 8001910:	e0e3      	b.n	8001ada <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001912:	4b74      	ldr	r3, [pc, #464]	; (8001ae4 <HAL_RCC_OscConfig+0x620>)
 8001914:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001916:	2202      	movs	r2, #2
 8001918:	4013      	ands	r3, r2
 800191a:	d0f1      	beq.n	8001900 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800191c:	4b71      	ldr	r3, [pc, #452]	; (8001ae4 <HAL_RCC_OscConfig+0x620>)
 800191e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001920:	22f8      	movs	r2, #248	; 0xf8
 8001922:	4393      	bics	r3, r2
 8001924:	0019      	movs	r1, r3
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	699b      	ldr	r3, [r3, #24]
 800192a:	00da      	lsls	r2, r3, #3
 800192c:	4b6d      	ldr	r3, [pc, #436]	; (8001ae4 <HAL_RCC_OscConfig+0x620>)
 800192e:	430a      	orrs	r2, r1
 8001930:	635a      	str	r2, [r3, #52]	; 0x34
 8001932:	e034      	b.n	800199e <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	695b      	ldr	r3, [r3, #20]
 8001938:	3305      	adds	r3, #5
 800193a:	d111      	bne.n	8001960 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800193c:	4b69      	ldr	r3, [pc, #420]	; (8001ae4 <HAL_RCC_OscConfig+0x620>)
 800193e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001940:	4b68      	ldr	r3, [pc, #416]	; (8001ae4 <HAL_RCC_OscConfig+0x620>)
 8001942:	2104      	movs	r1, #4
 8001944:	438a      	bics	r2, r1
 8001946:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001948:	4b66      	ldr	r3, [pc, #408]	; (8001ae4 <HAL_RCC_OscConfig+0x620>)
 800194a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800194c:	22f8      	movs	r2, #248	; 0xf8
 800194e:	4393      	bics	r3, r2
 8001950:	0019      	movs	r1, r3
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	699b      	ldr	r3, [r3, #24]
 8001956:	00da      	lsls	r2, r3, #3
 8001958:	4b62      	ldr	r3, [pc, #392]	; (8001ae4 <HAL_RCC_OscConfig+0x620>)
 800195a:	430a      	orrs	r2, r1
 800195c:	635a      	str	r2, [r3, #52]	; 0x34
 800195e:	e01e      	b.n	800199e <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001960:	4b60      	ldr	r3, [pc, #384]	; (8001ae4 <HAL_RCC_OscConfig+0x620>)
 8001962:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001964:	4b5f      	ldr	r3, [pc, #380]	; (8001ae4 <HAL_RCC_OscConfig+0x620>)
 8001966:	2104      	movs	r1, #4
 8001968:	430a      	orrs	r2, r1
 800196a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800196c:	4b5d      	ldr	r3, [pc, #372]	; (8001ae4 <HAL_RCC_OscConfig+0x620>)
 800196e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001970:	4b5c      	ldr	r3, [pc, #368]	; (8001ae4 <HAL_RCC_OscConfig+0x620>)
 8001972:	2101      	movs	r1, #1
 8001974:	438a      	bics	r2, r1
 8001976:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001978:	f7ff fa70 	bl	8000e5c <HAL_GetTick>
 800197c:	0003      	movs	r3, r0
 800197e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001980:	e008      	b.n	8001994 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001982:	f7ff fa6b 	bl	8000e5c <HAL_GetTick>
 8001986:	0002      	movs	r2, r0
 8001988:	69bb      	ldr	r3, [r7, #24]
 800198a:	1ad3      	subs	r3, r2, r3
 800198c:	2b02      	cmp	r3, #2
 800198e:	d901      	bls.n	8001994 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001990:	2303      	movs	r3, #3
 8001992:	e0a2      	b.n	8001ada <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001994:	4b53      	ldr	r3, [pc, #332]	; (8001ae4 <HAL_RCC_OscConfig+0x620>)
 8001996:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001998:	2202      	movs	r2, #2
 800199a:	4013      	ands	r3, r2
 800199c:	d1f1      	bne.n	8001982 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6a1b      	ldr	r3, [r3, #32]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d100      	bne.n	80019a8 <HAL_RCC_OscConfig+0x4e4>
 80019a6:	e097      	b.n	8001ad8 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019a8:	4b4e      	ldr	r3, [pc, #312]	; (8001ae4 <HAL_RCC_OscConfig+0x620>)
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	220c      	movs	r2, #12
 80019ae:	4013      	ands	r3, r2
 80019b0:	2b08      	cmp	r3, #8
 80019b2:	d100      	bne.n	80019b6 <HAL_RCC_OscConfig+0x4f2>
 80019b4:	e06b      	b.n	8001a8e <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6a1b      	ldr	r3, [r3, #32]
 80019ba:	2b02      	cmp	r3, #2
 80019bc:	d14c      	bne.n	8001a58 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019be:	4b49      	ldr	r3, [pc, #292]	; (8001ae4 <HAL_RCC_OscConfig+0x620>)
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	4b48      	ldr	r3, [pc, #288]	; (8001ae4 <HAL_RCC_OscConfig+0x620>)
 80019c4:	494a      	ldr	r1, [pc, #296]	; (8001af0 <HAL_RCC_OscConfig+0x62c>)
 80019c6:	400a      	ands	r2, r1
 80019c8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ca:	f7ff fa47 	bl	8000e5c <HAL_GetTick>
 80019ce:	0003      	movs	r3, r0
 80019d0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019d2:	e008      	b.n	80019e6 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019d4:	f7ff fa42 	bl	8000e5c <HAL_GetTick>
 80019d8:	0002      	movs	r2, r0
 80019da:	69bb      	ldr	r3, [r7, #24]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d901      	bls.n	80019e6 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 80019e2:	2303      	movs	r3, #3
 80019e4:	e079      	b.n	8001ada <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019e6:	4b3f      	ldr	r3, [pc, #252]	; (8001ae4 <HAL_RCC_OscConfig+0x620>)
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	2380      	movs	r3, #128	; 0x80
 80019ec:	049b      	lsls	r3, r3, #18
 80019ee:	4013      	ands	r3, r2
 80019f0:	d1f0      	bne.n	80019d4 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019f2:	4b3c      	ldr	r3, [pc, #240]	; (8001ae4 <HAL_RCC_OscConfig+0x620>)
 80019f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019f6:	220f      	movs	r2, #15
 80019f8:	4393      	bics	r3, r2
 80019fa:	0019      	movs	r1, r3
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a00:	4b38      	ldr	r3, [pc, #224]	; (8001ae4 <HAL_RCC_OscConfig+0x620>)
 8001a02:	430a      	orrs	r2, r1
 8001a04:	62da      	str	r2, [r3, #44]	; 0x2c
 8001a06:	4b37      	ldr	r3, [pc, #220]	; (8001ae4 <HAL_RCC_OscConfig+0x620>)
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	4a3a      	ldr	r2, [pc, #232]	; (8001af4 <HAL_RCC_OscConfig+0x630>)
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	0019      	movs	r1, r3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a18:	431a      	orrs	r2, r3
 8001a1a:	4b32      	ldr	r3, [pc, #200]	; (8001ae4 <HAL_RCC_OscConfig+0x620>)
 8001a1c:	430a      	orrs	r2, r1
 8001a1e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a20:	4b30      	ldr	r3, [pc, #192]	; (8001ae4 <HAL_RCC_OscConfig+0x620>)
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	4b2f      	ldr	r3, [pc, #188]	; (8001ae4 <HAL_RCC_OscConfig+0x620>)
 8001a26:	2180      	movs	r1, #128	; 0x80
 8001a28:	0449      	lsls	r1, r1, #17
 8001a2a:	430a      	orrs	r2, r1
 8001a2c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a2e:	f7ff fa15 	bl	8000e5c <HAL_GetTick>
 8001a32:	0003      	movs	r3, r0
 8001a34:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a36:	e008      	b.n	8001a4a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a38:	f7ff fa10 	bl	8000e5c <HAL_GetTick>
 8001a3c:	0002      	movs	r2, r0
 8001a3e:	69bb      	ldr	r3, [r7, #24]
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	2b02      	cmp	r3, #2
 8001a44:	d901      	bls.n	8001a4a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001a46:	2303      	movs	r3, #3
 8001a48:	e047      	b.n	8001ada <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a4a:	4b26      	ldr	r3, [pc, #152]	; (8001ae4 <HAL_RCC_OscConfig+0x620>)
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	2380      	movs	r3, #128	; 0x80
 8001a50:	049b      	lsls	r3, r3, #18
 8001a52:	4013      	ands	r3, r2
 8001a54:	d0f0      	beq.n	8001a38 <HAL_RCC_OscConfig+0x574>
 8001a56:	e03f      	b.n	8001ad8 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a58:	4b22      	ldr	r3, [pc, #136]	; (8001ae4 <HAL_RCC_OscConfig+0x620>)
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	4b21      	ldr	r3, [pc, #132]	; (8001ae4 <HAL_RCC_OscConfig+0x620>)
 8001a5e:	4924      	ldr	r1, [pc, #144]	; (8001af0 <HAL_RCC_OscConfig+0x62c>)
 8001a60:	400a      	ands	r2, r1
 8001a62:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a64:	f7ff f9fa 	bl	8000e5c <HAL_GetTick>
 8001a68:	0003      	movs	r3, r0
 8001a6a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a6c:	e008      	b.n	8001a80 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a6e:	f7ff f9f5 	bl	8000e5c <HAL_GetTick>
 8001a72:	0002      	movs	r2, r0
 8001a74:	69bb      	ldr	r3, [r7, #24]
 8001a76:	1ad3      	subs	r3, r2, r3
 8001a78:	2b02      	cmp	r3, #2
 8001a7a:	d901      	bls.n	8001a80 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	e02c      	b.n	8001ada <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a80:	4b18      	ldr	r3, [pc, #96]	; (8001ae4 <HAL_RCC_OscConfig+0x620>)
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	2380      	movs	r3, #128	; 0x80
 8001a86:	049b      	lsls	r3, r3, #18
 8001a88:	4013      	ands	r3, r2
 8001a8a:	d1f0      	bne.n	8001a6e <HAL_RCC_OscConfig+0x5aa>
 8001a8c:	e024      	b.n	8001ad8 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6a1b      	ldr	r3, [r3, #32]
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	d101      	bne.n	8001a9a <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	e01f      	b.n	8001ada <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001a9a:	4b12      	ldr	r3, [pc, #72]	; (8001ae4 <HAL_RCC_OscConfig+0x620>)
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001aa0:	4b10      	ldr	r3, [pc, #64]	; (8001ae4 <HAL_RCC_OscConfig+0x620>)
 8001aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aa4:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aa6:	697a      	ldr	r2, [r7, #20]
 8001aa8:	2380      	movs	r3, #128	; 0x80
 8001aaa:	025b      	lsls	r3, r3, #9
 8001aac:	401a      	ands	r2, r3
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	d10e      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	220f      	movs	r2, #15
 8001aba:	401a      	ands	r2, r3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d107      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001ac4:	697a      	ldr	r2, [r7, #20]
 8001ac6:	23f0      	movs	r3, #240	; 0xf0
 8001ac8:	039b      	lsls	r3, r3, #14
 8001aca:	401a      	ands	r2, r3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d001      	beq.n	8001ad8 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e000      	b.n	8001ada <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001ad8:	2300      	movs	r3, #0
}
 8001ada:	0018      	movs	r0, r3
 8001adc:	46bd      	mov	sp, r7
 8001ade:	b008      	add	sp, #32
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	46c0      	nop			; (mov r8, r8)
 8001ae4:	40021000 	.word	0x40021000
 8001ae8:	00001388 	.word	0x00001388
 8001aec:	efffffff 	.word	0xefffffff
 8001af0:	feffffff 	.word	0xfeffffff
 8001af4:	ffc2ffff 	.word	0xffc2ffff

08001af8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b084      	sub	sp, #16
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
 8001b00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d101      	bne.n	8001b0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	e0b3      	b.n	8001c74 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b0c:	4b5b      	ldr	r3, [pc, #364]	; (8001c7c <HAL_RCC_ClockConfig+0x184>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	2201      	movs	r2, #1
 8001b12:	4013      	ands	r3, r2
 8001b14:	683a      	ldr	r2, [r7, #0]
 8001b16:	429a      	cmp	r2, r3
 8001b18:	d911      	bls.n	8001b3e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b1a:	4b58      	ldr	r3, [pc, #352]	; (8001c7c <HAL_RCC_ClockConfig+0x184>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	2201      	movs	r2, #1
 8001b20:	4393      	bics	r3, r2
 8001b22:	0019      	movs	r1, r3
 8001b24:	4b55      	ldr	r3, [pc, #340]	; (8001c7c <HAL_RCC_ClockConfig+0x184>)
 8001b26:	683a      	ldr	r2, [r7, #0]
 8001b28:	430a      	orrs	r2, r1
 8001b2a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b2c:	4b53      	ldr	r3, [pc, #332]	; (8001c7c <HAL_RCC_ClockConfig+0x184>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	2201      	movs	r2, #1
 8001b32:	4013      	ands	r3, r2
 8001b34:	683a      	ldr	r2, [r7, #0]
 8001b36:	429a      	cmp	r2, r3
 8001b38:	d001      	beq.n	8001b3e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e09a      	b.n	8001c74 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	2202      	movs	r2, #2
 8001b44:	4013      	ands	r3, r2
 8001b46:	d015      	beq.n	8001b74 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	2204      	movs	r2, #4
 8001b4e:	4013      	ands	r3, r2
 8001b50:	d006      	beq.n	8001b60 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001b52:	4b4b      	ldr	r3, [pc, #300]	; (8001c80 <HAL_RCC_ClockConfig+0x188>)
 8001b54:	685a      	ldr	r2, [r3, #4]
 8001b56:	4b4a      	ldr	r3, [pc, #296]	; (8001c80 <HAL_RCC_ClockConfig+0x188>)
 8001b58:	21e0      	movs	r1, #224	; 0xe0
 8001b5a:	00c9      	lsls	r1, r1, #3
 8001b5c:	430a      	orrs	r2, r1
 8001b5e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b60:	4b47      	ldr	r3, [pc, #284]	; (8001c80 <HAL_RCC_ClockConfig+0x188>)
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	22f0      	movs	r2, #240	; 0xf0
 8001b66:	4393      	bics	r3, r2
 8001b68:	0019      	movs	r1, r3
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	689a      	ldr	r2, [r3, #8]
 8001b6e:	4b44      	ldr	r3, [pc, #272]	; (8001c80 <HAL_RCC_ClockConfig+0x188>)
 8001b70:	430a      	orrs	r2, r1
 8001b72:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	2201      	movs	r2, #1
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	d040      	beq.n	8001c00 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d107      	bne.n	8001b96 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b86:	4b3e      	ldr	r3, [pc, #248]	; (8001c80 <HAL_RCC_ClockConfig+0x188>)
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	2380      	movs	r3, #128	; 0x80
 8001b8c:	029b      	lsls	r3, r3, #10
 8001b8e:	4013      	ands	r3, r2
 8001b90:	d114      	bne.n	8001bbc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e06e      	b.n	8001c74 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	2b02      	cmp	r3, #2
 8001b9c:	d107      	bne.n	8001bae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b9e:	4b38      	ldr	r3, [pc, #224]	; (8001c80 <HAL_RCC_ClockConfig+0x188>)
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	2380      	movs	r3, #128	; 0x80
 8001ba4:	049b      	lsls	r3, r3, #18
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	d108      	bne.n	8001bbc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e062      	b.n	8001c74 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bae:	4b34      	ldr	r3, [pc, #208]	; (8001c80 <HAL_RCC_ClockConfig+0x188>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	2202      	movs	r2, #2
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	d101      	bne.n	8001bbc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e05b      	b.n	8001c74 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bbc:	4b30      	ldr	r3, [pc, #192]	; (8001c80 <HAL_RCC_ClockConfig+0x188>)
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	2203      	movs	r2, #3
 8001bc2:	4393      	bics	r3, r2
 8001bc4:	0019      	movs	r1, r3
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	685a      	ldr	r2, [r3, #4]
 8001bca:	4b2d      	ldr	r3, [pc, #180]	; (8001c80 <HAL_RCC_ClockConfig+0x188>)
 8001bcc:	430a      	orrs	r2, r1
 8001bce:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bd0:	f7ff f944 	bl	8000e5c <HAL_GetTick>
 8001bd4:	0003      	movs	r3, r0
 8001bd6:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bd8:	e009      	b.n	8001bee <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bda:	f7ff f93f 	bl	8000e5c <HAL_GetTick>
 8001bde:	0002      	movs	r2, r0
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	1ad3      	subs	r3, r2, r3
 8001be4:	4a27      	ldr	r2, [pc, #156]	; (8001c84 <HAL_RCC_ClockConfig+0x18c>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d901      	bls.n	8001bee <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001bea:	2303      	movs	r3, #3
 8001bec:	e042      	b.n	8001c74 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bee:	4b24      	ldr	r3, [pc, #144]	; (8001c80 <HAL_RCC_ClockConfig+0x188>)
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	220c      	movs	r2, #12
 8001bf4:	401a      	ands	r2, r3
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d1ec      	bne.n	8001bda <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c00:	4b1e      	ldr	r3, [pc, #120]	; (8001c7c <HAL_RCC_ClockConfig+0x184>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	2201      	movs	r2, #1
 8001c06:	4013      	ands	r3, r2
 8001c08:	683a      	ldr	r2, [r7, #0]
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	d211      	bcs.n	8001c32 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c0e:	4b1b      	ldr	r3, [pc, #108]	; (8001c7c <HAL_RCC_ClockConfig+0x184>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	2201      	movs	r2, #1
 8001c14:	4393      	bics	r3, r2
 8001c16:	0019      	movs	r1, r3
 8001c18:	4b18      	ldr	r3, [pc, #96]	; (8001c7c <HAL_RCC_ClockConfig+0x184>)
 8001c1a:	683a      	ldr	r2, [r7, #0]
 8001c1c:	430a      	orrs	r2, r1
 8001c1e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c20:	4b16      	ldr	r3, [pc, #88]	; (8001c7c <HAL_RCC_ClockConfig+0x184>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	2201      	movs	r2, #1
 8001c26:	4013      	ands	r3, r2
 8001c28:	683a      	ldr	r2, [r7, #0]
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	d001      	beq.n	8001c32 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e020      	b.n	8001c74 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	2204      	movs	r2, #4
 8001c38:	4013      	ands	r3, r2
 8001c3a:	d009      	beq.n	8001c50 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001c3c:	4b10      	ldr	r3, [pc, #64]	; (8001c80 <HAL_RCC_ClockConfig+0x188>)
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	4a11      	ldr	r2, [pc, #68]	; (8001c88 <HAL_RCC_ClockConfig+0x190>)
 8001c42:	4013      	ands	r3, r2
 8001c44:	0019      	movs	r1, r3
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	68da      	ldr	r2, [r3, #12]
 8001c4a:	4b0d      	ldr	r3, [pc, #52]	; (8001c80 <HAL_RCC_ClockConfig+0x188>)
 8001c4c:	430a      	orrs	r2, r1
 8001c4e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001c50:	f000 f820 	bl	8001c94 <HAL_RCC_GetSysClockFreq>
 8001c54:	0001      	movs	r1, r0
 8001c56:	4b0a      	ldr	r3, [pc, #40]	; (8001c80 <HAL_RCC_ClockConfig+0x188>)
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	091b      	lsrs	r3, r3, #4
 8001c5c:	220f      	movs	r2, #15
 8001c5e:	4013      	ands	r3, r2
 8001c60:	4a0a      	ldr	r2, [pc, #40]	; (8001c8c <HAL_RCC_ClockConfig+0x194>)
 8001c62:	5cd3      	ldrb	r3, [r2, r3]
 8001c64:	000a      	movs	r2, r1
 8001c66:	40da      	lsrs	r2, r3
 8001c68:	4b09      	ldr	r3, [pc, #36]	; (8001c90 <HAL_RCC_ClockConfig+0x198>)
 8001c6a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001c6c:	2000      	movs	r0, #0
 8001c6e:	f7ff f8af 	bl	8000dd0 <HAL_InitTick>
  
  return HAL_OK;
 8001c72:	2300      	movs	r3, #0
}
 8001c74:	0018      	movs	r0, r3
 8001c76:	46bd      	mov	sp, r7
 8001c78:	b004      	add	sp, #16
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	40022000 	.word	0x40022000
 8001c80:	40021000 	.word	0x40021000
 8001c84:	00001388 	.word	0x00001388
 8001c88:	fffff8ff 	.word	0xfffff8ff
 8001c8c:	080038c0 	.word	0x080038c0
 8001c90:	20000008 	.word	0x20000008

08001c94 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b086      	sub	sp, #24
 8001c98:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	60fb      	str	r3, [r7, #12]
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	60bb      	str	r3, [r7, #8]
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	617b      	str	r3, [r7, #20]
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001caa:	2300      	movs	r3, #0
 8001cac:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001cae:	4b20      	ldr	r3, [pc, #128]	; (8001d30 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	220c      	movs	r2, #12
 8001cb8:	4013      	ands	r3, r2
 8001cba:	2b04      	cmp	r3, #4
 8001cbc:	d002      	beq.n	8001cc4 <HAL_RCC_GetSysClockFreq+0x30>
 8001cbe:	2b08      	cmp	r3, #8
 8001cc0:	d003      	beq.n	8001cca <HAL_RCC_GetSysClockFreq+0x36>
 8001cc2:	e02c      	b.n	8001d1e <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001cc4:	4b1b      	ldr	r3, [pc, #108]	; (8001d34 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001cc6:	613b      	str	r3, [r7, #16]
      break;
 8001cc8:	e02c      	b.n	8001d24 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	0c9b      	lsrs	r3, r3, #18
 8001cce:	220f      	movs	r2, #15
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	4a19      	ldr	r2, [pc, #100]	; (8001d38 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001cd4:	5cd3      	ldrb	r3, [r2, r3]
 8001cd6:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001cd8:	4b15      	ldr	r3, [pc, #84]	; (8001d30 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cdc:	220f      	movs	r2, #15
 8001cde:	4013      	ands	r3, r2
 8001ce0:	4a16      	ldr	r2, [pc, #88]	; (8001d3c <HAL_RCC_GetSysClockFreq+0xa8>)
 8001ce2:	5cd3      	ldrb	r3, [r2, r3]
 8001ce4:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001ce6:	68fa      	ldr	r2, [r7, #12]
 8001ce8:	2380      	movs	r3, #128	; 0x80
 8001cea:	025b      	lsls	r3, r3, #9
 8001cec:	4013      	ands	r3, r2
 8001cee:	d009      	beq.n	8001d04 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001cf0:	68b9      	ldr	r1, [r7, #8]
 8001cf2:	4810      	ldr	r0, [pc, #64]	; (8001d34 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001cf4:	f7fe fa08 	bl	8000108 <__udivsi3>
 8001cf8:	0003      	movs	r3, r0
 8001cfa:	001a      	movs	r2, r3
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	4353      	muls	r3, r2
 8001d00:	617b      	str	r3, [r7, #20]
 8001d02:	e009      	b.n	8001d18 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001d04:	6879      	ldr	r1, [r7, #4]
 8001d06:	000a      	movs	r2, r1
 8001d08:	0152      	lsls	r2, r2, #5
 8001d0a:	1a52      	subs	r2, r2, r1
 8001d0c:	0193      	lsls	r3, r2, #6
 8001d0e:	1a9b      	subs	r3, r3, r2
 8001d10:	00db      	lsls	r3, r3, #3
 8001d12:	185b      	adds	r3, r3, r1
 8001d14:	021b      	lsls	r3, r3, #8
 8001d16:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	613b      	str	r3, [r7, #16]
      break;
 8001d1c:	e002      	b.n	8001d24 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001d1e:	4b05      	ldr	r3, [pc, #20]	; (8001d34 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001d20:	613b      	str	r3, [r7, #16]
      break;
 8001d22:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001d24:	693b      	ldr	r3, [r7, #16]
}
 8001d26:	0018      	movs	r0, r3
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	b006      	add	sp, #24
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	46c0      	nop			; (mov r8, r8)
 8001d30:	40021000 	.word	0x40021000
 8001d34:	007a1200 	.word	0x007a1200
 8001d38:	080038d8 	.word	0x080038d8
 8001d3c:	080038e8 	.word	0x080038e8

08001d40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d44:	4b02      	ldr	r3, [pc, #8]	; (8001d50 <HAL_RCC_GetHCLKFreq+0x10>)
 8001d46:	681b      	ldr	r3, [r3, #0]
}
 8001d48:	0018      	movs	r0, r3
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	46c0      	nop			; (mov r8, r8)
 8001d50:	20000008 	.word	0x20000008

08001d54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001d58:	f7ff fff2 	bl	8001d40 <HAL_RCC_GetHCLKFreq>
 8001d5c:	0001      	movs	r1, r0
 8001d5e:	4b06      	ldr	r3, [pc, #24]	; (8001d78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	0a1b      	lsrs	r3, r3, #8
 8001d64:	2207      	movs	r2, #7
 8001d66:	4013      	ands	r3, r2
 8001d68:	4a04      	ldr	r2, [pc, #16]	; (8001d7c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001d6a:	5cd3      	ldrb	r3, [r2, r3]
 8001d6c:	40d9      	lsrs	r1, r3
 8001d6e:	000b      	movs	r3, r1
}    
 8001d70:	0018      	movs	r0, r3
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	46c0      	nop			; (mov r8, r8)
 8001d78:	40021000 	.word	0x40021000
 8001d7c:	080038d0 	.word	0x080038d0

08001d80 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b086      	sub	sp, #24
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	2380      	movs	r3, #128	; 0x80
 8001d96:	025b      	lsls	r3, r3, #9
 8001d98:	4013      	ands	r3, r2
 8001d9a:	d100      	bne.n	8001d9e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001d9c:	e08e      	b.n	8001ebc <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001d9e:	2017      	movs	r0, #23
 8001da0:	183b      	adds	r3, r7, r0
 8001da2:	2200      	movs	r2, #0
 8001da4:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001da6:	4b57      	ldr	r3, [pc, #348]	; (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001da8:	69da      	ldr	r2, [r3, #28]
 8001daa:	2380      	movs	r3, #128	; 0x80
 8001dac:	055b      	lsls	r3, r3, #21
 8001dae:	4013      	ands	r3, r2
 8001db0:	d110      	bne.n	8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001db2:	4b54      	ldr	r3, [pc, #336]	; (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001db4:	69da      	ldr	r2, [r3, #28]
 8001db6:	4b53      	ldr	r3, [pc, #332]	; (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001db8:	2180      	movs	r1, #128	; 0x80
 8001dba:	0549      	lsls	r1, r1, #21
 8001dbc:	430a      	orrs	r2, r1
 8001dbe:	61da      	str	r2, [r3, #28]
 8001dc0:	4b50      	ldr	r3, [pc, #320]	; (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001dc2:	69da      	ldr	r2, [r3, #28]
 8001dc4:	2380      	movs	r3, #128	; 0x80
 8001dc6:	055b      	lsls	r3, r3, #21
 8001dc8:	4013      	ands	r3, r2
 8001dca:	60bb      	str	r3, [r7, #8]
 8001dcc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dce:	183b      	adds	r3, r7, r0
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dd4:	4b4c      	ldr	r3, [pc, #304]	; (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	2380      	movs	r3, #128	; 0x80
 8001dda:	005b      	lsls	r3, r3, #1
 8001ddc:	4013      	ands	r3, r2
 8001dde:	d11a      	bne.n	8001e16 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001de0:	4b49      	ldr	r3, [pc, #292]	; (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	4b48      	ldr	r3, [pc, #288]	; (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001de6:	2180      	movs	r1, #128	; 0x80
 8001de8:	0049      	lsls	r1, r1, #1
 8001dea:	430a      	orrs	r2, r1
 8001dec:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dee:	f7ff f835 	bl	8000e5c <HAL_GetTick>
 8001df2:	0003      	movs	r3, r0
 8001df4:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001df6:	e008      	b.n	8001e0a <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001df8:	f7ff f830 	bl	8000e5c <HAL_GetTick>
 8001dfc:	0002      	movs	r2, r0
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	2b64      	cmp	r3, #100	; 0x64
 8001e04:	d901      	bls.n	8001e0a <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	e077      	b.n	8001efa <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e0a:	4b3f      	ldr	r3, [pc, #252]	; (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	2380      	movs	r3, #128	; 0x80
 8001e10:	005b      	lsls	r3, r3, #1
 8001e12:	4013      	ands	r3, r2
 8001e14:	d0f0      	beq.n	8001df8 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001e16:	4b3b      	ldr	r3, [pc, #236]	; (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e18:	6a1a      	ldr	r2, [r3, #32]
 8001e1a:	23c0      	movs	r3, #192	; 0xc0
 8001e1c:	009b      	lsls	r3, r3, #2
 8001e1e:	4013      	ands	r3, r2
 8001e20:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d034      	beq.n	8001e92 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	685a      	ldr	r2, [r3, #4]
 8001e2c:	23c0      	movs	r3, #192	; 0xc0
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	4013      	ands	r3, r2
 8001e32:	68fa      	ldr	r2, [r7, #12]
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d02c      	beq.n	8001e92 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001e38:	4b32      	ldr	r3, [pc, #200]	; (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e3a:	6a1b      	ldr	r3, [r3, #32]
 8001e3c:	4a33      	ldr	r2, [pc, #204]	; (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001e3e:	4013      	ands	r3, r2
 8001e40:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001e42:	4b30      	ldr	r3, [pc, #192]	; (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e44:	6a1a      	ldr	r2, [r3, #32]
 8001e46:	4b2f      	ldr	r3, [pc, #188]	; (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e48:	2180      	movs	r1, #128	; 0x80
 8001e4a:	0249      	lsls	r1, r1, #9
 8001e4c:	430a      	orrs	r2, r1
 8001e4e:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001e50:	4b2c      	ldr	r3, [pc, #176]	; (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e52:	6a1a      	ldr	r2, [r3, #32]
 8001e54:	4b2b      	ldr	r3, [pc, #172]	; (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e56:	492e      	ldr	r1, [pc, #184]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8001e58:	400a      	ands	r2, r1
 8001e5a:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001e5c:	4b29      	ldr	r3, [pc, #164]	; (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e5e:	68fa      	ldr	r2, [r7, #12]
 8001e60:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	2201      	movs	r2, #1
 8001e66:	4013      	ands	r3, r2
 8001e68:	d013      	beq.n	8001e92 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e6a:	f7fe fff7 	bl	8000e5c <HAL_GetTick>
 8001e6e:	0003      	movs	r3, r0
 8001e70:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e72:	e009      	b.n	8001e88 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e74:	f7fe fff2 	bl	8000e5c <HAL_GetTick>
 8001e78:	0002      	movs	r2, r0
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	4a25      	ldr	r2, [pc, #148]	; (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d901      	bls.n	8001e88 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001e84:	2303      	movs	r3, #3
 8001e86:	e038      	b.n	8001efa <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e88:	4b1e      	ldr	r3, [pc, #120]	; (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e8a:	6a1b      	ldr	r3, [r3, #32]
 8001e8c:	2202      	movs	r2, #2
 8001e8e:	4013      	ands	r3, r2
 8001e90:	d0f0      	beq.n	8001e74 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e92:	4b1c      	ldr	r3, [pc, #112]	; (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e94:	6a1b      	ldr	r3, [r3, #32]
 8001e96:	4a1d      	ldr	r2, [pc, #116]	; (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001e98:	4013      	ands	r3, r2
 8001e9a:	0019      	movs	r1, r3
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	685a      	ldr	r2, [r3, #4]
 8001ea0:	4b18      	ldr	r3, [pc, #96]	; (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001ea2:	430a      	orrs	r2, r1
 8001ea4:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001ea6:	2317      	movs	r3, #23
 8001ea8:	18fb      	adds	r3, r7, r3
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	d105      	bne.n	8001ebc <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001eb0:	4b14      	ldr	r3, [pc, #80]	; (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001eb2:	69da      	ldr	r2, [r3, #28]
 8001eb4:	4b13      	ldr	r3, [pc, #76]	; (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001eb6:	4918      	ldr	r1, [pc, #96]	; (8001f18 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8001eb8:	400a      	ands	r2, r1
 8001eba:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	d009      	beq.n	8001eda <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001ec6:	4b0f      	ldr	r3, [pc, #60]	; (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eca:	2203      	movs	r2, #3
 8001ecc:	4393      	bics	r3, r2
 8001ece:	0019      	movs	r1, r3
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	689a      	ldr	r2, [r3, #8]
 8001ed4:	4b0b      	ldr	r3, [pc, #44]	; (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001ed6:	430a      	orrs	r2, r1
 8001ed8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	2220      	movs	r2, #32
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	d009      	beq.n	8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001ee4:	4b07      	ldr	r3, [pc, #28]	; (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee8:	2210      	movs	r2, #16
 8001eea:	4393      	bics	r3, r2
 8001eec:	0019      	movs	r1, r3
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	68da      	ldr	r2, [r3, #12]
 8001ef2:	4b04      	ldr	r3, [pc, #16]	; (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001ef4:	430a      	orrs	r2, r1
 8001ef6:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001ef8:	2300      	movs	r3, #0
}
 8001efa:	0018      	movs	r0, r3
 8001efc:	46bd      	mov	sp, r7
 8001efe:	b006      	add	sp, #24
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	46c0      	nop			; (mov r8, r8)
 8001f04:	40021000 	.word	0x40021000
 8001f08:	40007000 	.word	0x40007000
 8001f0c:	fffffcff 	.word	0xfffffcff
 8001f10:	fffeffff 	.word	0xfffeffff
 8001f14:	00001388 	.word	0x00001388
 8001f18:	efffffff 	.word	0xefffffff

08001f1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d101      	bne.n	8001f2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e042      	b.n	8001fb4 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	223d      	movs	r2, #61	; 0x3d
 8001f32:	5c9b      	ldrb	r3, [r3, r2]
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d107      	bne.n	8001f4a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	223c      	movs	r2, #60	; 0x3c
 8001f3e:	2100      	movs	r1, #0
 8001f40:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	0018      	movs	r0, r3
 8001f46:	f7fe fe53 	bl	8000bf0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	223d      	movs	r2, #61	; 0x3d
 8001f4e:	2102      	movs	r1, #2
 8001f50:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	3304      	adds	r3, #4
 8001f5a:	0019      	movs	r1, r3
 8001f5c:	0010      	movs	r0, r2
 8001f5e:	f000 f9a9 	bl	80022b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2246      	movs	r2, #70	; 0x46
 8001f66:	2101      	movs	r1, #1
 8001f68:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	223e      	movs	r2, #62	; 0x3e
 8001f6e:	2101      	movs	r1, #1
 8001f70:	5499      	strb	r1, [r3, r2]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	223f      	movs	r2, #63	; 0x3f
 8001f76:	2101      	movs	r1, #1
 8001f78:	5499      	strb	r1, [r3, r2]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2240      	movs	r2, #64	; 0x40
 8001f7e:	2101      	movs	r1, #1
 8001f80:	5499      	strb	r1, [r3, r2]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2241      	movs	r2, #65	; 0x41
 8001f86:	2101      	movs	r1, #1
 8001f88:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2242      	movs	r2, #66	; 0x42
 8001f8e:	2101      	movs	r1, #1
 8001f90:	5499      	strb	r1, [r3, r2]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2243      	movs	r2, #67	; 0x43
 8001f96:	2101      	movs	r1, #1
 8001f98:	5499      	strb	r1, [r3, r2]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2244      	movs	r2, #68	; 0x44
 8001f9e:	2101      	movs	r1, #1
 8001fa0:	5499      	strb	r1, [r3, r2]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2245      	movs	r2, #69	; 0x45
 8001fa6:	2101      	movs	r1, #1
 8001fa8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	223d      	movs	r2, #61	; 0x3d
 8001fae:	2101      	movs	r1, #1
 8001fb0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001fb2:	2300      	movs	r3, #0
}
 8001fb4:	0018      	movs	r0, r3
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	b002      	add	sp, #8
 8001fba:	bd80      	pop	{r7, pc}

08001fbc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b084      	sub	sp, #16
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	223d      	movs	r2, #61	; 0x3d
 8001fc8:	5c9b      	ldrb	r3, [r3, r2]
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d001      	beq.n	8001fd4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e030      	b.n	8002036 <HAL_TIM_Base_Start_IT+0x7a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	223d      	movs	r2, #61	; 0x3d
 8001fd8:	2102      	movs	r1, #2
 8001fda:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	68da      	ldr	r2, [r3, #12]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	2101      	movs	r1, #1
 8001fe8:	430a      	orrs	r2, r1
 8001fea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a13      	ldr	r2, [pc, #76]	; (8002040 <HAL_TIM_Base_Start_IT+0x84>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d004      	beq.n	8002000 <HAL_TIM_Base_Start_IT+0x44>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a12      	ldr	r2, [pc, #72]	; (8002044 <HAL_TIM_Base_Start_IT+0x88>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d111      	bne.n	8002024 <HAL_TIM_Base_Start_IT+0x68>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	2207      	movs	r2, #7
 8002008:	4013      	ands	r3, r2
 800200a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	2b06      	cmp	r3, #6
 8002010:	d010      	beq.n	8002034 <HAL_TIM_Base_Start_IT+0x78>
    {
      __HAL_TIM_ENABLE(htim);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	2101      	movs	r1, #1
 800201e:	430a      	orrs	r2, r1
 8002020:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002022:	e007      	b.n	8002034 <HAL_TIM_Base_Start_IT+0x78>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	2101      	movs	r1, #1
 8002030:	430a      	orrs	r2, r1
 8002032:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002034:	2300      	movs	r3, #0
}
 8002036:	0018      	movs	r0, r3
 8002038:	46bd      	mov	sp, r7
 800203a:	b004      	add	sp, #16
 800203c:	bd80      	pop	{r7, pc}
 800203e:	46c0      	nop			; (mov r8, r8)
 8002040:	40012c00 	.word	0x40012c00
 8002044:	40000400 	.word	0x40000400

08002048 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	691b      	ldr	r3, [r3, #16]
 8002056:	2202      	movs	r2, #2
 8002058:	4013      	ands	r3, r2
 800205a:	2b02      	cmp	r3, #2
 800205c:	d124      	bne.n	80020a8 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	2202      	movs	r2, #2
 8002066:	4013      	ands	r3, r2
 8002068:	2b02      	cmp	r3, #2
 800206a:	d11d      	bne.n	80020a8 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	2203      	movs	r2, #3
 8002072:	4252      	negs	r2, r2
 8002074:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2201      	movs	r2, #1
 800207a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	699b      	ldr	r3, [r3, #24]
 8002082:	2203      	movs	r2, #3
 8002084:	4013      	ands	r3, r2
 8002086:	d004      	beq.n	8002092 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	0018      	movs	r0, r3
 800208c:	f000 f8fa 	bl	8002284 <HAL_TIM_IC_CaptureCallback>
 8002090:	e007      	b.n	80020a2 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	0018      	movs	r0, r3
 8002096:	f000 f8ed 	bl	8002274 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	0018      	movs	r0, r3
 800209e:	f000 f8f9 	bl	8002294 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2200      	movs	r2, #0
 80020a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	691b      	ldr	r3, [r3, #16]
 80020ae:	2204      	movs	r2, #4
 80020b0:	4013      	ands	r3, r2
 80020b2:	2b04      	cmp	r3, #4
 80020b4:	d125      	bne.n	8002102 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	2204      	movs	r2, #4
 80020be:	4013      	ands	r3, r2
 80020c0:	2b04      	cmp	r3, #4
 80020c2:	d11e      	bne.n	8002102 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	2205      	movs	r2, #5
 80020ca:	4252      	negs	r2, r2
 80020cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2202      	movs	r2, #2
 80020d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	699a      	ldr	r2, [r3, #24]
 80020da:	23c0      	movs	r3, #192	; 0xc0
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	4013      	ands	r3, r2
 80020e0:	d004      	beq.n	80020ec <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	0018      	movs	r0, r3
 80020e6:	f000 f8cd 	bl	8002284 <HAL_TIM_IC_CaptureCallback>
 80020ea:	e007      	b.n	80020fc <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	0018      	movs	r0, r3
 80020f0:	f000 f8c0 	bl	8002274 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	0018      	movs	r0, r3
 80020f8:	f000 f8cc 	bl	8002294 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2200      	movs	r2, #0
 8002100:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	691b      	ldr	r3, [r3, #16]
 8002108:	2208      	movs	r2, #8
 800210a:	4013      	ands	r3, r2
 800210c:	2b08      	cmp	r3, #8
 800210e:	d124      	bne.n	800215a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	68db      	ldr	r3, [r3, #12]
 8002116:	2208      	movs	r2, #8
 8002118:	4013      	ands	r3, r2
 800211a:	2b08      	cmp	r3, #8
 800211c:	d11d      	bne.n	800215a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	2209      	movs	r2, #9
 8002124:	4252      	negs	r2, r2
 8002126:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2204      	movs	r2, #4
 800212c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	69db      	ldr	r3, [r3, #28]
 8002134:	2203      	movs	r2, #3
 8002136:	4013      	ands	r3, r2
 8002138:	d004      	beq.n	8002144 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	0018      	movs	r0, r3
 800213e:	f000 f8a1 	bl	8002284 <HAL_TIM_IC_CaptureCallback>
 8002142:	e007      	b.n	8002154 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	0018      	movs	r0, r3
 8002148:	f000 f894 	bl	8002274 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	0018      	movs	r0, r3
 8002150:	f000 f8a0 	bl	8002294 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2200      	movs	r2, #0
 8002158:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	691b      	ldr	r3, [r3, #16]
 8002160:	2210      	movs	r2, #16
 8002162:	4013      	ands	r3, r2
 8002164:	2b10      	cmp	r3, #16
 8002166:	d125      	bne.n	80021b4 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	68db      	ldr	r3, [r3, #12]
 800216e:	2210      	movs	r2, #16
 8002170:	4013      	ands	r3, r2
 8002172:	2b10      	cmp	r3, #16
 8002174:	d11e      	bne.n	80021b4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	2211      	movs	r2, #17
 800217c:	4252      	negs	r2, r2
 800217e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2208      	movs	r2, #8
 8002184:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	69da      	ldr	r2, [r3, #28]
 800218c:	23c0      	movs	r3, #192	; 0xc0
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	4013      	ands	r3, r2
 8002192:	d004      	beq.n	800219e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	0018      	movs	r0, r3
 8002198:	f000 f874 	bl	8002284 <HAL_TIM_IC_CaptureCallback>
 800219c:	e007      	b.n	80021ae <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	0018      	movs	r0, r3
 80021a2:	f000 f867 	bl	8002274 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	0018      	movs	r0, r3
 80021aa:	f000 f873 	bl	8002294 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2200      	movs	r2, #0
 80021b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	691b      	ldr	r3, [r3, #16]
 80021ba:	2201      	movs	r2, #1
 80021bc:	4013      	ands	r3, r2
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d10f      	bne.n	80021e2 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	2201      	movs	r2, #1
 80021ca:	4013      	ands	r3, r2
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d108      	bne.n	80021e2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	2202      	movs	r2, #2
 80021d6:	4252      	negs	r2, r2
 80021d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	0018      	movs	r0, r3
 80021de:	f7fe fb0f 	bl	8000800 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	691b      	ldr	r3, [r3, #16]
 80021e8:	2280      	movs	r2, #128	; 0x80
 80021ea:	4013      	ands	r3, r2
 80021ec:	2b80      	cmp	r3, #128	; 0x80
 80021ee:	d10f      	bne.n	8002210 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	68db      	ldr	r3, [r3, #12]
 80021f6:	2280      	movs	r2, #128	; 0x80
 80021f8:	4013      	ands	r3, r2
 80021fa:	2b80      	cmp	r3, #128	; 0x80
 80021fc:	d108      	bne.n	8002210 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	2281      	movs	r2, #129	; 0x81
 8002204:	4252      	negs	r2, r2
 8002206:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	0018      	movs	r0, r3
 800220c:	f000 f8c6 	bl	800239c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	691b      	ldr	r3, [r3, #16]
 8002216:	2240      	movs	r2, #64	; 0x40
 8002218:	4013      	ands	r3, r2
 800221a:	2b40      	cmp	r3, #64	; 0x40
 800221c:	d10f      	bne.n	800223e <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	2240      	movs	r2, #64	; 0x40
 8002226:	4013      	ands	r3, r2
 8002228:	2b40      	cmp	r3, #64	; 0x40
 800222a:	d108      	bne.n	800223e <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	2241      	movs	r2, #65	; 0x41
 8002232:	4252      	negs	r2, r2
 8002234:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	0018      	movs	r0, r3
 800223a:	f000 f833 	bl	80022a4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	691b      	ldr	r3, [r3, #16]
 8002244:	2220      	movs	r2, #32
 8002246:	4013      	ands	r3, r2
 8002248:	2b20      	cmp	r3, #32
 800224a:	d10f      	bne.n	800226c <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	68db      	ldr	r3, [r3, #12]
 8002252:	2220      	movs	r2, #32
 8002254:	4013      	ands	r3, r2
 8002256:	2b20      	cmp	r3, #32
 8002258:	d108      	bne.n	800226c <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	2221      	movs	r2, #33	; 0x21
 8002260:	4252      	negs	r2, r2
 8002262:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	0018      	movs	r0, r3
 8002268:	f000 f890 	bl	800238c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800226c:	46c0      	nop			; (mov r8, r8)
 800226e:	46bd      	mov	sp, r7
 8002270:	b002      	add	sp, #8
 8002272:	bd80      	pop	{r7, pc}

08002274 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800227c:	46c0      	nop			; (mov r8, r8)
 800227e:	46bd      	mov	sp, r7
 8002280:	b002      	add	sp, #8
 8002282:	bd80      	pop	{r7, pc}

08002284 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b082      	sub	sp, #8
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800228c:	46c0      	nop			; (mov r8, r8)
 800228e:	46bd      	mov	sp, r7
 8002290:	b002      	add	sp, #8
 8002292:	bd80      	pop	{r7, pc}

08002294 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b082      	sub	sp, #8
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800229c:	46c0      	nop			; (mov r8, r8)
 800229e:	46bd      	mov	sp, r7
 80022a0:	b002      	add	sp, #8
 80022a2:	bd80      	pop	{r7, pc}

080022a4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80022ac:	46c0      	nop			; (mov r8, r8)
 80022ae:	46bd      	mov	sp, r7
 80022b0:	b002      	add	sp, #8
 80022b2:	bd80      	pop	{r7, pc}

080022b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b084      	sub	sp, #16
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
 80022bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	4a2b      	ldr	r2, [pc, #172]	; (8002374 <TIM_Base_SetConfig+0xc0>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d003      	beq.n	80022d4 <TIM_Base_SetConfig+0x20>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	4a2a      	ldr	r2, [pc, #168]	; (8002378 <TIM_Base_SetConfig+0xc4>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d108      	bne.n	80022e6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	2270      	movs	r2, #112	; 0x70
 80022d8:	4393      	bics	r3, r2
 80022da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	68fa      	ldr	r2, [r7, #12]
 80022e2:	4313      	orrs	r3, r2
 80022e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	4a22      	ldr	r2, [pc, #136]	; (8002374 <TIM_Base_SetConfig+0xc0>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d00f      	beq.n	800230e <TIM_Base_SetConfig+0x5a>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	4a21      	ldr	r2, [pc, #132]	; (8002378 <TIM_Base_SetConfig+0xc4>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d00b      	beq.n	800230e <TIM_Base_SetConfig+0x5a>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	4a20      	ldr	r2, [pc, #128]	; (800237c <TIM_Base_SetConfig+0xc8>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d007      	beq.n	800230e <TIM_Base_SetConfig+0x5a>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4a1f      	ldr	r2, [pc, #124]	; (8002380 <TIM_Base_SetConfig+0xcc>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d003      	beq.n	800230e <TIM_Base_SetConfig+0x5a>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	4a1e      	ldr	r2, [pc, #120]	; (8002384 <TIM_Base_SetConfig+0xd0>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d108      	bne.n	8002320 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	4a1d      	ldr	r2, [pc, #116]	; (8002388 <TIM_Base_SetConfig+0xd4>)
 8002312:	4013      	ands	r3, r2
 8002314:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	68db      	ldr	r3, [r3, #12]
 800231a:	68fa      	ldr	r2, [r7, #12]
 800231c:	4313      	orrs	r3, r2
 800231e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2280      	movs	r2, #128	; 0x80
 8002324:	4393      	bics	r3, r2
 8002326:	001a      	movs	r2, r3
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	695b      	ldr	r3, [r3, #20]
 800232c:	4313      	orrs	r3, r2
 800232e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	68fa      	ldr	r2, [r7, #12]
 8002334:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	689a      	ldr	r2, [r3, #8]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	4a0a      	ldr	r2, [pc, #40]	; (8002374 <TIM_Base_SetConfig+0xc0>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d007      	beq.n	800235e <TIM_Base_SetConfig+0xaa>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	4a0b      	ldr	r2, [pc, #44]	; (8002380 <TIM_Base_SetConfig+0xcc>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d003      	beq.n	800235e <TIM_Base_SetConfig+0xaa>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4a0a      	ldr	r2, [pc, #40]	; (8002384 <TIM_Base_SetConfig+0xd0>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d103      	bne.n	8002366 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	691a      	ldr	r2, [r3, #16]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2201      	movs	r2, #1
 800236a:	615a      	str	r2, [r3, #20]
}
 800236c:	46c0      	nop			; (mov r8, r8)
 800236e:	46bd      	mov	sp, r7
 8002370:	b004      	add	sp, #16
 8002372:	bd80      	pop	{r7, pc}
 8002374:	40012c00 	.word	0x40012c00
 8002378:	40000400 	.word	0x40000400
 800237c:	40002000 	.word	0x40002000
 8002380:	40014400 	.word	0x40014400
 8002384:	40014800 	.word	0x40014800
 8002388:	fffffcff 	.word	0xfffffcff

0800238c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b082      	sub	sp, #8
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002394:	46c0      	nop			; (mov r8, r8)
 8002396:	46bd      	mov	sp, r7
 8002398:	b002      	add	sp, #8
 800239a:	bd80      	pop	{r7, pc}

0800239c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80023a4:	46c0      	nop			; (mov r8, r8)
 80023a6:	46bd      	mov	sp, r7
 80023a8:	b002      	add	sp, #8
 80023aa:	bd80      	pop	{r7, pc}

080023ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b082      	sub	sp, #8
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d101      	bne.n	80023be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e044      	b.n	8002448 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d107      	bne.n	80023d6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2278      	movs	r2, #120	; 0x78
 80023ca:	2100      	movs	r1, #0
 80023cc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	0018      	movs	r0, r3
 80023d2:	f7fe fc35 	bl	8000c40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2224      	movs	r2, #36	; 0x24
 80023da:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	2101      	movs	r1, #1
 80023e8:	438a      	bics	r2, r1
 80023ea:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	0018      	movs	r0, r3
 80023f0:	f000 fc0c 	bl	8002c0c <UART_SetConfig>
 80023f4:	0003      	movs	r3, r0
 80023f6:	2b01      	cmp	r3, #1
 80023f8:	d101      	bne.n	80023fe <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e024      	b.n	8002448 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002402:	2b00      	cmp	r3, #0
 8002404:	d003      	beq.n	800240e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	0018      	movs	r0, r3
 800240a:	f000 fd27 	bl	8002e5c <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	685a      	ldr	r2, [r3, #4]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	490d      	ldr	r1, [pc, #52]	; (8002450 <HAL_UART_Init+0xa4>)
 800241a:	400a      	ands	r2, r1
 800241c:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	689a      	ldr	r2, [r3, #8]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	2108      	movs	r1, #8
 800242a:	438a      	bics	r2, r1
 800242c:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	2101      	movs	r1, #1
 800243a:	430a      	orrs	r2, r1
 800243c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	0018      	movs	r0, r3
 8002442:	f000 fdbf 	bl	8002fc4 <UART_CheckIdleState>
 8002446:	0003      	movs	r3, r0
}
 8002448:	0018      	movs	r0, r3
 800244a:	46bd      	mov	sp, r7
 800244c:	b002      	add	sp, #8
 800244e:	bd80      	pop	{r7, pc}
 8002450:	fffff7ff 	.word	0xfffff7ff

08002454 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b08a      	sub	sp, #40	; 0x28
 8002458:	af02      	add	r7, sp, #8
 800245a:	60f8      	str	r0, [r7, #12]
 800245c:	60b9      	str	r1, [r7, #8]
 800245e:	603b      	str	r3, [r7, #0]
 8002460:	1dbb      	adds	r3, r7, #6
 8002462:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002468:	2b20      	cmp	r3, #32
 800246a:	d000      	beq.n	800246e <HAL_UART_Transmit+0x1a>
 800246c:	e08d      	b.n	800258a <HAL_UART_Transmit+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d003      	beq.n	800247c <HAL_UART_Transmit+0x28>
 8002474:	1dbb      	adds	r3, r7, #6
 8002476:	881b      	ldrh	r3, [r3, #0]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d101      	bne.n	8002480 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800247c:	2301      	movs	r3, #1
 800247e:	e085      	b.n	800258c <HAL_UART_Transmit+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	689a      	ldr	r2, [r3, #8]
 8002484:	2380      	movs	r3, #128	; 0x80
 8002486:	015b      	lsls	r3, r3, #5
 8002488:	429a      	cmp	r2, r3
 800248a:	d109      	bne.n	80024a0 <HAL_UART_Transmit+0x4c>
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	691b      	ldr	r3, [r3, #16]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d105      	bne.n	80024a0 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	2201      	movs	r2, #1
 8002498:	4013      	ands	r3, r2
 800249a:	d001      	beq.n	80024a0 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	e075      	b.n	800258c <HAL_UART_Transmit+0x138>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	2284      	movs	r2, #132	; 0x84
 80024a4:	2100      	movs	r1, #0
 80024a6:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2221      	movs	r2, #33	; 0x21
 80024ac:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80024ae:	f7fe fcd5 	bl	8000e5c <HAL_GetTick>
 80024b2:	0003      	movs	r3, r0
 80024b4:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	1dba      	adds	r2, r7, #6
 80024ba:	2150      	movs	r1, #80	; 0x50
 80024bc:	8812      	ldrh	r2, [r2, #0]
 80024be:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	1dba      	adds	r2, r7, #6
 80024c4:	2152      	movs	r1, #82	; 0x52
 80024c6:	8812      	ldrh	r2, [r2, #0]
 80024c8:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	689a      	ldr	r2, [r3, #8]
 80024ce:	2380      	movs	r3, #128	; 0x80
 80024d0:	015b      	lsls	r3, r3, #5
 80024d2:	429a      	cmp	r2, r3
 80024d4:	d108      	bne.n	80024e8 <HAL_UART_Transmit+0x94>
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	691b      	ldr	r3, [r3, #16]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d104      	bne.n	80024e8 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 80024de:	2300      	movs	r3, #0
 80024e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	61bb      	str	r3, [r7, #24]
 80024e6:	e003      	b.n	80024f0 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80024ec:	2300      	movs	r3, #0
 80024ee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80024f0:	e030      	b.n	8002554 <HAL_UART_Transmit+0x100>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80024f2:	697a      	ldr	r2, [r7, #20]
 80024f4:	68f8      	ldr	r0, [r7, #12]
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	9300      	str	r3, [sp, #0]
 80024fa:	0013      	movs	r3, r2
 80024fc:	2200      	movs	r2, #0
 80024fe:	2180      	movs	r1, #128	; 0x80
 8002500:	f000 fe08 	bl	8003114 <UART_WaitOnFlagUntilTimeout>
 8002504:	1e03      	subs	r3, r0, #0
 8002506:	d004      	beq.n	8002512 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	2220      	movs	r2, #32
 800250c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800250e:	2303      	movs	r3, #3
 8002510:	e03c      	b.n	800258c <HAL_UART_Transmit+0x138>
      }
      if (pdata8bits == NULL)
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d10b      	bne.n	8002530 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002518:	69bb      	ldr	r3, [r7, #24]
 800251a:	881a      	ldrh	r2, [r3, #0]
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	05d2      	lsls	r2, r2, #23
 8002522:	0dd2      	lsrs	r2, r2, #23
 8002524:	b292      	uxth	r2, r2
 8002526:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002528:	69bb      	ldr	r3, [r7, #24]
 800252a:	3302      	adds	r3, #2
 800252c:	61bb      	str	r3, [r7, #24]
 800252e:	e008      	b.n	8002542 <HAL_UART_Transmit+0xee>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	781a      	ldrb	r2, [r3, #0]
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	b292      	uxth	r2, r2
 800253a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800253c:	69fb      	ldr	r3, [r7, #28]
 800253e:	3301      	adds	r3, #1
 8002540:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2252      	movs	r2, #82	; 0x52
 8002546:	5a9b      	ldrh	r3, [r3, r2]
 8002548:	b29b      	uxth	r3, r3
 800254a:	3b01      	subs	r3, #1
 800254c:	b299      	uxth	r1, r3
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	2252      	movs	r2, #82	; 0x52
 8002552:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	2252      	movs	r2, #82	; 0x52
 8002558:	5a9b      	ldrh	r3, [r3, r2]
 800255a:	b29b      	uxth	r3, r3
 800255c:	2b00      	cmp	r3, #0
 800255e:	d1c8      	bne.n	80024f2 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002560:	697a      	ldr	r2, [r7, #20]
 8002562:	68f8      	ldr	r0, [r7, #12]
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	9300      	str	r3, [sp, #0]
 8002568:	0013      	movs	r3, r2
 800256a:	2200      	movs	r2, #0
 800256c:	2140      	movs	r1, #64	; 0x40
 800256e:	f000 fdd1 	bl	8003114 <UART_WaitOnFlagUntilTimeout>
 8002572:	1e03      	subs	r3, r0, #0
 8002574:	d004      	beq.n	8002580 <HAL_UART_Transmit+0x12c>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2220      	movs	r2, #32
 800257a:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 800257c:	2303      	movs	r3, #3
 800257e:	e005      	b.n	800258c <HAL_UART_Transmit+0x138>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2220      	movs	r2, #32
 8002584:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002586:	2300      	movs	r3, #0
 8002588:	e000      	b.n	800258c <HAL_UART_Transmit+0x138>
  }
  else
  {
    return HAL_BUSY;
 800258a:	2302      	movs	r3, #2
  }
}
 800258c:	0018      	movs	r0, r3
 800258e:	46bd      	mov	sp, r7
 8002590:	b008      	add	sp, #32
 8002592:	bd80      	pop	{r7, pc}

08002594 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b088      	sub	sp, #32
 8002598:	af00      	add	r7, sp, #0
 800259a:	60f8      	str	r0, [r7, #12]
 800259c:	60b9      	str	r1, [r7, #8]
 800259e:	1dbb      	adds	r3, r7, #6
 80025a0:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	2280      	movs	r2, #128	; 0x80
 80025a6:	589b      	ldr	r3, [r3, r2]
 80025a8:	2b20      	cmp	r3, #32
 80025aa:	d145      	bne.n	8002638 <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d003      	beq.n	80025ba <HAL_UART_Receive_IT+0x26>
 80025b2:	1dbb      	adds	r3, r7, #6
 80025b4:	881b      	ldrh	r3, [r3, #0]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d101      	bne.n	80025be <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e03d      	b.n	800263a <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	689a      	ldr	r2, [r3, #8]
 80025c2:	2380      	movs	r3, #128	; 0x80
 80025c4:	015b      	lsls	r3, r3, #5
 80025c6:	429a      	cmp	r2, r3
 80025c8:	d109      	bne.n	80025de <HAL_UART_Receive_IT+0x4a>
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	691b      	ldr	r3, [r3, #16]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d105      	bne.n	80025de <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	2201      	movs	r2, #1
 80025d6:	4013      	ands	r3, r2
 80025d8:	d001      	beq.n	80025de <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e02d      	b.n	800263a <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	2200      	movs	r2, #0
 80025e2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	685a      	ldr	r2, [r3, #4]
 80025ea:	2380      	movs	r3, #128	; 0x80
 80025ec:	041b      	lsls	r3, r3, #16
 80025ee:	4013      	ands	r3, r2
 80025f0:	d019      	beq.n	8002626 <HAL_UART_Receive_IT+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025f2:	f3ef 8310 	mrs	r3, PRIMASK
 80025f6:	613b      	str	r3, [r7, #16]
  return(result);
 80025f8:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80025fa:	61fb      	str	r3, [r7, #28]
 80025fc:	2301      	movs	r3, #1
 80025fe:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	f383 8810 	msr	PRIMASK, r3
}
 8002606:	46c0      	nop			; (mov r8, r8)
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	2180      	movs	r1, #128	; 0x80
 8002614:	04c9      	lsls	r1, r1, #19
 8002616:	430a      	orrs	r2, r1
 8002618:	601a      	str	r2, [r3, #0]
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800261e:	69bb      	ldr	r3, [r7, #24]
 8002620:	f383 8810 	msr	PRIMASK, r3
}
 8002624:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002626:	1dbb      	adds	r3, r7, #6
 8002628:	881a      	ldrh	r2, [r3, #0]
 800262a:	68b9      	ldr	r1, [r7, #8]
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	0018      	movs	r0, r3
 8002630:	f000 fdda 	bl	80031e8 <UART_Start_Receive_IT>
 8002634:	0003      	movs	r3, r0
 8002636:	e000      	b.n	800263a <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8002638:	2302      	movs	r3, #2
  }
}
 800263a:	0018      	movs	r0, r3
 800263c:	46bd      	mov	sp, r7
 800263e:	b008      	add	sp, #32
 8002640:	bd80      	pop	{r7, pc}
	...

08002644 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002644:	b590      	push	{r4, r7, lr}
 8002646:	b0ab      	sub	sp, #172	; 0xac
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	69db      	ldr	r3, [r3, #28]
 8002652:	22a4      	movs	r2, #164	; 0xa4
 8002654:	18b9      	adds	r1, r7, r2
 8002656:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	20a0      	movs	r0, #160	; 0xa0
 8002660:	1839      	adds	r1, r7, r0
 8002662:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	219c      	movs	r1, #156	; 0x9c
 800266c:	1879      	adds	r1, r7, r1
 800266e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002670:	0011      	movs	r1, r2
 8002672:	18bb      	adds	r3, r7, r2
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a99      	ldr	r2, [pc, #612]	; (80028dc <HAL_UART_IRQHandler+0x298>)
 8002678:	4013      	ands	r3, r2
 800267a:	2298      	movs	r2, #152	; 0x98
 800267c:	18bc      	adds	r4, r7, r2
 800267e:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8002680:	18bb      	adds	r3, r7, r2
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d114      	bne.n	80026b2 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002688:	187b      	adds	r3, r7, r1
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	2220      	movs	r2, #32
 800268e:	4013      	ands	r3, r2
 8002690:	d00f      	beq.n	80026b2 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002692:	183b      	adds	r3, r7, r0
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	2220      	movs	r2, #32
 8002698:	4013      	ands	r3, r2
 800269a:	d00a      	beq.n	80026b2 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d100      	bne.n	80026a6 <HAL_UART_IRQHandler+0x62>
 80026a4:	e286      	b.n	8002bb4 <HAL_UART_IRQHandler+0x570>
      {
        huart->RxISR(huart);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80026aa:	687a      	ldr	r2, [r7, #4]
 80026ac:	0010      	movs	r0, r2
 80026ae:	4798      	blx	r3
      }
      return;
 80026b0:	e280      	b.n	8002bb4 <HAL_UART_IRQHandler+0x570>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80026b2:	2398      	movs	r3, #152	; 0x98
 80026b4:	18fb      	adds	r3, r7, r3
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d100      	bne.n	80026be <HAL_UART_IRQHandler+0x7a>
 80026bc:	e114      	b.n	80028e8 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80026be:	239c      	movs	r3, #156	; 0x9c
 80026c0:	18fb      	adds	r3, r7, r3
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	2201      	movs	r2, #1
 80026c6:	4013      	ands	r3, r2
 80026c8:	d106      	bne.n	80026d8 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80026ca:	23a0      	movs	r3, #160	; 0xa0
 80026cc:	18fb      	adds	r3, r7, r3
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a83      	ldr	r2, [pc, #524]	; (80028e0 <HAL_UART_IRQHandler+0x29c>)
 80026d2:	4013      	ands	r3, r2
 80026d4:	d100      	bne.n	80026d8 <HAL_UART_IRQHandler+0x94>
 80026d6:	e107      	b.n	80028e8 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80026d8:	23a4      	movs	r3, #164	; 0xa4
 80026da:	18fb      	adds	r3, r7, r3
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	2201      	movs	r2, #1
 80026e0:	4013      	ands	r3, r2
 80026e2:	d012      	beq.n	800270a <HAL_UART_IRQHandler+0xc6>
 80026e4:	23a0      	movs	r3, #160	; 0xa0
 80026e6:	18fb      	adds	r3, r7, r3
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	2380      	movs	r3, #128	; 0x80
 80026ec:	005b      	lsls	r3, r3, #1
 80026ee:	4013      	ands	r3, r2
 80026f0:	d00b      	beq.n	800270a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	2201      	movs	r2, #1
 80026f8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2284      	movs	r2, #132	; 0x84
 80026fe:	589b      	ldr	r3, [r3, r2]
 8002700:	2201      	movs	r2, #1
 8002702:	431a      	orrs	r2, r3
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2184      	movs	r1, #132	; 0x84
 8002708:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800270a:	23a4      	movs	r3, #164	; 0xa4
 800270c:	18fb      	adds	r3, r7, r3
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	2202      	movs	r2, #2
 8002712:	4013      	ands	r3, r2
 8002714:	d011      	beq.n	800273a <HAL_UART_IRQHandler+0xf6>
 8002716:	239c      	movs	r3, #156	; 0x9c
 8002718:	18fb      	adds	r3, r7, r3
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	2201      	movs	r2, #1
 800271e:	4013      	ands	r3, r2
 8002720:	d00b      	beq.n	800273a <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	2202      	movs	r2, #2
 8002728:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2284      	movs	r2, #132	; 0x84
 800272e:	589b      	ldr	r3, [r3, r2]
 8002730:	2204      	movs	r2, #4
 8002732:	431a      	orrs	r2, r3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2184      	movs	r1, #132	; 0x84
 8002738:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800273a:	23a4      	movs	r3, #164	; 0xa4
 800273c:	18fb      	adds	r3, r7, r3
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	2204      	movs	r2, #4
 8002742:	4013      	ands	r3, r2
 8002744:	d011      	beq.n	800276a <HAL_UART_IRQHandler+0x126>
 8002746:	239c      	movs	r3, #156	; 0x9c
 8002748:	18fb      	adds	r3, r7, r3
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	2201      	movs	r2, #1
 800274e:	4013      	ands	r3, r2
 8002750:	d00b      	beq.n	800276a <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	2204      	movs	r2, #4
 8002758:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2284      	movs	r2, #132	; 0x84
 800275e:	589b      	ldr	r3, [r3, r2]
 8002760:	2202      	movs	r2, #2
 8002762:	431a      	orrs	r2, r3
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2184      	movs	r1, #132	; 0x84
 8002768:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800276a:	23a4      	movs	r3, #164	; 0xa4
 800276c:	18fb      	adds	r3, r7, r3
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	2208      	movs	r2, #8
 8002772:	4013      	ands	r3, r2
 8002774:	d017      	beq.n	80027a6 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002776:	23a0      	movs	r3, #160	; 0xa0
 8002778:	18fb      	adds	r3, r7, r3
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	2220      	movs	r2, #32
 800277e:	4013      	ands	r3, r2
 8002780:	d105      	bne.n	800278e <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002782:	239c      	movs	r3, #156	; 0x9c
 8002784:	18fb      	adds	r3, r7, r3
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	2201      	movs	r2, #1
 800278a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800278c:	d00b      	beq.n	80027a6 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	2208      	movs	r2, #8
 8002794:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2284      	movs	r2, #132	; 0x84
 800279a:	589b      	ldr	r3, [r3, r2]
 800279c:	2208      	movs	r2, #8
 800279e:	431a      	orrs	r2, r3
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2184      	movs	r1, #132	; 0x84
 80027a4:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80027a6:	23a4      	movs	r3, #164	; 0xa4
 80027a8:	18fb      	adds	r3, r7, r3
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	2380      	movs	r3, #128	; 0x80
 80027ae:	011b      	lsls	r3, r3, #4
 80027b0:	4013      	ands	r3, r2
 80027b2:	d013      	beq.n	80027dc <HAL_UART_IRQHandler+0x198>
 80027b4:	23a0      	movs	r3, #160	; 0xa0
 80027b6:	18fb      	adds	r3, r7, r3
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	2380      	movs	r3, #128	; 0x80
 80027bc:	04db      	lsls	r3, r3, #19
 80027be:	4013      	ands	r3, r2
 80027c0:	d00c      	beq.n	80027dc <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	2280      	movs	r2, #128	; 0x80
 80027c8:	0112      	lsls	r2, r2, #4
 80027ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2284      	movs	r2, #132	; 0x84
 80027d0:	589b      	ldr	r3, [r3, r2]
 80027d2:	2220      	movs	r2, #32
 80027d4:	431a      	orrs	r2, r3
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2184      	movs	r1, #132	; 0x84
 80027da:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2284      	movs	r2, #132	; 0x84
 80027e0:	589b      	ldr	r3, [r3, r2]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d100      	bne.n	80027e8 <HAL_UART_IRQHandler+0x1a4>
 80027e6:	e1e7      	b.n	8002bb8 <HAL_UART_IRQHandler+0x574>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80027e8:	23a4      	movs	r3, #164	; 0xa4
 80027ea:	18fb      	adds	r3, r7, r3
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	2220      	movs	r2, #32
 80027f0:	4013      	ands	r3, r2
 80027f2:	d00e      	beq.n	8002812 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80027f4:	23a0      	movs	r3, #160	; 0xa0
 80027f6:	18fb      	adds	r3, r7, r3
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	2220      	movs	r2, #32
 80027fc:	4013      	ands	r3, r2
 80027fe:	d008      	beq.n	8002812 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002804:	2b00      	cmp	r3, #0
 8002806:	d004      	beq.n	8002812 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800280c:	687a      	ldr	r2, [r7, #4]
 800280e:	0010      	movs	r0, r2
 8002810:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2284      	movs	r2, #132	; 0x84
 8002816:	589b      	ldr	r3, [r3, r2]
 8002818:	2194      	movs	r1, #148	; 0x94
 800281a:	187a      	adds	r2, r7, r1
 800281c:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	2240      	movs	r2, #64	; 0x40
 8002826:	4013      	ands	r3, r2
 8002828:	2b40      	cmp	r3, #64	; 0x40
 800282a:	d004      	beq.n	8002836 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800282c:	187b      	adds	r3, r7, r1
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	2228      	movs	r2, #40	; 0x28
 8002832:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002834:	d047      	beq.n	80028c6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	0018      	movs	r0, r3
 800283a:	f000 fd8b 	bl	8003354 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	2240      	movs	r2, #64	; 0x40
 8002846:	4013      	ands	r3, r2
 8002848:	2b40      	cmp	r3, #64	; 0x40
 800284a:	d137      	bne.n	80028bc <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800284c:	f3ef 8310 	mrs	r3, PRIMASK
 8002850:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8002852:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002854:	2090      	movs	r0, #144	; 0x90
 8002856:	183a      	adds	r2, r7, r0
 8002858:	6013      	str	r3, [r2, #0]
 800285a:	2301      	movs	r3, #1
 800285c:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800285e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002860:	f383 8810 	msr	PRIMASK, r3
}
 8002864:	46c0      	nop			; (mov r8, r8)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	689a      	ldr	r2, [r3, #8]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	2140      	movs	r1, #64	; 0x40
 8002872:	438a      	bics	r2, r1
 8002874:	609a      	str	r2, [r3, #8]
 8002876:	183b      	adds	r3, r7, r0
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800287c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800287e:	f383 8810 	msr	PRIMASK, r3
}
 8002882:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002888:	2b00      	cmp	r3, #0
 800288a:	d012      	beq.n	80028b2 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002890:	4a14      	ldr	r2, [pc, #80]	; (80028e4 <HAL_UART_IRQHandler+0x2a0>)
 8002892:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002898:	0018      	movs	r0, r3
 800289a:	f7fe fc23 	bl	80010e4 <HAL_DMA_Abort_IT>
 800289e:	1e03      	subs	r3, r0, #0
 80028a0:	d01a      	beq.n	80028d8 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028ac:	0018      	movs	r0, r3
 80028ae:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028b0:	e012      	b.n	80028d8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	0018      	movs	r0, r3
 80028b6:	f000 f995 	bl	8002be4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028ba:	e00d      	b.n	80028d8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	0018      	movs	r0, r3
 80028c0:	f000 f990 	bl	8002be4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028c4:	e008      	b.n	80028d8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	0018      	movs	r0, r3
 80028ca:	f000 f98b 	bl	8002be4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2284      	movs	r2, #132	; 0x84
 80028d2:	2100      	movs	r1, #0
 80028d4:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80028d6:	e16f      	b.n	8002bb8 <HAL_UART_IRQHandler+0x574>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028d8:	46c0      	nop			; (mov r8, r8)
    return;
 80028da:	e16d      	b.n	8002bb8 <HAL_UART_IRQHandler+0x574>
 80028dc:	0000080f 	.word	0x0000080f
 80028e0:	04000120 	.word	0x04000120
 80028e4:	0800341d 	.word	0x0800341d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	d000      	beq.n	80028f2 <HAL_UART_IRQHandler+0x2ae>
 80028f0:	e139      	b.n	8002b66 <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80028f2:	23a4      	movs	r3, #164	; 0xa4
 80028f4:	18fb      	adds	r3, r7, r3
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	2210      	movs	r2, #16
 80028fa:	4013      	ands	r3, r2
 80028fc:	d100      	bne.n	8002900 <HAL_UART_IRQHandler+0x2bc>
 80028fe:	e132      	b.n	8002b66 <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002900:	23a0      	movs	r3, #160	; 0xa0
 8002902:	18fb      	adds	r3, r7, r3
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	2210      	movs	r2, #16
 8002908:	4013      	ands	r3, r2
 800290a:	d100      	bne.n	800290e <HAL_UART_IRQHandler+0x2ca>
 800290c:	e12b      	b.n	8002b66 <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	2210      	movs	r2, #16
 8002914:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	2240      	movs	r2, #64	; 0x40
 800291e:	4013      	ands	r3, r2
 8002920:	2b40      	cmp	r3, #64	; 0x40
 8002922:	d000      	beq.n	8002926 <HAL_UART_IRQHandler+0x2e2>
 8002924:	e09f      	b.n	8002a66 <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	685a      	ldr	r2, [r3, #4]
 800292e:	217e      	movs	r1, #126	; 0x7e
 8002930:	187b      	adds	r3, r7, r1
 8002932:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8002934:	187b      	adds	r3, r7, r1
 8002936:	881b      	ldrh	r3, [r3, #0]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d100      	bne.n	800293e <HAL_UART_IRQHandler+0x2fa>
 800293c:	e13e      	b.n	8002bbc <HAL_UART_IRQHandler+0x578>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2258      	movs	r2, #88	; 0x58
 8002942:	5a9b      	ldrh	r3, [r3, r2]
 8002944:	187a      	adds	r2, r7, r1
 8002946:	8812      	ldrh	r2, [r2, #0]
 8002948:	429a      	cmp	r2, r3
 800294a:	d300      	bcc.n	800294e <HAL_UART_IRQHandler+0x30a>
 800294c:	e136      	b.n	8002bbc <HAL_UART_IRQHandler+0x578>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	187a      	adds	r2, r7, r1
 8002952:	215a      	movs	r1, #90	; 0x5a
 8002954:	8812      	ldrh	r2, [r2, #0]
 8002956:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800295c:	699b      	ldr	r3, [r3, #24]
 800295e:	2b20      	cmp	r3, #32
 8002960:	d06f      	beq.n	8002a42 <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002962:	f3ef 8310 	mrs	r3, PRIMASK
 8002966:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8002968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800296a:	67bb      	str	r3, [r7, #120]	; 0x78
 800296c:	2301      	movs	r3, #1
 800296e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002970:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002972:	f383 8810 	msr	PRIMASK, r3
}
 8002976:	46c0      	nop			; (mov r8, r8)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4992      	ldr	r1, [pc, #584]	; (8002bcc <HAL_UART_IRQHandler+0x588>)
 8002984:	400a      	ands	r2, r1
 8002986:	601a      	str	r2, [r3, #0]
 8002988:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800298a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800298c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800298e:	f383 8810 	msr	PRIMASK, r3
}
 8002992:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002994:	f3ef 8310 	mrs	r3, PRIMASK
 8002998:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800299a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800299c:	677b      	str	r3, [r7, #116]	; 0x74
 800299e:	2301      	movs	r3, #1
 80029a0:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029a4:	f383 8810 	msr	PRIMASK, r3
}
 80029a8:	46c0      	nop			; (mov r8, r8)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	689a      	ldr	r2, [r3, #8]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	2101      	movs	r1, #1
 80029b6:	438a      	bics	r2, r1
 80029b8:	609a      	str	r2, [r3, #8]
 80029ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029bc:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029c0:	f383 8810 	msr	PRIMASK, r3
}
 80029c4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029c6:	f3ef 8310 	mrs	r3, PRIMASK
 80029ca:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80029cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80029ce:	673b      	str	r3, [r7, #112]	; 0x70
 80029d0:	2301      	movs	r3, #1
 80029d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029d6:	f383 8810 	msr	PRIMASK, r3
}
 80029da:	46c0      	nop			; (mov r8, r8)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	689a      	ldr	r2, [r3, #8]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	2140      	movs	r1, #64	; 0x40
 80029e8:	438a      	bics	r2, r1
 80029ea:	609a      	str	r2, [r3, #8]
 80029ec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80029ee:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029f2:	f383 8810 	msr	PRIMASK, r3
}
 80029f6:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2280      	movs	r2, #128	; 0x80
 80029fc:	2120      	movs	r1, #32
 80029fe:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2200      	movs	r2, #0
 8002a04:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a06:	f3ef 8310 	mrs	r3, PRIMASK
 8002a0a:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8002a0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a0e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002a10:	2301      	movs	r3, #1
 8002a12:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a14:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a16:	f383 8810 	msr	PRIMASK, r3
}
 8002a1a:	46c0      	nop			; (mov r8, r8)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	2110      	movs	r1, #16
 8002a28:	438a      	bics	r2, r1
 8002a2a:	601a      	str	r2, [r3, #0]
 8002a2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a2e:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a32:	f383 8810 	msr	PRIMASK, r3
}
 8002a36:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a3c:	0018      	movs	r0, r3
 8002a3e:	f7fe fb19 	bl	8001074 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2202      	movs	r2, #2
 8002a46:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2258      	movs	r2, #88	; 0x58
 8002a4c:	5a9a      	ldrh	r2, [r3, r2]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	215a      	movs	r1, #90	; 0x5a
 8002a52:	5a5b      	ldrh	r3, [r3, r1]
 8002a54:	b29b      	uxth	r3, r3
 8002a56:	1ad3      	subs	r3, r2, r3
 8002a58:	b29a      	uxth	r2, r3
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	0011      	movs	r1, r2
 8002a5e:	0018      	movs	r0, r3
 8002a60:	f000 f8c8 	bl	8002bf4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002a64:	e0aa      	b.n	8002bbc <HAL_UART_IRQHandler+0x578>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2258      	movs	r2, #88	; 0x58
 8002a6a:	5a99      	ldrh	r1, [r3, r2]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	225a      	movs	r2, #90	; 0x5a
 8002a70:	5a9b      	ldrh	r3, [r3, r2]
 8002a72:	b29a      	uxth	r2, r3
 8002a74:	208e      	movs	r0, #142	; 0x8e
 8002a76:	183b      	adds	r3, r7, r0
 8002a78:	1a8a      	subs	r2, r1, r2
 8002a7a:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	225a      	movs	r2, #90	; 0x5a
 8002a80:	5a9b      	ldrh	r3, [r3, r2]
 8002a82:	b29b      	uxth	r3, r3
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d100      	bne.n	8002a8a <HAL_UART_IRQHandler+0x446>
 8002a88:	e09a      	b.n	8002bc0 <HAL_UART_IRQHandler+0x57c>
          && (nb_rx_data > 0U))
 8002a8a:	183b      	adds	r3, r7, r0
 8002a8c:	881b      	ldrh	r3, [r3, #0]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d100      	bne.n	8002a94 <HAL_UART_IRQHandler+0x450>
 8002a92:	e095      	b.n	8002bc0 <HAL_UART_IRQHandler+0x57c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a94:	f3ef 8310 	mrs	r3, PRIMASK
 8002a98:	60fb      	str	r3, [r7, #12]
  return(result);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a9c:	2488      	movs	r4, #136	; 0x88
 8002a9e:	193a      	adds	r2, r7, r4
 8002aa0:	6013      	str	r3, [r2, #0]
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	f383 8810 	msr	PRIMASK, r3
}
 8002aac:	46c0      	nop			; (mov r8, r8)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4945      	ldr	r1, [pc, #276]	; (8002bd0 <HAL_UART_IRQHandler+0x58c>)
 8002aba:	400a      	ands	r2, r1
 8002abc:	601a      	str	r2, [r3, #0]
 8002abe:	193b      	adds	r3, r7, r4
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	f383 8810 	msr	PRIMASK, r3
}
 8002aca:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002acc:	f3ef 8310 	mrs	r3, PRIMASK
 8002ad0:	61bb      	str	r3, [r7, #24]
  return(result);
 8002ad2:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ad4:	2484      	movs	r4, #132	; 0x84
 8002ad6:	193a      	adds	r2, r7, r4
 8002ad8:	6013      	str	r3, [r2, #0]
 8002ada:	2301      	movs	r3, #1
 8002adc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	f383 8810 	msr	PRIMASK, r3
}
 8002ae4:	46c0      	nop			; (mov r8, r8)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	689a      	ldr	r2, [r3, #8]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	2101      	movs	r1, #1
 8002af2:	438a      	bics	r2, r1
 8002af4:	609a      	str	r2, [r3, #8]
 8002af6:	193b      	adds	r3, r7, r4
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002afc:	6a3b      	ldr	r3, [r7, #32]
 8002afe:	f383 8810 	msr	PRIMASK, r3
}
 8002b02:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2280      	movs	r2, #128	; 0x80
 8002b08:	2120      	movs	r1, #32
 8002b0a:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2200      	movs	r2, #0
 8002b16:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b18:	f3ef 8310 	mrs	r3, PRIMASK
 8002b1c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b20:	2480      	movs	r4, #128	; 0x80
 8002b22:	193a      	adds	r2, r7, r4
 8002b24:	6013      	str	r3, [r2, #0]
 8002b26:	2301      	movs	r3, #1
 8002b28:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b2c:	f383 8810 	msr	PRIMASK, r3
}
 8002b30:	46c0      	nop			; (mov r8, r8)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	2110      	movs	r1, #16
 8002b3e:	438a      	bics	r2, r1
 8002b40:	601a      	str	r2, [r3, #0]
 8002b42:	193b      	adds	r3, r7, r4
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b4a:	f383 8810 	msr	PRIMASK, r3
}
 8002b4e:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2202      	movs	r2, #2
 8002b54:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002b56:	183b      	adds	r3, r7, r0
 8002b58:	881a      	ldrh	r2, [r3, #0]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	0011      	movs	r1, r2
 8002b5e:	0018      	movs	r0, r3
 8002b60:	f000 f848 	bl	8002bf4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002b64:	e02c      	b.n	8002bc0 <HAL_UART_IRQHandler+0x57c>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002b66:	23a4      	movs	r3, #164	; 0xa4
 8002b68:	18fb      	adds	r3, r7, r3
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	2280      	movs	r2, #128	; 0x80
 8002b6e:	4013      	ands	r3, r2
 8002b70:	d00f      	beq.n	8002b92 <HAL_UART_IRQHandler+0x54e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002b72:	23a0      	movs	r3, #160	; 0xa0
 8002b74:	18fb      	adds	r3, r7, r3
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	2280      	movs	r2, #128	; 0x80
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	d009      	beq.n	8002b92 <HAL_UART_IRQHandler+0x54e>
  {
    if (huart->TxISR != NULL)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d01e      	beq.n	8002bc4 <HAL_UART_IRQHandler+0x580>
    {
      huart->TxISR(huart);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b8a:	687a      	ldr	r2, [r7, #4]
 8002b8c:	0010      	movs	r0, r2
 8002b8e:	4798      	blx	r3
    }
    return;
 8002b90:	e018      	b.n	8002bc4 <HAL_UART_IRQHandler+0x580>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002b92:	23a4      	movs	r3, #164	; 0xa4
 8002b94:	18fb      	adds	r3, r7, r3
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	2240      	movs	r2, #64	; 0x40
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	d013      	beq.n	8002bc6 <HAL_UART_IRQHandler+0x582>
 8002b9e:	23a0      	movs	r3, #160	; 0xa0
 8002ba0:	18fb      	adds	r3, r7, r3
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	2240      	movs	r2, #64	; 0x40
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	d00d      	beq.n	8002bc6 <HAL_UART_IRQHandler+0x582>
  {
    UART_EndTransmit_IT(huart);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	0018      	movs	r0, r3
 8002bae:	f000 fc4c 	bl	800344a <UART_EndTransmit_IT>
    return;
 8002bb2:	e008      	b.n	8002bc6 <HAL_UART_IRQHandler+0x582>
      return;
 8002bb4:	46c0      	nop			; (mov r8, r8)
 8002bb6:	e006      	b.n	8002bc6 <HAL_UART_IRQHandler+0x582>
    return;
 8002bb8:	46c0      	nop			; (mov r8, r8)
 8002bba:	e004      	b.n	8002bc6 <HAL_UART_IRQHandler+0x582>
      return;
 8002bbc:	46c0      	nop			; (mov r8, r8)
 8002bbe:	e002      	b.n	8002bc6 <HAL_UART_IRQHandler+0x582>
      return;
 8002bc0:	46c0      	nop			; (mov r8, r8)
 8002bc2:	e000      	b.n	8002bc6 <HAL_UART_IRQHandler+0x582>
    return;
 8002bc4:	46c0      	nop			; (mov r8, r8)
  }

}
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	b02b      	add	sp, #172	; 0xac
 8002bca:	bd90      	pop	{r4, r7, pc}
 8002bcc:	fffffeff 	.word	0xfffffeff
 8002bd0:	fffffedf 	.word	0xfffffedf

08002bd4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b082      	sub	sp, #8
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002bdc:	46c0      	nop			; (mov r8, r8)
 8002bde:	46bd      	mov	sp, r7
 8002be0:	b002      	add	sp, #8
 8002be2:	bd80      	pop	{r7, pc}

08002be4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b082      	sub	sp, #8
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002bec:	46c0      	nop			; (mov r8, r8)
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	b002      	add	sp, #8
 8002bf2:	bd80      	pop	{r7, pc}

08002bf4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b082      	sub	sp, #8
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
 8002bfc:	000a      	movs	r2, r1
 8002bfe:	1cbb      	adds	r3, r7, #2
 8002c00:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002c02:	46c0      	nop			; (mov r8, r8)
 8002c04:	46bd      	mov	sp, r7
 8002c06:	b002      	add	sp, #8
 8002c08:	bd80      	pop	{r7, pc}
	...

08002c0c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b088      	sub	sp, #32
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002c14:	231e      	movs	r3, #30
 8002c16:	18fb      	adds	r3, r7, r3
 8002c18:	2200      	movs	r2, #0
 8002c1a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	689a      	ldr	r2, [r3, #8]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	691b      	ldr	r3, [r3, #16]
 8002c24:	431a      	orrs	r2, r3
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	695b      	ldr	r3, [r3, #20]
 8002c2a:	431a      	orrs	r2, r3
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	69db      	ldr	r3, [r3, #28]
 8002c30:	4313      	orrs	r3, r2
 8002c32:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a83      	ldr	r2, [pc, #524]	; (8002e48 <UART_SetConfig+0x23c>)
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	0019      	movs	r1, r3
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	697a      	ldr	r2, [r7, #20]
 8002c46:	430a      	orrs	r2, r1
 8002c48:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	4a7e      	ldr	r2, [pc, #504]	; (8002e4c <UART_SetConfig+0x240>)
 8002c52:	4013      	ands	r3, r2
 8002c54:	0019      	movs	r1, r3
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	68da      	ldr	r2, [r3, #12]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	430a      	orrs	r2, r1
 8002c60:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	699b      	ldr	r3, [r3, #24]
 8002c66:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6a1b      	ldr	r3, [r3, #32]
 8002c6c:	697a      	ldr	r2, [r7, #20]
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	4a75      	ldr	r2, [pc, #468]	; (8002e50 <UART_SetConfig+0x244>)
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	0019      	movs	r1, r3
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	697a      	ldr	r2, [r7, #20]
 8002c84:	430a      	orrs	r2, r1
 8002c86:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002c88:	4b72      	ldr	r3, [pc, #456]	; (8002e54 <UART_SetConfig+0x248>)
 8002c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c8c:	2203      	movs	r2, #3
 8002c8e:	4013      	ands	r3, r2
 8002c90:	2b03      	cmp	r3, #3
 8002c92:	d00d      	beq.n	8002cb0 <UART_SetConfig+0xa4>
 8002c94:	d81b      	bhi.n	8002cce <UART_SetConfig+0xc2>
 8002c96:	2b02      	cmp	r3, #2
 8002c98:	d014      	beq.n	8002cc4 <UART_SetConfig+0xb8>
 8002c9a:	d818      	bhi.n	8002cce <UART_SetConfig+0xc2>
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d002      	beq.n	8002ca6 <UART_SetConfig+0x9a>
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d00a      	beq.n	8002cba <UART_SetConfig+0xae>
 8002ca4:	e013      	b.n	8002cce <UART_SetConfig+0xc2>
 8002ca6:	231f      	movs	r3, #31
 8002ca8:	18fb      	adds	r3, r7, r3
 8002caa:	2200      	movs	r2, #0
 8002cac:	701a      	strb	r2, [r3, #0]
 8002cae:	e012      	b.n	8002cd6 <UART_SetConfig+0xca>
 8002cb0:	231f      	movs	r3, #31
 8002cb2:	18fb      	adds	r3, r7, r3
 8002cb4:	2202      	movs	r2, #2
 8002cb6:	701a      	strb	r2, [r3, #0]
 8002cb8:	e00d      	b.n	8002cd6 <UART_SetConfig+0xca>
 8002cba:	231f      	movs	r3, #31
 8002cbc:	18fb      	adds	r3, r7, r3
 8002cbe:	2204      	movs	r2, #4
 8002cc0:	701a      	strb	r2, [r3, #0]
 8002cc2:	e008      	b.n	8002cd6 <UART_SetConfig+0xca>
 8002cc4:	231f      	movs	r3, #31
 8002cc6:	18fb      	adds	r3, r7, r3
 8002cc8:	2208      	movs	r2, #8
 8002cca:	701a      	strb	r2, [r3, #0]
 8002ccc:	e003      	b.n	8002cd6 <UART_SetConfig+0xca>
 8002cce:	231f      	movs	r3, #31
 8002cd0:	18fb      	adds	r3, r7, r3
 8002cd2:	2210      	movs	r2, #16
 8002cd4:	701a      	strb	r2, [r3, #0]
 8002cd6:	46c0      	nop			; (mov r8, r8)

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	69da      	ldr	r2, [r3, #28]
 8002cdc:	2380      	movs	r3, #128	; 0x80
 8002cde:	021b      	lsls	r3, r3, #8
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d15c      	bne.n	8002d9e <UART_SetConfig+0x192>
  {
    switch (clocksource)
 8002ce4:	231f      	movs	r3, #31
 8002ce6:	18fb      	adds	r3, r7, r3
 8002ce8:	781b      	ldrb	r3, [r3, #0]
 8002cea:	2b08      	cmp	r3, #8
 8002cec:	d015      	beq.n	8002d1a <UART_SetConfig+0x10e>
 8002cee:	dc18      	bgt.n	8002d22 <UART_SetConfig+0x116>
 8002cf0:	2b04      	cmp	r3, #4
 8002cf2:	d00d      	beq.n	8002d10 <UART_SetConfig+0x104>
 8002cf4:	dc15      	bgt.n	8002d22 <UART_SetConfig+0x116>
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d002      	beq.n	8002d00 <UART_SetConfig+0xf4>
 8002cfa:	2b02      	cmp	r3, #2
 8002cfc:	d005      	beq.n	8002d0a <UART_SetConfig+0xfe>
 8002cfe:	e010      	b.n	8002d22 <UART_SetConfig+0x116>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d00:	f7ff f828 	bl	8001d54 <HAL_RCC_GetPCLK1Freq>
 8002d04:	0003      	movs	r3, r0
 8002d06:	61bb      	str	r3, [r7, #24]
        break;
 8002d08:	e012      	b.n	8002d30 <UART_SetConfig+0x124>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002d0a:	4b53      	ldr	r3, [pc, #332]	; (8002e58 <UART_SetConfig+0x24c>)
 8002d0c:	61bb      	str	r3, [r7, #24]
        break;
 8002d0e:	e00f      	b.n	8002d30 <UART_SetConfig+0x124>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d10:	f7fe ffc0 	bl	8001c94 <HAL_RCC_GetSysClockFreq>
 8002d14:	0003      	movs	r3, r0
 8002d16:	61bb      	str	r3, [r7, #24]
        break;
 8002d18:	e00a      	b.n	8002d30 <UART_SetConfig+0x124>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d1a:	2380      	movs	r3, #128	; 0x80
 8002d1c:	021b      	lsls	r3, r3, #8
 8002d1e:	61bb      	str	r3, [r7, #24]
        break;
 8002d20:	e006      	b.n	8002d30 <UART_SetConfig+0x124>
      default:
        pclk = 0U;
 8002d22:	2300      	movs	r3, #0
 8002d24:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002d26:	231e      	movs	r3, #30
 8002d28:	18fb      	adds	r3, r7, r3
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	701a      	strb	r2, [r3, #0]
        break;
 8002d2e:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002d30:	69bb      	ldr	r3, [r7, #24]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d100      	bne.n	8002d38 <UART_SetConfig+0x12c>
 8002d36:	e07a      	b.n	8002e2e <UART_SetConfig+0x222>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002d38:	69bb      	ldr	r3, [r7, #24]
 8002d3a:	005a      	lsls	r2, r3, #1
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	085b      	lsrs	r3, r3, #1
 8002d42:	18d2      	adds	r2, r2, r3
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	0019      	movs	r1, r3
 8002d4a:	0010      	movs	r0, r2
 8002d4c:	f7fd f9dc 	bl	8000108 <__udivsi3>
 8002d50:	0003      	movs	r3, r0
 8002d52:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	2b0f      	cmp	r3, #15
 8002d58:	d91c      	bls.n	8002d94 <UART_SetConfig+0x188>
 8002d5a:	693a      	ldr	r2, [r7, #16]
 8002d5c:	2380      	movs	r3, #128	; 0x80
 8002d5e:	025b      	lsls	r3, r3, #9
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d217      	bcs.n	8002d94 <UART_SetConfig+0x188>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	b29a      	uxth	r2, r3
 8002d68:	200e      	movs	r0, #14
 8002d6a:	183b      	adds	r3, r7, r0
 8002d6c:	210f      	movs	r1, #15
 8002d6e:	438a      	bics	r2, r1
 8002d70:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	085b      	lsrs	r3, r3, #1
 8002d76:	b29b      	uxth	r3, r3
 8002d78:	2207      	movs	r2, #7
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	b299      	uxth	r1, r3
 8002d7e:	183b      	adds	r3, r7, r0
 8002d80:	183a      	adds	r2, r7, r0
 8002d82:	8812      	ldrh	r2, [r2, #0]
 8002d84:	430a      	orrs	r2, r1
 8002d86:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	183a      	adds	r2, r7, r0
 8002d8e:	8812      	ldrh	r2, [r2, #0]
 8002d90:	60da      	str	r2, [r3, #12]
 8002d92:	e04c      	b.n	8002e2e <UART_SetConfig+0x222>
      }
      else
      {
        ret = HAL_ERROR;
 8002d94:	231e      	movs	r3, #30
 8002d96:	18fb      	adds	r3, r7, r3
 8002d98:	2201      	movs	r2, #1
 8002d9a:	701a      	strb	r2, [r3, #0]
 8002d9c:	e047      	b.n	8002e2e <UART_SetConfig+0x222>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002d9e:	231f      	movs	r3, #31
 8002da0:	18fb      	adds	r3, r7, r3
 8002da2:	781b      	ldrb	r3, [r3, #0]
 8002da4:	2b08      	cmp	r3, #8
 8002da6:	d015      	beq.n	8002dd4 <UART_SetConfig+0x1c8>
 8002da8:	dc18      	bgt.n	8002ddc <UART_SetConfig+0x1d0>
 8002daa:	2b04      	cmp	r3, #4
 8002dac:	d00d      	beq.n	8002dca <UART_SetConfig+0x1be>
 8002dae:	dc15      	bgt.n	8002ddc <UART_SetConfig+0x1d0>
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d002      	beq.n	8002dba <UART_SetConfig+0x1ae>
 8002db4:	2b02      	cmp	r3, #2
 8002db6:	d005      	beq.n	8002dc4 <UART_SetConfig+0x1b8>
 8002db8:	e010      	b.n	8002ddc <UART_SetConfig+0x1d0>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002dba:	f7fe ffcb 	bl	8001d54 <HAL_RCC_GetPCLK1Freq>
 8002dbe:	0003      	movs	r3, r0
 8002dc0:	61bb      	str	r3, [r7, #24]
        break;
 8002dc2:	e012      	b.n	8002dea <UART_SetConfig+0x1de>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002dc4:	4b24      	ldr	r3, [pc, #144]	; (8002e58 <UART_SetConfig+0x24c>)
 8002dc6:	61bb      	str	r3, [r7, #24]
        break;
 8002dc8:	e00f      	b.n	8002dea <UART_SetConfig+0x1de>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002dca:	f7fe ff63 	bl	8001c94 <HAL_RCC_GetSysClockFreq>
 8002dce:	0003      	movs	r3, r0
 8002dd0:	61bb      	str	r3, [r7, #24]
        break;
 8002dd2:	e00a      	b.n	8002dea <UART_SetConfig+0x1de>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002dd4:	2380      	movs	r3, #128	; 0x80
 8002dd6:	021b      	lsls	r3, r3, #8
 8002dd8:	61bb      	str	r3, [r7, #24]
        break;
 8002dda:	e006      	b.n	8002dea <UART_SetConfig+0x1de>
      default:
        pclk = 0U;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002de0:	231e      	movs	r3, #30
 8002de2:	18fb      	adds	r3, r7, r3
 8002de4:	2201      	movs	r2, #1
 8002de6:	701a      	strb	r2, [r3, #0]
        break;
 8002de8:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002dea:	69bb      	ldr	r3, [r7, #24]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d01e      	beq.n	8002e2e <UART_SetConfig+0x222>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	085a      	lsrs	r2, r3, #1
 8002df6:	69bb      	ldr	r3, [r7, #24]
 8002df8:	18d2      	adds	r2, r2, r3
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	0019      	movs	r1, r3
 8002e00:	0010      	movs	r0, r2
 8002e02:	f7fd f981 	bl	8000108 <__udivsi3>
 8002e06:	0003      	movs	r3, r0
 8002e08:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	2b0f      	cmp	r3, #15
 8002e0e:	d90a      	bls.n	8002e26 <UART_SetConfig+0x21a>
 8002e10:	693a      	ldr	r2, [r7, #16]
 8002e12:	2380      	movs	r3, #128	; 0x80
 8002e14:	025b      	lsls	r3, r3, #9
 8002e16:	429a      	cmp	r2, r3
 8002e18:	d205      	bcs.n	8002e26 <UART_SetConfig+0x21a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	b29a      	uxth	r2, r3
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	60da      	str	r2, [r3, #12]
 8002e24:	e003      	b.n	8002e2e <UART_SetConfig+0x222>
      }
      else
      {
        ret = HAL_ERROR;
 8002e26:	231e      	movs	r3, #30
 8002e28:	18fb      	adds	r3, r7, r3
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2200      	movs	r2, #0
 8002e32:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2200      	movs	r2, #0
 8002e38:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002e3a:	231e      	movs	r3, #30
 8002e3c:	18fb      	adds	r3, r7, r3
 8002e3e:	781b      	ldrb	r3, [r3, #0]
}
 8002e40:	0018      	movs	r0, r3
 8002e42:	46bd      	mov	sp, r7
 8002e44:	b008      	add	sp, #32
 8002e46:	bd80      	pop	{r7, pc}
 8002e48:	ffff69f3 	.word	0xffff69f3
 8002e4c:	ffffcfff 	.word	0xffffcfff
 8002e50:	fffff4ff 	.word	0xfffff4ff
 8002e54:	40021000 	.word	0x40021000
 8002e58:	007a1200 	.word	0x007a1200

08002e5c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b082      	sub	sp, #8
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e68:	2201      	movs	r2, #1
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	d00b      	beq.n	8002e86 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	4a4a      	ldr	r2, [pc, #296]	; (8002fa0 <UART_AdvFeatureConfig+0x144>)
 8002e76:	4013      	ands	r3, r2
 8002e78:	0019      	movs	r1, r3
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	430a      	orrs	r2, r1
 8002e84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e8a:	2202      	movs	r2, #2
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	d00b      	beq.n	8002ea8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	4a43      	ldr	r2, [pc, #268]	; (8002fa4 <UART_AdvFeatureConfig+0x148>)
 8002e98:	4013      	ands	r3, r2
 8002e9a:	0019      	movs	r1, r3
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	430a      	orrs	r2, r1
 8002ea6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eac:	2204      	movs	r2, #4
 8002eae:	4013      	ands	r3, r2
 8002eb0:	d00b      	beq.n	8002eca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	4a3b      	ldr	r2, [pc, #236]	; (8002fa8 <UART_AdvFeatureConfig+0x14c>)
 8002eba:	4013      	ands	r3, r2
 8002ebc:	0019      	movs	r1, r3
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	430a      	orrs	r2, r1
 8002ec8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ece:	2208      	movs	r2, #8
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	d00b      	beq.n	8002eec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	4a34      	ldr	r2, [pc, #208]	; (8002fac <UART_AdvFeatureConfig+0x150>)
 8002edc:	4013      	ands	r3, r2
 8002ede:	0019      	movs	r1, r3
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	430a      	orrs	r2, r1
 8002eea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef0:	2210      	movs	r2, #16
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	d00b      	beq.n	8002f0e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	4a2c      	ldr	r2, [pc, #176]	; (8002fb0 <UART_AdvFeatureConfig+0x154>)
 8002efe:	4013      	ands	r3, r2
 8002f00:	0019      	movs	r1, r3
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	430a      	orrs	r2, r1
 8002f0c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f12:	2220      	movs	r2, #32
 8002f14:	4013      	ands	r3, r2
 8002f16:	d00b      	beq.n	8002f30 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	4a25      	ldr	r2, [pc, #148]	; (8002fb4 <UART_AdvFeatureConfig+0x158>)
 8002f20:	4013      	ands	r3, r2
 8002f22:	0019      	movs	r1, r3
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	430a      	orrs	r2, r1
 8002f2e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f34:	2240      	movs	r2, #64	; 0x40
 8002f36:	4013      	ands	r3, r2
 8002f38:	d01d      	beq.n	8002f76 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	4a1d      	ldr	r2, [pc, #116]	; (8002fb8 <UART_AdvFeatureConfig+0x15c>)
 8002f42:	4013      	ands	r3, r2
 8002f44:	0019      	movs	r1, r3
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	430a      	orrs	r2, r1
 8002f50:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f56:	2380      	movs	r3, #128	; 0x80
 8002f58:	035b      	lsls	r3, r3, #13
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d10b      	bne.n	8002f76 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	4a15      	ldr	r2, [pc, #84]	; (8002fbc <UART_AdvFeatureConfig+0x160>)
 8002f66:	4013      	ands	r3, r2
 8002f68:	0019      	movs	r1, r3
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	430a      	orrs	r2, r1
 8002f74:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f7a:	2280      	movs	r2, #128	; 0x80
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	d00b      	beq.n	8002f98 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	4a0e      	ldr	r2, [pc, #56]	; (8002fc0 <UART_AdvFeatureConfig+0x164>)
 8002f88:	4013      	ands	r3, r2
 8002f8a:	0019      	movs	r1, r3
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	430a      	orrs	r2, r1
 8002f96:	605a      	str	r2, [r3, #4]
  }
}
 8002f98:	46c0      	nop			; (mov r8, r8)
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	b002      	add	sp, #8
 8002f9e:	bd80      	pop	{r7, pc}
 8002fa0:	fffdffff 	.word	0xfffdffff
 8002fa4:	fffeffff 	.word	0xfffeffff
 8002fa8:	fffbffff 	.word	0xfffbffff
 8002fac:	ffff7fff 	.word	0xffff7fff
 8002fb0:	ffffefff 	.word	0xffffefff
 8002fb4:	ffffdfff 	.word	0xffffdfff
 8002fb8:	ffefffff 	.word	0xffefffff
 8002fbc:	ff9fffff 	.word	0xff9fffff
 8002fc0:	fff7ffff 	.word	0xfff7ffff

08002fc4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b092      	sub	sp, #72	; 0x48
 8002fc8:	af02      	add	r7, sp, #8
 8002fca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2284      	movs	r2, #132	; 0x84
 8002fd0:	2100      	movs	r1, #0
 8002fd2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002fd4:	f7fd ff42 	bl	8000e5c <HAL_GetTick>
 8002fd8:	0003      	movs	r3, r0
 8002fda:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	2208      	movs	r2, #8
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	2b08      	cmp	r3, #8
 8002fe8:	d12c      	bne.n	8003044 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002fea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fec:	2280      	movs	r2, #128	; 0x80
 8002fee:	0391      	lsls	r1, r2, #14
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	4a46      	ldr	r2, [pc, #280]	; (800310c <UART_CheckIdleState+0x148>)
 8002ff4:	9200      	str	r2, [sp, #0]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	f000 f88c 	bl	8003114 <UART_WaitOnFlagUntilTimeout>
 8002ffc:	1e03      	subs	r3, r0, #0
 8002ffe:	d021      	beq.n	8003044 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003000:	f3ef 8310 	mrs	r3, PRIMASK
 8003004:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003008:	63bb      	str	r3, [r7, #56]	; 0x38
 800300a:	2301      	movs	r3, #1
 800300c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800300e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003010:	f383 8810 	msr	PRIMASK, r3
}
 8003014:	46c0      	nop			; (mov r8, r8)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	2180      	movs	r1, #128	; 0x80
 8003022:	438a      	bics	r2, r1
 8003024:	601a      	str	r2, [r3, #0]
 8003026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003028:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800302a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800302c:	f383 8810 	msr	PRIMASK, r3
}
 8003030:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2220      	movs	r2, #32
 8003036:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2278      	movs	r2, #120	; 0x78
 800303c:	2100      	movs	r1, #0
 800303e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003040:	2303      	movs	r3, #3
 8003042:	e05f      	b.n	8003104 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	2204      	movs	r2, #4
 800304c:	4013      	ands	r3, r2
 800304e:	2b04      	cmp	r3, #4
 8003050:	d146      	bne.n	80030e0 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003052:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003054:	2280      	movs	r2, #128	; 0x80
 8003056:	03d1      	lsls	r1, r2, #15
 8003058:	6878      	ldr	r0, [r7, #4]
 800305a:	4a2c      	ldr	r2, [pc, #176]	; (800310c <UART_CheckIdleState+0x148>)
 800305c:	9200      	str	r2, [sp, #0]
 800305e:	2200      	movs	r2, #0
 8003060:	f000 f858 	bl	8003114 <UART_WaitOnFlagUntilTimeout>
 8003064:	1e03      	subs	r3, r0, #0
 8003066:	d03b      	beq.n	80030e0 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003068:	f3ef 8310 	mrs	r3, PRIMASK
 800306c:	60fb      	str	r3, [r7, #12]
  return(result);
 800306e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003070:	637b      	str	r3, [r7, #52]	; 0x34
 8003072:	2301      	movs	r3, #1
 8003074:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	f383 8810 	msr	PRIMASK, r3
}
 800307c:	46c0      	nop			; (mov r8, r8)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4921      	ldr	r1, [pc, #132]	; (8003110 <UART_CheckIdleState+0x14c>)
 800308a:	400a      	ands	r2, r1
 800308c:	601a      	str	r2, [r3, #0]
 800308e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003090:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	f383 8810 	msr	PRIMASK, r3
}
 8003098:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800309a:	f3ef 8310 	mrs	r3, PRIMASK
 800309e:	61bb      	str	r3, [r7, #24]
  return(result);
 80030a0:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030a2:	633b      	str	r3, [r7, #48]	; 0x30
 80030a4:	2301      	movs	r3, #1
 80030a6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030a8:	69fb      	ldr	r3, [r7, #28]
 80030aa:	f383 8810 	msr	PRIMASK, r3
}
 80030ae:	46c0      	nop			; (mov r8, r8)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	689a      	ldr	r2, [r3, #8]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	2101      	movs	r1, #1
 80030bc:	438a      	bics	r2, r1
 80030be:	609a      	str	r2, [r3, #8]
 80030c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030c2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030c4:	6a3b      	ldr	r3, [r7, #32]
 80030c6:	f383 8810 	msr	PRIMASK, r3
}
 80030ca:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2280      	movs	r2, #128	; 0x80
 80030d0:	2120      	movs	r1, #32
 80030d2:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2278      	movs	r2, #120	; 0x78
 80030d8:	2100      	movs	r1, #0
 80030da:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80030dc:	2303      	movs	r3, #3
 80030de:	e011      	b.n	8003104 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2220      	movs	r2, #32
 80030e4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2280      	movs	r2, #128	; 0x80
 80030ea:	2120      	movs	r1, #32
 80030ec:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2200      	movs	r2, #0
 80030f2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2200      	movs	r2, #0
 80030f8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2278      	movs	r2, #120	; 0x78
 80030fe:	2100      	movs	r1, #0
 8003100:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003102:	2300      	movs	r3, #0
}
 8003104:	0018      	movs	r0, r3
 8003106:	46bd      	mov	sp, r7
 8003108:	b010      	add	sp, #64	; 0x40
 800310a:	bd80      	pop	{r7, pc}
 800310c:	01ffffff 	.word	0x01ffffff
 8003110:	fffffedf 	.word	0xfffffedf

08003114 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b084      	sub	sp, #16
 8003118:	af00      	add	r7, sp, #0
 800311a:	60f8      	str	r0, [r7, #12]
 800311c:	60b9      	str	r1, [r7, #8]
 800311e:	603b      	str	r3, [r7, #0]
 8003120:	1dfb      	adds	r3, r7, #7
 8003122:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003124:	e04b      	b.n	80031be <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003126:	69bb      	ldr	r3, [r7, #24]
 8003128:	3301      	adds	r3, #1
 800312a:	d048      	beq.n	80031be <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800312c:	f7fd fe96 	bl	8000e5c <HAL_GetTick>
 8003130:	0002      	movs	r2, r0
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	1ad3      	subs	r3, r2, r3
 8003136:	69ba      	ldr	r2, [r7, #24]
 8003138:	429a      	cmp	r2, r3
 800313a:	d302      	bcc.n	8003142 <UART_WaitOnFlagUntilTimeout+0x2e>
 800313c:	69bb      	ldr	r3, [r7, #24]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d101      	bne.n	8003146 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003142:	2303      	movs	r3, #3
 8003144:	e04b      	b.n	80031de <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	2204      	movs	r2, #4
 800314e:	4013      	ands	r3, r2
 8003150:	d035      	beq.n	80031be <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	69db      	ldr	r3, [r3, #28]
 8003158:	2208      	movs	r2, #8
 800315a:	4013      	ands	r3, r2
 800315c:	2b08      	cmp	r3, #8
 800315e:	d111      	bne.n	8003184 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	2208      	movs	r2, #8
 8003166:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	0018      	movs	r0, r3
 800316c:	f000 f8f2 	bl	8003354 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2284      	movs	r2, #132	; 0x84
 8003174:	2108      	movs	r1, #8
 8003176:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2278      	movs	r2, #120	; 0x78
 800317c:	2100      	movs	r1, #0
 800317e:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	e02c      	b.n	80031de <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	69da      	ldr	r2, [r3, #28]
 800318a:	2380      	movs	r3, #128	; 0x80
 800318c:	011b      	lsls	r3, r3, #4
 800318e:	401a      	ands	r2, r3
 8003190:	2380      	movs	r3, #128	; 0x80
 8003192:	011b      	lsls	r3, r3, #4
 8003194:	429a      	cmp	r2, r3
 8003196:	d112      	bne.n	80031be <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	2280      	movs	r2, #128	; 0x80
 800319e:	0112      	lsls	r2, r2, #4
 80031a0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	0018      	movs	r0, r3
 80031a6:	f000 f8d5 	bl	8003354 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2284      	movs	r2, #132	; 0x84
 80031ae:	2120      	movs	r1, #32
 80031b0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2278      	movs	r2, #120	; 0x78
 80031b6:	2100      	movs	r1, #0
 80031b8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80031ba:	2303      	movs	r3, #3
 80031bc:	e00f      	b.n	80031de <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	69db      	ldr	r3, [r3, #28]
 80031c4:	68ba      	ldr	r2, [r7, #8]
 80031c6:	4013      	ands	r3, r2
 80031c8:	68ba      	ldr	r2, [r7, #8]
 80031ca:	1ad3      	subs	r3, r2, r3
 80031cc:	425a      	negs	r2, r3
 80031ce:	4153      	adcs	r3, r2
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	001a      	movs	r2, r3
 80031d4:	1dfb      	adds	r3, r7, #7
 80031d6:	781b      	ldrb	r3, [r3, #0]
 80031d8:	429a      	cmp	r2, r3
 80031da:	d0a4      	beq.n	8003126 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80031dc:	2300      	movs	r3, #0
}
 80031de:	0018      	movs	r0, r3
 80031e0:	46bd      	mov	sp, r7
 80031e2:	b004      	add	sp, #16
 80031e4:	bd80      	pop	{r7, pc}
	...

080031e8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b090      	sub	sp, #64	; 0x40
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	60f8      	str	r0, [r7, #12]
 80031f0:	60b9      	str	r1, [r7, #8]
 80031f2:	1dbb      	adds	r3, r7, #6
 80031f4:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	68ba      	ldr	r2, [r7, #8]
 80031fa:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	1dba      	adds	r2, r7, #6
 8003200:	2158      	movs	r1, #88	; 0x58
 8003202:	8812      	ldrh	r2, [r2, #0]
 8003204:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	1dba      	adds	r2, r7, #6
 800320a:	215a      	movs	r1, #90	; 0x5a
 800320c:	8812      	ldrh	r2, [r2, #0]
 800320e:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2200      	movs	r2, #0
 8003214:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	689a      	ldr	r2, [r3, #8]
 800321a:	2380      	movs	r3, #128	; 0x80
 800321c:	015b      	lsls	r3, r3, #5
 800321e:	429a      	cmp	r2, r3
 8003220:	d10d      	bne.n	800323e <UART_Start_Receive_IT+0x56>
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	691b      	ldr	r3, [r3, #16]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d104      	bne.n	8003234 <UART_Start_Receive_IT+0x4c>
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	225c      	movs	r2, #92	; 0x5c
 800322e:	4946      	ldr	r1, [pc, #280]	; (8003348 <UART_Start_Receive_IT+0x160>)
 8003230:	5299      	strh	r1, [r3, r2]
 8003232:	e01a      	b.n	800326a <UART_Start_Receive_IT+0x82>
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	225c      	movs	r2, #92	; 0x5c
 8003238:	21ff      	movs	r1, #255	; 0xff
 800323a:	5299      	strh	r1, [r3, r2]
 800323c:	e015      	b.n	800326a <UART_Start_Receive_IT+0x82>
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d10d      	bne.n	8003262 <UART_Start_Receive_IT+0x7a>
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	691b      	ldr	r3, [r3, #16]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d104      	bne.n	8003258 <UART_Start_Receive_IT+0x70>
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	225c      	movs	r2, #92	; 0x5c
 8003252:	21ff      	movs	r1, #255	; 0xff
 8003254:	5299      	strh	r1, [r3, r2]
 8003256:	e008      	b.n	800326a <UART_Start_Receive_IT+0x82>
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	225c      	movs	r2, #92	; 0x5c
 800325c:	217f      	movs	r1, #127	; 0x7f
 800325e:	5299      	strh	r1, [r3, r2]
 8003260:	e003      	b.n	800326a <UART_Start_Receive_IT+0x82>
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	225c      	movs	r2, #92	; 0x5c
 8003266:	2100      	movs	r1, #0
 8003268:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2284      	movs	r2, #132	; 0x84
 800326e:	2100      	movs	r1, #0
 8003270:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2280      	movs	r2, #128	; 0x80
 8003276:	2122      	movs	r1, #34	; 0x22
 8003278:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800327a:	f3ef 8310 	mrs	r3, PRIMASK
 800327e:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003280:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003282:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003284:	2301      	movs	r3, #1
 8003286:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800328a:	f383 8810 	msr	PRIMASK, r3
}
 800328e:	46c0      	nop			; (mov r8, r8)
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	689a      	ldr	r2, [r3, #8]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	2101      	movs	r1, #1
 800329c:	430a      	orrs	r2, r1
 800329e:	609a      	str	r2, [r3, #8]
 80032a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032a2:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032a6:	f383 8810 	msr	PRIMASK, r3
}
 80032aa:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	689a      	ldr	r2, [r3, #8]
 80032b0:	2380      	movs	r3, #128	; 0x80
 80032b2:	015b      	lsls	r3, r3, #5
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d107      	bne.n	80032c8 <UART_Start_Receive_IT+0xe0>
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	691b      	ldr	r3, [r3, #16]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d103      	bne.n	80032c8 <UART_Start_Receive_IT+0xe0>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	4a22      	ldr	r2, [pc, #136]	; (800334c <UART_Start_Receive_IT+0x164>)
 80032c4:	669a      	str	r2, [r3, #104]	; 0x68
 80032c6:	e002      	b.n	80032ce <UART_Start_Receive_IT+0xe6>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	4a21      	ldr	r2, [pc, #132]	; (8003350 <UART_Start_Receive_IT+0x168>)
 80032cc:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	691b      	ldr	r3, [r3, #16]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d019      	beq.n	800330a <UART_Start_Receive_IT+0x122>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032d6:	f3ef 8310 	mrs	r3, PRIMASK
 80032da:	61fb      	str	r3, [r7, #28]
  return(result);
 80032dc:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80032de:	637b      	str	r3, [r7, #52]	; 0x34
 80032e0:	2301      	movs	r3, #1
 80032e2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032e4:	6a3b      	ldr	r3, [r7, #32]
 80032e6:	f383 8810 	msr	PRIMASK, r3
}
 80032ea:	46c0      	nop			; (mov r8, r8)
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	2190      	movs	r1, #144	; 0x90
 80032f8:	0049      	lsls	r1, r1, #1
 80032fa:	430a      	orrs	r2, r1
 80032fc:	601a      	str	r2, [r3, #0]
 80032fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003300:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003304:	f383 8810 	msr	PRIMASK, r3
}
 8003308:	e018      	b.n	800333c <UART_Start_Receive_IT+0x154>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800330a:	f3ef 8310 	mrs	r3, PRIMASK
 800330e:	613b      	str	r3, [r7, #16]
  return(result);
 8003310:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003312:	63bb      	str	r3, [r7, #56]	; 0x38
 8003314:	2301      	movs	r3, #1
 8003316:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	f383 8810 	msr	PRIMASK, r3
}
 800331e:	46c0      	nop			; (mov r8, r8)
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	2120      	movs	r1, #32
 800332c:	430a      	orrs	r2, r1
 800332e:	601a      	str	r2, [r3, #0]
 8003330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003332:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003334:	69bb      	ldr	r3, [r7, #24]
 8003336:	f383 8810 	msr	PRIMASK, r3
}
 800333a:	46c0      	nop			; (mov r8, r8)
  }
  return HAL_OK;
 800333c:	2300      	movs	r3, #0
}
 800333e:	0018      	movs	r0, r3
 8003340:	46bd      	mov	sp, r7
 8003342:	b010      	add	sp, #64	; 0x40
 8003344:	bd80      	pop	{r7, pc}
 8003346:	46c0      	nop			; (mov r8, r8)
 8003348:	000001ff 	.word	0x000001ff
 800334c:	08003659 	.word	0x08003659
 8003350:	080034a1 	.word	0x080034a1

08003354 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b08e      	sub	sp, #56	; 0x38
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800335c:	f3ef 8310 	mrs	r3, PRIMASK
 8003360:	617b      	str	r3, [r7, #20]
  return(result);
 8003362:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003364:	637b      	str	r3, [r7, #52]	; 0x34
 8003366:	2301      	movs	r3, #1
 8003368:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800336a:	69bb      	ldr	r3, [r7, #24]
 800336c:	f383 8810 	msr	PRIMASK, r3
}
 8003370:	46c0      	nop			; (mov r8, r8)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4926      	ldr	r1, [pc, #152]	; (8003418 <UART_EndRxTransfer+0xc4>)
 800337e:	400a      	ands	r2, r1
 8003380:	601a      	str	r2, [r3, #0]
 8003382:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003384:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003386:	69fb      	ldr	r3, [r7, #28]
 8003388:	f383 8810 	msr	PRIMASK, r3
}
 800338c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800338e:	f3ef 8310 	mrs	r3, PRIMASK
 8003392:	623b      	str	r3, [r7, #32]
  return(result);
 8003394:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003396:	633b      	str	r3, [r7, #48]	; 0x30
 8003398:	2301      	movs	r3, #1
 800339a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800339c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800339e:	f383 8810 	msr	PRIMASK, r3
}
 80033a2:	46c0      	nop			; (mov r8, r8)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	689a      	ldr	r2, [r3, #8]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	2101      	movs	r1, #1
 80033b0:	438a      	bics	r2, r1
 80033b2:	609a      	str	r2, [r3, #8]
 80033b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033b6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ba:	f383 8810 	msr	PRIMASK, r3
}
 80033be:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d118      	bne.n	80033fa <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033c8:	f3ef 8310 	mrs	r3, PRIMASK
 80033cc:	60bb      	str	r3, [r7, #8]
  return(result);
 80033ce:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033d2:	2301      	movs	r3, #1
 80033d4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	f383 8810 	msr	PRIMASK, r3
}
 80033dc:	46c0      	nop			; (mov r8, r8)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	2110      	movs	r1, #16
 80033ea:	438a      	bics	r2, r1
 80033ec:	601a      	str	r2, [r3, #0]
 80033ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033f0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	f383 8810 	msr	PRIMASK, r3
}
 80033f8:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2280      	movs	r2, #128	; 0x80
 80033fe:	2120      	movs	r1, #32
 8003400:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2200      	movs	r2, #0
 8003406:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2200      	movs	r2, #0
 800340c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800340e:	46c0      	nop			; (mov r8, r8)
 8003410:	46bd      	mov	sp, r7
 8003412:	b00e      	add	sp, #56	; 0x38
 8003414:	bd80      	pop	{r7, pc}
 8003416:	46c0      	nop			; (mov r8, r8)
 8003418:	fffffedf 	.word	0xfffffedf

0800341c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b084      	sub	sp, #16
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003428:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	225a      	movs	r2, #90	; 0x5a
 800342e:	2100      	movs	r1, #0
 8003430:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2252      	movs	r2, #82	; 0x52
 8003436:	2100      	movs	r1, #0
 8003438:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	0018      	movs	r0, r3
 800343e:	f7ff fbd1 	bl	8002be4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003442:	46c0      	nop			; (mov r8, r8)
 8003444:	46bd      	mov	sp, r7
 8003446:	b004      	add	sp, #16
 8003448:	bd80      	pop	{r7, pc}

0800344a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800344a:	b580      	push	{r7, lr}
 800344c:	b086      	sub	sp, #24
 800344e:	af00      	add	r7, sp, #0
 8003450:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003452:	f3ef 8310 	mrs	r3, PRIMASK
 8003456:	60bb      	str	r3, [r7, #8]
  return(result);
 8003458:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800345a:	617b      	str	r3, [r7, #20]
 800345c:	2301      	movs	r3, #1
 800345e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	f383 8810 	msr	PRIMASK, r3
}
 8003466:	46c0      	nop			; (mov r8, r8)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	2140      	movs	r1, #64	; 0x40
 8003474:	438a      	bics	r2, r1
 8003476:	601a      	str	r2, [r3, #0]
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	f383 8810 	msr	PRIMASK, r3
}
 8003482:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2220      	movs	r2, #32
 8003488:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2200      	movs	r2, #0
 800348e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	0018      	movs	r0, r3
 8003494:	f7ff fb9e 	bl	8002bd4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003498:	46c0      	nop			; (mov r8, r8)
 800349a:	46bd      	mov	sp, r7
 800349c:	b006      	add	sp, #24
 800349e:	bd80      	pop	{r7, pc}

080034a0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b094      	sub	sp, #80	; 0x50
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80034a8:	204e      	movs	r0, #78	; 0x4e
 80034aa:	183b      	adds	r3, r7, r0
 80034ac:	687a      	ldr	r2, [r7, #4]
 80034ae:	215c      	movs	r1, #92	; 0x5c
 80034b0:	5a52      	ldrh	r2, [r2, r1]
 80034b2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2280      	movs	r2, #128	; 0x80
 80034b8:	589b      	ldr	r3, [r3, r2]
 80034ba:	2b22      	cmp	r3, #34	; 0x22
 80034bc:	d000      	beq.n	80034c0 <UART_RxISR_8BIT+0x20>
 80034be:	e0ba      	b.n	8003636 <UART_RxISR_8BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	214c      	movs	r1, #76	; 0x4c
 80034c6:	187b      	adds	r3, r7, r1
 80034c8:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 80034ca:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80034cc:	187b      	adds	r3, r7, r1
 80034ce:	881b      	ldrh	r3, [r3, #0]
 80034d0:	b2da      	uxtb	r2, r3
 80034d2:	183b      	adds	r3, r7, r0
 80034d4:	881b      	ldrh	r3, [r3, #0]
 80034d6:	b2d9      	uxtb	r1, r3
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034dc:	400a      	ands	r2, r1
 80034de:	b2d2      	uxtb	r2, r2
 80034e0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034e6:	1c5a      	adds	r2, r3, #1
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	225a      	movs	r2, #90	; 0x5a
 80034f0:	5a9b      	ldrh	r3, [r3, r2]
 80034f2:	b29b      	uxth	r3, r3
 80034f4:	3b01      	subs	r3, #1
 80034f6:	b299      	uxth	r1, r3
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	225a      	movs	r2, #90	; 0x5a
 80034fc:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	225a      	movs	r2, #90	; 0x5a
 8003502:	5a9b      	ldrh	r3, [r3, r2]
 8003504:	b29b      	uxth	r3, r3
 8003506:	2b00      	cmp	r3, #0
 8003508:	d000      	beq.n	800350c <UART_RxISR_8BIT+0x6c>
 800350a:	e09c      	b.n	8003646 <UART_RxISR_8BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800350c:	f3ef 8310 	mrs	r3, PRIMASK
 8003510:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003514:	64bb      	str	r3, [r7, #72]	; 0x48
 8003516:	2301      	movs	r3, #1
 8003518:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800351a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800351c:	f383 8810 	msr	PRIMASK, r3
}
 8003520:	46c0      	nop			; (mov r8, r8)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4948      	ldr	r1, [pc, #288]	; (8003650 <UART_RxISR_8BIT+0x1b0>)
 800352e:	400a      	ands	r2, r1
 8003530:	601a      	str	r2, [r3, #0]
 8003532:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003534:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003538:	f383 8810 	msr	PRIMASK, r3
}
 800353c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800353e:	f3ef 8310 	mrs	r3, PRIMASK
 8003542:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003544:	6b3b      	ldr	r3, [r7, #48]	; 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003546:	647b      	str	r3, [r7, #68]	; 0x44
 8003548:	2301      	movs	r3, #1
 800354a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800354c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800354e:	f383 8810 	msr	PRIMASK, r3
}
 8003552:	46c0      	nop			; (mov r8, r8)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	689a      	ldr	r2, [r3, #8]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	2101      	movs	r1, #1
 8003560:	438a      	bics	r2, r1
 8003562:	609a      	str	r2, [r3, #8]
 8003564:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003566:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800356a:	f383 8810 	msr	PRIMASK, r3
}
 800356e:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2280      	movs	r2, #128	; 0x80
 8003574:	2120      	movs	r1, #32
 8003576:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2200      	movs	r2, #0
 800357c:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2200      	movs	r2, #0
 8003582:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	685a      	ldr	r2, [r3, #4]
 800358a:	2380      	movs	r3, #128	; 0x80
 800358c:	041b      	lsls	r3, r3, #16
 800358e:	4013      	ands	r3, r2
 8003590:	d018      	beq.n	80035c4 <UART_RxISR_8BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003592:	f3ef 8310 	mrs	r3, PRIMASK
 8003596:	61bb      	str	r3, [r7, #24]
  return(result);
 8003598:	69bb      	ldr	r3, [r7, #24]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800359a:	643b      	str	r3, [r7, #64]	; 0x40
 800359c:	2301      	movs	r3, #1
 800359e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035a0:	69fb      	ldr	r3, [r7, #28]
 80035a2:	f383 8810 	msr	PRIMASK, r3
}
 80035a6:	46c0      	nop			; (mov r8, r8)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4928      	ldr	r1, [pc, #160]	; (8003654 <UART_RxISR_8BIT+0x1b4>)
 80035b4:	400a      	ands	r2, r1
 80035b6:	601a      	str	r2, [r3, #0]
 80035b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035ba:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035bc:	6a3b      	ldr	r3, [r7, #32]
 80035be:	f383 8810 	msr	PRIMASK, r3
}
 80035c2:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d12f      	bne.n	800362c <UART_RxISR_8BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2200      	movs	r2, #0
 80035d0:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035d2:	f3ef 8310 	mrs	r3, PRIMASK
 80035d6:	60fb      	str	r3, [r7, #12]
  return(result);
 80035d8:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035dc:	2301      	movs	r3, #1
 80035de:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	f383 8810 	msr	PRIMASK, r3
}
 80035e6:	46c0      	nop			; (mov r8, r8)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	2110      	movs	r1, #16
 80035f4:	438a      	bics	r2, r1
 80035f6:	601a      	str	r2, [r3, #0]
 80035f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035fa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	f383 8810 	msr	PRIMASK, r3
}
 8003602:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	69db      	ldr	r3, [r3, #28]
 800360a:	2210      	movs	r2, #16
 800360c:	4013      	ands	r3, r2
 800360e:	2b10      	cmp	r3, #16
 8003610:	d103      	bne.n	800361a <UART_RxISR_8BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	2210      	movs	r2, #16
 8003618:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2258      	movs	r2, #88	; 0x58
 800361e:	5a9a      	ldrh	r2, [r3, r2]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	0011      	movs	r1, r2
 8003624:	0018      	movs	r0, r3
 8003626:	f7ff fae5 	bl	8002bf4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800362a:	e00c      	b.n	8003646 <UART_RxISR_8BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	0018      	movs	r0, r3
 8003630:	f7fd f9fc 	bl	8000a2c <HAL_UART_RxCpltCallback>
}
 8003634:	e007      	b.n	8003646 <UART_RxISR_8BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	699a      	ldr	r2, [r3, #24]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	2108      	movs	r1, #8
 8003642:	430a      	orrs	r2, r1
 8003644:	619a      	str	r2, [r3, #24]
}
 8003646:	46c0      	nop			; (mov r8, r8)
 8003648:	46bd      	mov	sp, r7
 800364a:	b014      	add	sp, #80	; 0x50
 800364c:	bd80      	pop	{r7, pc}
 800364e:	46c0      	nop			; (mov r8, r8)
 8003650:	fffffedf 	.word	0xfffffedf
 8003654:	fbffffff 	.word	0xfbffffff

08003658 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b094      	sub	sp, #80	; 0x50
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003660:	204e      	movs	r0, #78	; 0x4e
 8003662:	183b      	adds	r3, r7, r0
 8003664:	687a      	ldr	r2, [r7, #4]
 8003666:	215c      	movs	r1, #92	; 0x5c
 8003668:	5a52      	ldrh	r2, [r2, r1]
 800366a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2280      	movs	r2, #128	; 0x80
 8003670:	589b      	ldr	r3, [r3, r2]
 8003672:	2b22      	cmp	r3, #34	; 0x22
 8003674:	d000      	beq.n	8003678 <UART_RxISR_16BIT+0x20>
 8003676:	e0ba      	b.n	80037ee <UART_RxISR_16BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	214c      	movs	r1, #76	; 0x4c
 800367e:	187b      	adds	r3, r7, r1
 8003680:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8003682:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003688:	64bb      	str	r3, [r7, #72]	; 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 800368a:	187b      	adds	r3, r7, r1
 800368c:	183a      	adds	r2, r7, r0
 800368e:	881b      	ldrh	r3, [r3, #0]
 8003690:	8812      	ldrh	r2, [r2, #0]
 8003692:	4013      	ands	r3, r2
 8003694:	b29a      	uxth	r2, r3
 8003696:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003698:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800369e:	1c9a      	adds	r2, r3, #2
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	225a      	movs	r2, #90	; 0x5a
 80036a8:	5a9b      	ldrh	r3, [r3, r2]
 80036aa:	b29b      	uxth	r3, r3
 80036ac:	3b01      	subs	r3, #1
 80036ae:	b299      	uxth	r1, r3
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	225a      	movs	r2, #90	; 0x5a
 80036b4:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	225a      	movs	r2, #90	; 0x5a
 80036ba:	5a9b      	ldrh	r3, [r3, r2]
 80036bc:	b29b      	uxth	r3, r3
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d000      	beq.n	80036c4 <UART_RxISR_16BIT+0x6c>
 80036c2:	e09c      	b.n	80037fe <UART_RxISR_16BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036c4:	f3ef 8310 	mrs	r3, PRIMASK
 80036c8:	623b      	str	r3, [r7, #32]
  return(result);
 80036ca:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036cc:	647b      	str	r3, [r7, #68]	; 0x44
 80036ce:	2301      	movs	r3, #1
 80036d0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d4:	f383 8810 	msr	PRIMASK, r3
}
 80036d8:	46c0      	nop			; (mov r8, r8)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4948      	ldr	r1, [pc, #288]	; (8003808 <UART_RxISR_16BIT+0x1b0>)
 80036e6:	400a      	ands	r2, r1
 80036e8:	601a      	str	r2, [r3, #0]
 80036ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036ec:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036f0:	f383 8810 	msr	PRIMASK, r3
}
 80036f4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036f6:	f3ef 8310 	mrs	r3, PRIMASK
 80036fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 80036fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036fe:	643b      	str	r3, [r7, #64]	; 0x40
 8003700:	2301      	movs	r3, #1
 8003702:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003706:	f383 8810 	msr	PRIMASK, r3
}
 800370a:	46c0      	nop			; (mov r8, r8)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	689a      	ldr	r2, [r3, #8]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	2101      	movs	r1, #1
 8003718:	438a      	bics	r2, r1
 800371a:	609a      	str	r2, [r3, #8]
 800371c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800371e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003720:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003722:	f383 8810 	msr	PRIMASK, r3
}
 8003726:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2280      	movs	r2, #128	; 0x80
 800372c:	2120      	movs	r1, #32
 800372e:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2200      	movs	r2, #0
 8003734:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2200      	movs	r2, #0
 800373a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	685a      	ldr	r2, [r3, #4]
 8003742:	2380      	movs	r3, #128	; 0x80
 8003744:	041b      	lsls	r3, r3, #16
 8003746:	4013      	ands	r3, r2
 8003748:	d018      	beq.n	800377c <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800374a:	f3ef 8310 	mrs	r3, PRIMASK
 800374e:	617b      	str	r3, [r7, #20]
  return(result);
 8003750:	697b      	ldr	r3, [r7, #20]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003752:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003754:	2301      	movs	r3, #1
 8003756:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003758:	69bb      	ldr	r3, [r7, #24]
 800375a:	f383 8810 	msr	PRIMASK, r3
}
 800375e:	46c0      	nop			; (mov r8, r8)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4928      	ldr	r1, [pc, #160]	; (800380c <UART_RxISR_16BIT+0x1b4>)
 800376c:	400a      	ands	r2, r1
 800376e:	601a      	str	r2, [r3, #0]
 8003770:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003772:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003774:	69fb      	ldr	r3, [r7, #28]
 8003776:	f383 8810 	msr	PRIMASK, r3
}
 800377a:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003780:	2b01      	cmp	r3, #1
 8003782:	d12f      	bne.n	80037e4 <UART_RxISR_16BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2200      	movs	r2, #0
 8003788:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800378a:	f3ef 8310 	mrs	r3, PRIMASK
 800378e:	60bb      	str	r3, [r7, #8]
  return(result);
 8003790:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003792:	63bb      	str	r3, [r7, #56]	; 0x38
 8003794:	2301      	movs	r3, #1
 8003796:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	f383 8810 	msr	PRIMASK, r3
}
 800379e:	46c0      	nop			; (mov r8, r8)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	2110      	movs	r1, #16
 80037ac:	438a      	bics	r2, r1
 80037ae:	601a      	str	r2, [r3, #0]
 80037b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037b2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	f383 8810 	msr	PRIMASK, r3
}
 80037ba:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	69db      	ldr	r3, [r3, #28]
 80037c2:	2210      	movs	r2, #16
 80037c4:	4013      	ands	r3, r2
 80037c6:	2b10      	cmp	r3, #16
 80037c8:	d103      	bne.n	80037d2 <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	2210      	movs	r2, #16
 80037d0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2258      	movs	r2, #88	; 0x58
 80037d6:	5a9a      	ldrh	r2, [r3, r2]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	0011      	movs	r1, r2
 80037dc:	0018      	movs	r0, r3
 80037de:	f7ff fa09 	bl	8002bf4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80037e2:	e00c      	b.n	80037fe <UART_RxISR_16BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	0018      	movs	r0, r3
 80037e8:	f7fd f920 	bl	8000a2c <HAL_UART_RxCpltCallback>
}
 80037ec:	e007      	b.n	80037fe <UART_RxISR_16BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	699a      	ldr	r2, [r3, #24]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	2108      	movs	r1, #8
 80037fa:	430a      	orrs	r2, r1
 80037fc:	619a      	str	r2, [r3, #24]
}
 80037fe:	46c0      	nop			; (mov r8, r8)
 8003800:	46bd      	mov	sp, r7
 8003802:	b014      	add	sp, #80	; 0x50
 8003804:	bd80      	pop	{r7, pc}
 8003806:	46c0      	nop			; (mov r8, r8)
 8003808:	fffffedf 	.word	0xfffffedf
 800380c:	fbffffff 	.word	0xfbffffff

08003810 <__libc_init_array>:
 8003810:	b570      	push	{r4, r5, r6, lr}
 8003812:	2600      	movs	r6, #0
 8003814:	4d0c      	ldr	r5, [pc, #48]	; (8003848 <__libc_init_array+0x38>)
 8003816:	4c0d      	ldr	r4, [pc, #52]	; (800384c <__libc_init_array+0x3c>)
 8003818:	1b64      	subs	r4, r4, r5
 800381a:	10a4      	asrs	r4, r4, #2
 800381c:	42a6      	cmp	r6, r4
 800381e:	d109      	bne.n	8003834 <__libc_init_array+0x24>
 8003820:	2600      	movs	r6, #0
 8003822:	f000 f821 	bl	8003868 <_init>
 8003826:	4d0a      	ldr	r5, [pc, #40]	; (8003850 <__libc_init_array+0x40>)
 8003828:	4c0a      	ldr	r4, [pc, #40]	; (8003854 <__libc_init_array+0x44>)
 800382a:	1b64      	subs	r4, r4, r5
 800382c:	10a4      	asrs	r4, r4, #2
 800382e:	42a6      	cmp	r6, r4
 8003830:	d105      	bne.n	800383e <__libc_init_array+0x2e>
 8003832:	bd70      	pop	{r4, r5, r6, pc}
 8003834:	00b3      	lsls	r3, r6, #2
 8003836:	58eb      	ldr	r3, [r5, r3]
 8003838:	4798      	blx	r3
 800383a:	3601      	adds	r6, #1
 800383c:	e7ee      	b.n	800381c <__libc_init_array+0xc>
 800383e:	00b3      	lsls	r3, r6, #2
 8003840:	58eb      	ldr	r3, [r5, r3]
 8003842:	4798      	blx	r3
 8003844:	3601      	adds	r6, #1
 8003846:	e7f2      	b.n	800382e <__libc_init_array+0x1e>
 8003848:	080038f8 	.word	0x080038f8
 800384c:	080038f8 	.word	0x080038f8
 8003850:	080038f8 	.word	0x080038f8
 8003854:	080038fc 	.word	0x080038fc

08003858 <memset>:
 8003858:	0003      	movs	r3, r0
 800385a:	1882      	adds	r2, r0, r2
 800385c:	4293      	cmp	r3, r2
 800385e:	d100      	bne.n	8003862 <memset+0xa>
 8003860:	4770      	bx	lr
 8003862:	7019      	strb	r1, [r3, #0]
 8003864:	3301      	adds	r3, #1
 8003866:	e7f9      	b.n	800385c <memset+0x4>

08003868 <_init>:
 8003868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800386a:	46c0      	nop			; (mov r8, r8)
 800386c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800386e:	bc08      	pop	{r3}
 8003870:	469e      	mov	lr, r3
 8003872:	4770      	bx	lr

08003874 <_fini>:
 8003874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003876:	46c0      	nop			; (mov r8, r8)
 8003878:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800387a:	bc08      	pop	{r3}
 800387c:	469e      	mov	lr, r3
 800387e:	4770      	bx	lr
