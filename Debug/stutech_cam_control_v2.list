
stutech_cam_control_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000038c4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08003984  08003984  00013984  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080039fc  080039fc  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  080039fc  080039fc  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  080039fc  080039fc  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080039fc  080039fc  000139fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a00  08003a00  00013a00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08003a04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000198  20000014  08003a18  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001ac  08003a18  000201ac  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d2c8  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001af6  00000000  00000000  0002d304  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bb0  00000000  00000000  0002ee00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b08  00000000  00000000  0002f9b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000ff9d  00000000  00000000  000304b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dd6a  00000000  00000000  00040455  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00063048  00000000  00000000  0004e1bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b1207  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029f4  00000000  00000000  000b1258  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000014 	.word	0x20000014
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800396c 	.word	0x0800396c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000018 	.word	0x20000018
 8000104:	0800396c 	.word	0x0800396c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <readgomb>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
					void readgomb(void)
					{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
						actgomb[0] = HAL_GPIO_ReadPin(BUTT_1_GPIO_Port,BUTT_1_Pin);
 8000224:	4b1a      	ldr	r3, [pc, #104]	; (8000290 <readgomb+0x70>)
 8000226:	2102      	movs	r1, #2
 8000228:	0018      	movs	r0, r3
 800022a:	f001 f965 	bl	80014f8 <HAL_GPIO_ReadPin>
 800022e:	0003      	movs	r3, r0
 8000230:	001a      	movs	r2, r3
 8000232:	4b18      	ldr	r3, [pc, #96]	; (8000294 <readgomb+0x74>)
 8000234:	601a      	str	r2, [r3, #0]
						actgomb[1] = HAL_GPIO_ReadPin(BUTT_2_GPIO_Port,BUTT_2_Pin);
 8000236:	2390      	movs	r3, #144	; 0x90
 8000238:	05db      	lsls	r3, r3, #23
 800023a:	2120      	movs	r1, #32
 800023c:	0018      	movs	r0, r3
 800023e:	f001 f95b 	bl	80014f8 <HAL_GPIO_ReadPin>
 8000242:	0003      	movs	r3, r0
 8000244:	001a      	movs	r2, r3
 8000246:	4b13      	ldr	r3, [pc, #76]	; (8000294 <readgomb+0x74>)
 8000248:	605a      	str	r2, [r3, #4]
						actgomb[2] = HAL_GPIO_ReadPin(BUTT_3_GPIO_Port,BUTT_3_Pin);
 800024a:	2390      	movs	r3, #144	; 0x90
 800024c:	05db      	lsls	r3, r3, #23
 800024e:	2140      	movs	r1, #64	; 0x40
 8000250:	0018      	movs	r0, r3
 8000252:	f001 f951 	bl	80014f8 <HAL_GPIO_ReadPin>
 8000256:	0003      	movs	r3, r0
 8000258:	001a      	movs	r2, r3
 800025a:	4b0e      	ldr	r3, [pc, #56]	; (8000294 <readgomb+0x74>)
 800025c:	609a      	str	r2, [r3, #8]
						actgomb[3] = HAL_GPIO_ReadPin(BUTT_4_GPIO_Port,BUTT_4_Pin);
 800025e:	2390      	movs	r3, #144	; 0x90
 8000260:	05db      	lsls	r3, r3, #23
 8000262:	2180      	movs	r1, #128	; 0x80
 8000264:	0018      	movs	r0, r3
 8000266:	f001 f947 	bl	80014f8 <HAL_GPIO_ReadPin>
 800026a:	0003      	movs	r3, r0
 800026c:	001a      	movs	r2, r3
 800026e:	4b09      	ldr	r3, [pc, #36]	; (8000294 <readgomb+0x74>)
 8000270:	60da      	str	r2, [r3, #12]
						actgomb[4] = HAL_GPIO_ReadPin(BUTT_GEN_GPIO_Port,BUTT_GEN_Pin);
 8000272:	2380      	movs	r3, #128	; 0x80
 8000274:	009a      	lsls	r2, r3, #2
 8000276:	2390      	movs	r3, #144	; 0x90
 8000278:	05db      	lsls	r3, r3, #23
 800027a:	0011      	movs	r1, r2
 800027c:	0018      	movs	r0, r3
 800027e:	f001 f93b 	bl	80014f8 <HAL_GPIO_ReadPin>
 8000282:	0003      	movs	r3, r0
 8000284:	001a      	movs	r2, r3
 8000286:	4b03      	ldr	r3, [pc, #12]	; (8000294 <readgomb+0x74>)
 8000288:	611a      	str	r2, [r3, #16]
					}
 800028a:	46c0      	nop			; (mov r8, r8)
 800028c:	46bd      	mov	sp, r7
 800028e:	bd80      	pop	{r7, pc}
 8000290:	48000400 	.word	0x48000400
 8000294:	20000100 	.word	0x20000100

08000298 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800029c:	f000 fdd8 	bl	8000e50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002a0:	f000 f9c6 	bl	8000630 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002a4:	f000 fa7c 	bl	80007a0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80002a8:	f000 fa4a 	bl	8000740 <MX_USART1_UART_Init>
  MX_TIM17_Init();
 80002ac:	f000 fa20 	bl	80006f0 <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim17);
 80002b0:	4bce      	ldr	r3, [pc, #824]	; (80005ec <main+0x354>)
 80002b2:	0018      	movs	r0, r3
 80002b4:	f001 fed6 	bl	8002064 <HAL_TIM_Base_Start_IT>
	HAL_UART_Receive_IT(&huart1,&uartbuf,1);
 80002b8:	49cd      	ldr	r1, [pc, #820]	; (80005f0 <main+0x358>)
 80002ba:	4bce      	ldr	r3, [pc, #824]	; (80005f4 <main+0x35c>)
 80002bc:	2201      	movs	r2, #1
 80002be:	0018      	movs	r0, r3
 80002c0:	f002 f9ea 	bl	8002698 <HAL_UART_Receive_IT>
	readgomb();
 80002c4:	f7ff ffac 	bl	8000220 <readgomb>
	lastgomb[0] = actgomb[0];
 80002c8:	4bcb      	ldr	r3, [pc, #812]	; (80005f8 <main+0x360>)
 80002ca:	681a      	ldr	r2, [r3, #0]
 80002cc:	4bcb      	ldr	r3, [pc, #812]	; (80005fc <main+0x364>)
 80002ce:	601a      	str	r2, [r3, #0]
	lastgomb[1] = actgomb[1];
 80002d0:	4bc9      	ldr	r3, [pc, #804]	; (80005f8 <main+0x360>)
 80002d2:	685a      	ldr	r2, [r3, #4]
 80002d4:	4bc9      	ldr	r3, [pc, #804]	; (80005fc <main+0x364>)
 80002d6:	605a      	str	r2, [r3, #4]
	lastgomb[2] = actgomb[2];
 80002d8:	4bc7      	ldr	r3, [pc, #796]	; (80005f8 <main+0x360>)
 80002da:	689a      	ldr	r2, [r3, #8]
 80002dc:	4bc7      	ldr	r3, [pc, #796]	; (80005fc <main+0x364>)
 80002de:	609a      	str	r2, [r3, #8]
	lastgomb[3] = actgomb[3];
 80002e0:	4bc5      	ldr	r3, [pc, #788]	; (80005f8 <main+0x360>)
 80002e2:	68da      	ldr	r2, [r3, #12]
 80002e4:	4bc5      	ldr	r3, [pc, #788]	; (80005fc <main+0x364>)
 80002e6:	60da      	str	r2, [r3, #12]
	lastgomb[4] = actgomb[4];
 80002e8:	4bc3      	ldr	r3, [pc, #780]	; (80005f8 <main+0x360>)
 80002ea:	691a      	ldr	r2, [r3, #16]
 80002ec:	4bc3      	ldr	r3, [pc, #780]	; (80005fc <main+0x364>)
 80002ee:	611a      	str	r2, [r3, #16]

	//bekapcs villogas
	HAL_GPIO_WritePin(PWR_LED_GPIO_Port,PWR_LED_Pin,GPIO_PIN_SET);
 80002f0:	2380      	movs	r3, #128	; 0x80
 80002f2:	00d9      	lsls	r1, r3, #3
 80002f4:	2390      	movs	r3, #144	; 0x90
 80002f6:	05db      	lsls	r3, r3, #23
 80002f8:	2201      	movs	r2, #1
 80002fa:	0018      	movs	r0, r3
 80002fc:	f001 f919 	bl	8001532 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8000300:	20c8      	movs	r0, #200	; 0xc8
 8000302:	f000 fe09 	bl	8000f18 <HAL_Delay>
	HAL_GPIO_WritePin(PWR_LED_GPIO_Port,PWR_LED_Pin,GPIO_PIN_RESET);
 8000306:	2380      	movs	r3, #128	; 0x80
 8000308:	00d9      	lsls	r1, r3, #3
 800030a:	2390      	movs	r3, #144	; 0x90
 800030c:	05db      	lsls	r3, r3, #23
 800030e:	2200      	movs	r2, #0
 8000310:	0018      	movs	r0, r3
 8000312:	f001 f90e 	bl	8001532 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8000316:	20c8      	movs	r0, #200	; 0xc8
 8000318:	f000 fdfe 	bl	8000f18 <HAL_Delay>
	HAL_GPIO_WritePin(PWR_LED_GPIO_Port,PWR_LED_Pin,GPIO_PIN_SET);
 800031c:	2380      	movs	r3, #128	; 0x80
 800031e:	00d9      	lsls	r1, r3, #3
 8000320:	2390      	movs	r3, #144	; 0x90
 8000322:	05db      	lsls	r3, r3, #23
 8000324:	2201      	movs	r2, #1
 8000326:	0018      	movs	r0, r3
 8000328:	f001 f903 	bl	8001532 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 800032c:	20c8      	movs	r0, #200	; 0xc8
 800032e:	f000 fdf3 	bl	8000f18 <HAL_Delay>
	HAL_GPIO_WritePin(PWR_LED_GPIO_Port,PWR_LED_Pin,GPIO_PIN_RESET);
 8000332:	2380      	movs	r3, #128	; 0x80
 8000334:	00d9      	lsls	r1, r3, #3
 8000336:	2390      	movs	r3, #144	; 0x90
 8000338:	05db      	lsls	r3, r3, #23
 800033a:	2200      	movs	r2, #0
 800033c:	0018      	movs	r0, r3
 800033e:	f001 f8f8 	bl	8001532 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8000342:	20c8      	movs	r0, #200	; 0xc8
 8000344:	f000 fde8 	bl	8000f18 <HAL_Delay>
	HAL_GPIO_WritePin(PWR_LED_GPIO_Port,PWR_LED_Pin,GPIO_PIN_SET);
 8000348:	2380      	movs	r3, #128	; 0x80
 800034a:	00d9      	lsls	r1, r3, #3
 800034c:	2390      	movs	r3, #144	; 0x90
 800034e:	05db      	lsls	r3, r3, #23
 8000350:	2201      	movs	r2, #1
 8000352:	0018      	movs	r0, r3
 8000354:	f001 f8ed 	bl	8001532 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8000358:	20c8      	movs	r0, #200	; 0xc8
 800035a:	f000 fddd 	bl	8000f18 <HAL_Delay>
	HAL_GPIO_WritePin(PWR_LED_GPIO_Port,PWR_LED_Pin,GPIO_PIN_RESET);
 800035e:	2380      	movs	r3, #128	; 0x80
 8000360:	00d9      	lsls	r1, r3, #3
 8000362:	2390      	movs	r3, #144	; 0x90
 8000364:	05db      	lsls	r3, r3, #23
 8000366:	2200      	movs	r2, #0
 8000368:	0018      	movs	r0, r3
 800036a:	f001 f8e2 	bl	8001532 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
while (1)
{
	if((poweronflag == 1)&&(villtimer == 0))
 800036e:	4ba4      	ldr	r3, [pc, #656]	; (8000600 <main+0x368>)
 8000370:	781b      	ldrb	r3, [r3, #0]
 8000372:	2b01      	cmp	r3, #1
 8000374:	d120      	bne.n	80003b8 <main+0x120>
 8000376:	4ba3      	ldr	r3, [pc, #652]	; (8000604 <main+0x36c>)
 8000378:	781b      	ldrb	r3, [r3, #0]
 800037a:	2b00      	cmp	r3, #0
 800037c:	d11c      	bne.n	80003b8 <main+0x120>
	{
		HAL_GPIO_WritePin(PWR_LED_GPIO_Port,PWR_LED_Pin,GPIO_PIN_SET);
 800037e:	2380      	movs	r3, #128	; 0x80
 8000380:	00d9      	lsls	r1, r3, #3
 8000382:	2390      	movs	r3, #144	; 0x90
 8000384:	05db      	lsls	r3, r3, #23
 8000386:	2201      	movs	r2, #1
 8000388:	0018      	movs	r0, r3
 800038a:	f001 f8d2 	bl	8001532 <HAL_GPIO_WritePin>
		if(firston == 1)
 800038e:	4b9e      	ldr	r3, [pc, #632]	; (8000608 <main+0x370>)
 8000390:	781b      	ldrb	r3, [r3, #0]
 8000392:	2b01      	cmp	r3, #1
 8000394:	d110      	bne.n	80003b8 <main+0x120>
		{
			HAL_TIM_Base_Stop_IT(&htim17);
 8000396:	4b95      	ldr	r3, [pc, #596]	; (80005ec <main+0x354>)
 8000398:	0018      	movs	r0, r3
 800039a:	f001 fea9 	bl	80020f0 <HAL_TIM_Base_Stop_IT>
			HAL_UART_Transmit(&huart1,autotrackon,7,100);
 800039e:	499b      	ldr	r1, [pc, #620]	; (800060c <main+0x374>)
 80003a0:	4894      	ldr	r0, [pc, #592]	; (80005f4 <main+0x35c>)
 80003a2:	2364      	movs	r3, #100	; 0x64
 80003a4:	2207      	movs	r2, #7
 80003a6:	f002 f8d7 	bl	8002558 <HAL_UART_Transmit>
			HAL_TIM_Base_Start_IT(&htim17);
 80003aa:	4b90      	ldr	r3, [pc, #576]	; (80005ec <main+0x354>)
 80003ac:	0018      	movs	r0, r3
 80003ae:	f001 fe59 	bl	8002064 <HAL_TIM_Base_Start_IT>
			firston = 0;
 80003b2:	4b95      	ldr	r3, [pc, #596]	; (8000608 <main+0x370>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	701a      	strb	r2, [r3, #0]
		}

	}
	if((poweroffflag == 1)&&(villtimer == 0))
 80003b8:	4b95      	ldr	r3, [pc, #596]	; (8000610 <main+0x378>)
 80003ba:	781b      	ldrb	r3, [r3, #0]
 80003bc:	2b01      	cmp	r3, #1
 80003be:	d10e      	bne.n	80003de <main+0x146>
 80003c0:	4b90      	ldr	r3, [pc, #576]	; (8000604 <main+0x36c>)
 80003c2:	781b      	ldrb	r3, [r3, #0]
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d10a      	bne.n	80003de <main+0x146>
	{
	HAL_GPIO_WritePin(PWR_LED_GPIO_Port,PWR_LED_Pin,GPIO_PIN_RESET);
 80003c8:	2380      	movs	r3, #128	; 0x80
 80003ca:	00d9      	lsls	r1, r3, #3
 80003cc:	2390      	movs	r3, #144	; 0x90
 80003ce:	05db      	lsls	r3, r3, #23
 80003d0:	2200      	movs	r2, #0
 80003d2:	0018      	movs	r0, r3
 80003d4:	f001 f8ad 	bl	8001532 <HAL_GPIO_WritePin>
	firston = 1;
 80003d8:	4b8b      	ldr	r3, [pc, #556]	; (8000608 <main+0x370>)
 80003da:	2201      	movs	r2, #1
 80003dc:	701a      	strb	r2, [r3, #0]
	}


	readgomb();
 80003de:	f7ff ff1f 	bl	8000220 <readgomb>
	if((lastgomb[0] != actgomb[0])||
 80003e2:	4b86      	ldr	r3, [pc, #536]	; (80005fc <main+0x364>)
 80003e4:	681a      	ldr	r2, [r3, #0]
 80003e6:	4b84      	ldr	r3, [pc, #528]	; (80005f8 <main+0x360>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d117      	bne.n	800041e <main+0x186>
		 (lastgomb[1] != actgomb[1])||
 80003ee:	4b83      	ldr	r3, [pc, #524]	; (80005fc <main+0x364>)
 80003f0:	685a      	ldr	r2, [r3, #4]
 80003f2:	4b81      	ldr	r3, [pc, #516]	; (80005f8 <main+0x360>)
 80003f4:	685b      	ldr	r3, [r3, #4]
	if((lastgomb[0] != actgomb[0])||
 80003f6:	429a      	cmp	r2, r3
 80003f8:	d111      	bne.n	800041e <main+0x186>
		 (lastgomb[2] != actgomb[2])||
 80003fa:	4b80      	ldr	r3, [pc, #512]	; (80005fc <main+0x364>)
 80003fc:	689a      	ldr	r2, [r3, #8]
 80003fe:	4b7e      	ldr	r3, [pc, #504]	; (80005f8 <main+0x360>)
 8000400:	689b      	ldr	r3, [r3, #8]
		 (lastgomb[1] != actgomb[1])||
 8000402:	429a      	cmp	r2, r3
 8000404:	d10b      	bne.n	800041e <main+0x186>
		 (lastgomb[3] != actgomb[3])||
 8000406:	4b7d      	ldr	r3, [pc, #500]	; (80005fc <main+0x364>)
 8000408:	68da      	ldr	r2, [r3, #12]
 800040a:	4b7b      	ldr	r3, [pc, #492]	; (80005f8 <main+0x360>)
 800040c:	68db      	ldr	r3, [r3, #12]
		 (lastgomb[2] != actgomb[2])||
 800040e:	429a      	cmp	r2, r3
 8000410:	d105      	bne.n	800041e <main+0x186>
		 (lastgomb[4] != actgomb[4]))
 8000412:	4b7a      	ldr	r3, [pc, #488]	; (80005fc <main+0x364>)
 8000414:	691a      	ldr	r2, [r3, #16]
 8000416:	4b78      	ldr	r3, [pc, #480]	; (80005f8 <main+0x360>)
 8000418:	691b      	ldr	r3, [r3, #16]
		 (lastgomb[3] != actgomb[3])||
 800041a:	429a      	cmp	r2, r3
 800041c:	d0a7      	beq.n	800036e <main+0xd6>
			{
				prelltimer = prelltime;
 800041e:	4b7d      	ldr	r3, [pc, #500]	; (8000614 <main+0x37c>)
 8000420:	681a      	ldr	r2, [r3, #0]
 8000422:	4b7d      	ldr	r3, [pc, #500]	; (8000618 <main+0x380>)
 8000424:	601a      	str	r2, [r3, #0]
				while(prelltimer >0)
 8000426:	e047      	b.n	80004b8 <main+0x220>
				{
					readgomb();
 8000428:	f7ff fefa 	bl	8000220 <readgomb>
					if(lastgomb[0] != actgomb[0])
 800042c:	4b73      	ldr	r3, [pc, #460]	; (80005fc <main+0x364>)
 800042e:	681a      	ldr	r2, [r3, #0]
 8000430:	4b71      	ldr	r3, [pc, #452]	; (80005f8 <main+0x360>)
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	429a      	cmp	r2, r3
 8000436:	d007      	beq.n	8000448 <main+0x1b0>
					{
						prelltimer = prelltime;
 8000438:	4b76      	ldr	r3, [pc, #472]	; (8000614 <main+0x37c>)
 800043a:	681a      	ldr	r2, [r3, #0]
 800043c:	4b76      	ldr	r3, [pc, #472]	; (8000618 <main+0x380>)
 800043e:	601a      	str	r2, [r3, #0]
						lastgomb[0] = actgomb[0];
 8000440:	4b6d      	ldr	r3, [pc, #436]	; (80005f8 <main+0x360>)
 8000442:	681a      	ldr	r2, [r3, #0]
 8000444:	4b6d      	ldr	r3, [pc, #436]	; (80005fc <main+0x364>)
 8000446:	601a      	str	r2, [r3, #0]
					}
					if(lastgomb[1] != actgomb[1])
 8000448:	4b6c      	ldr	r3, [pc, #432]	; (80005fc <main+0x364>)
 800044a:	685a      	ldr	r2, [r3, #4]
 800044c:	4b6a      	ldr	r3, [pc, #424]	; (80005f8 <main+0x360>)
 800044e:	685b      	ldr	r3, [r3, #4]
 8000450:	429a      	cmp	r2, r3
 8000452:	d007      	beq.n	8000464 <main+0x1cc>
					{
						prelltimer = prelltime;
 8000454:	4b6f      	ldr	r3, [pc, #444]	; (8000614 <main+0x37c>)
 8000456:	681a      	ldr	r2, [r3, #0]
 8000458:	4b6f      	ldr	r3, [pc, #444]	; (8000618 <main+0x380>)
 800045a:	601a      	str	r2, [r3, #0]
						lastgomb[1] = actgomb[1];
 800045c:	4b66      	ldr	r3, [pc, #408]	; (80005f8 <main+0x360>)
 800045e:	685a      	ldr	r2, [r3, #4]
 8000460:	4b66      	ldr	r3, [pc, #408]	; (80005fc <main+0x364>)
 8000462:	605a      	str	r2, [r3, #4]
					}
					if(lastgomb[2] != actgomb[2])
 8000464:	4b65      	ldr	r3, [pc, #404]	; (80005fc <main+0x364>)
 8000466:	689a      	ldr	r2, [r3, #8]
 8000468:	4b63      	ldr	r3, [pc, #396]	; (80005f8 <main+0x360>)
 800046a:	689b      	ldr	r3, [r3, #8]
 800046c:	429a      	cmp	r2, r3
 800046e:	d007      	beq.n	8000480 <main+0x1e8>
					{
						prelltimer = prelltime;
 8000470:	4b68      	ldr	r3, [pc, #416]	; (8000614 <main+0x37c>)
 8000472:	681a      	ldr	r2, [r3, #0]
 8000474:	4b68      	ldr	r3, [pc, #416]	; (8000618 <main+0x380>)
 8000476:	601a      	str	r2, [r3, #0]
						lastgomb[2] = actgomb[2];
 8000478:	4b5f      	ldr	r3, [pc, #380]	; (80005f8 <main+0x360>)
 800047a:	689a      	ldr	r2, [r3, #8]
 800047c:	4b5f      	ldr	r3, [pc, #380]	; (80005fc <main+0x364>)
 800047e:	609a      	str	r2, [r3, #8]
					}
					if(lastgomb[3] != actgomb[3])
 8000480:	4b5e      	ldr	r3, [pc, #376]	; (80005fc <main+0x364>)
 8000482:	68da      	ldr	r2, [r3, #12]
 8000484:	4b5c      	ldr	r3, [pc, #368]	; (80005f8 <main+0x360>)
 8000486:	68db      	ldr	r3, [r3, #12]
 8000488:	429a      	cmp	r2, r3
 800048a:	d007      	beq.n	800049c <main+0x204>
					{
						prelltimer = prelltime;
 800048c:	4b61      	ldr	r3, [pc, #388]	; (8000614 <main+0x37c>)
 800048e:	681a      	ldr	r2, [r3, #0]
 8000490:	4b61      	ldr	r3, [pc, #388]	; (8000618 <main+0x380>)
 8000492:	601a      	str	r2, [r3, #0]
						lastgomb[3] = actgomb[3];
 8000494:	4b58      	ldr	r3, [pc, #352]	; (80005f8 <main+0x360>)
 8000496:	68da      	ldr	r2, [r3, #12]
 8000498:	4b58      	ldr	r3, [pc, #352]	; (80005fc <main+0x364>)
 800049a:	60da      	str	r2, [r3, #12]
					}
					if(lastgomb[4] != actgomb[4])
 800049c:	4b57      	ldr	r3, [pc, #348]	; (80005fc <main+0x364>)
 800049e:	691a      	ldr	r2, [r3, #16]
 80004a0:	4b55      	ldr	r3, [pc, #340]	; (80005f8 <main+0x360>)
 80004a2:	691b      	ldr	r3, [r3, #16]
 80004a4:	429a      	cmp	r2, r3
 80004a6:	d007      	beq.n	80004b8 <main+0x220>
					{
						prelltimer = prelltime;
 80004a8:	4b5a      	ldr	r3, [pc, #360]	; (8000614 <main+0x37c>)
 80004aa:	681a      	ldr	r2, [r3, #0]
 80004ac:	4b5a      	ldr	r3, [pc, #360]	; (8000618 <main+0x380>)
 80004ae:	601a      	str	r2, [r3, #0]
						lastgomb[4] = actgomb[4];
 80004b0:	4b51      	ldr	r3, [pc, #324]	; (80005f8 <main+0x360>)
 80004b2:	691a      	ldr	r2, [r3, #16]
 80004b4:	4b51      	ldr	r3, [pc, #324]	; (80005fc <main+0x364>)
 80004b6:	611a      	str	r2, [r3, #16]
				while(prelltimer >0)
 80004b8:	4b57      	ldr	r3, [pc, #348]	; (8000618 <main+0x380>)
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	2b00      	cmp	r3, #0
 80004be:	dcb3      	bgt.n	8000428 <main+0x190>
					}

				}
					if(lastgomb[0] == 0)//gomb1
 80004c0:	4b4e      	ldr	r3, [pc, #312]	; (80005fc <main+0x364>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d122      	bne.n	800050e <main+0x276>
					{
						HAL_TIM_Base_Stop_IT(&htim17);
 80004c8:	4b48      	ldr	r3, [pc, #288]	; (80005ec <main+0x354>)
 80004ca:	0018      	movs	r0, r3
 80004cc:	f001 fe10 	bl	80020f0 <HAL_TIM_Base_Stop_IT>
						HAL_UART_Transmit(&huart1,autotrackoff,7,100);
 80004d0:	4952      	ldr	r1, [pc, #328]	; (800061c <main+0x384>)
 80004d2:	4848      	ldr	r0, [pc, #288]	; (80005f4 <main+0x35c>)
 80004d4:	2364      	movs	r3, #100	; 0x64
 80004d6:	2207      	movs	r2, #7
 80004d8:	f002 f83e 	bl	8002558 <HAL_UART_Transmit>
						HAL_Delay(50);
 80004dc:	2032      	movs	r0, #50	; 0x32
 80004de:	f000 fd1b 	bl	8000f18 <HAL_Delay>
						HAL_UART_Transmit(&huart1,cam2preset,7,100);
 80004e2:	494f      	ldr	r1, [pc, #316]	; (8000620 <main+0x388>)
 80004e4:	4843      	ldr	r0, [pc, #268]	; (80005f4 <main+0x35c>)
 80004e6:	2364      	movs	r3, #100	; 0x64
 80004e8:	2207      	movs	r2, #7
 80004ea:	f002 f835 	bl	8002558 <HAL_UART_Transmit>
						HAL_Delay(30);
 80004ee:	201e      	movs	r0, #30
 80004f0:	f000 fd12 	bl	8000f18 <HAL_Delay>
						HAL_UART_Transmit(&huart1,powerinquiry,5,100);
 80004f4:	494b      	ldr	r1, [pc, #300]	; (8000624 <main+0x38c>)
 80004f6:	483f      	ldr	r0, [pc, #252]	; (80005f4 <main+0x35c>)
 80004f8:	2364      	movs	r3, #100	; 0x64
 80004fa:	2205      	movs	r2, #5
 80004fc:	f002 f82c 	bl	8002558 <HAL_UART_Transmit>
						HAL_TIM_Base_Start_IT(&htim17);
 8000500:	4b3a      	ldr	r3, [pc, #232]	; (80005ec <main+0x354>)
 8000502:	0018      	movs	r0, r3
 8000504:	f001 fdae 	bl	8002064 <HAL_TIM_Base_Start_IT>
						villtimer = 200;
 8000508:	4b3e      	ldr	r3, [pc, #248]	; (8000604 <main+0x36c>)
 800050a:	22c8      	movs	r2, #200	; 0xc8
 800050c:	701a      	strb	r2, [r3, #0]
					}
					if(lastgomb[1] == 0)//gomb2
 800050e:	4b3b      	ldr	r3, [pc, #236]	; (80005fc <main+0x364>)
 8000510:	685b      	ldr	r3, [r3, #4]
 8000512:	2b00      	cmp	r3, #0
 8000514:	d122      	bne.n	800055c <main+0x2c4>
					{
						HAL_TIM_Base_Stop_IT(&htim17);
 8000516:	4b35      	ldr	r3, [pc, #212]	; (80005ec <main+0x354>)
 8000518:	0018      	movs	r0, r3
 800051a:	f001 fde9 	bl	80020f0 <HAL_TIM_Base_Stop_IT>
						HAL_UART_Transmit(&huart1,autotrackoff,7,100);
 800051e:	493f      	ldr	r1, [pc, #252]	; (800061c <main+0x384>)
 8000520:	4834      	ldr	r0, [pc, #208]	; (80005f4 <main+0x35c>)
 8000522:	2364      	movs	r3, #100	; 0x64
 8000524:	2207      	movs	r2, #7
 8000526:	f002 f817 	bl	8002558 <HAL_UART_Transmit>
						HAL_Delay(50);
 800052a:	2032      	movs	r0, #50	; 0x32
 800052c:	f000 fcf4 	bl	8000f18 <HAL_Delay>
						HAL_UART_Transmit(&huart1,cam3preset,7,100);
 8000530:	493d      	ldr	r1, [pc, #244]	; (8000628 <main+0x390>)
 8000532:	4830      	ldr	r0, [pc, #192]	; (80005f4 <main+0x35c>)
 8000534:	2364      	movs	r3, #100	; 0x64
 8000536:	2207      	movs	r2, #7
 8000538:	f002 f80e 	bl	8002558 <HAL_UART_Transmit>
						HAL_Delay(30);
 800053c:	201e      	movs	r0, #30
 800053e:	f000 fceb 	bl	8000f18 <HAL_Delay>
						HAL_UART_Transmit(&huart1,powerinquiry,5,100);
 8000542:	4938      	ldr	r1, [pc, #224]	; (8000624 <main+0x38c>)
 8000544:	482b      	ldr	r0, [pc, #172]	; (80005f4 <main+0x35c>)
 8000546:	2364      	movs	r3, #100	; 0x64
 8000548:	2205      	movs	r2, #5
 800054a:	f002 f805 	bl	8002558 <HAL_UART_Transmit>
						HAL_TIM_Base_Start_IT(&htim17);
 800054e:	4b27      	ldr	r3, [pc, #156]	; (80005ec <main+0x354>)
 8000550:	0018      	movs	r0, r3
 8000552:	f001 fd87 	bl	8002064 <HAL_TIM_Base_Start_IT>
						villtimer = 200;
 8000556:	4b2b      	ldr	r3, [pc, #172]	; (8000604 <main+0x36c>)
 8000558:	22c8      	movs	r2, #200	; 0xc8
 800055a:	701a      	strb	r2, [r3, #0]
					}
					if(lastgomb[2] == 0)//gomb3
 800055c:	4b27      	ldr	r3, [pc, #156]	; (80005fc <main+0x364>)
 800055e:	689b      	ldr	r3, [r3, #8]
 8000560:	2b00      	cmp	r3, #0
 8000562:	d122      	bne.n	80005aa <main+0x312>
					{
						HAL_TIM_Base_Stop_IT(&htim17);
 8000564:	4b21      	ldr	r3, [pc, #132]	; (80005ec <main+0x354>)
 8000566:	0018      	movs	r0, r3
 8000568:	f001 fdc2 	bl	80020f0 <HAL_TIM_Base_Stop_IT>
						HAL_UART_Transmit(&huart1,autotrackoff,7,100);
 800056c:	492b      	ldr	r1, [pc, #172]	; (800061c <main+0x384>)
 800056e:	4821      	ldr	r0, [pc, #132]	; (80005f4 <main+0x35c>)
 8000570:	2364      	movs	r3, #100	; 0x64
 8000572:	2207      	movs	r2, #7
 8000574:	f001 fff0 	bl	8002558 <HAL_UART_Transmit>
						HAL_Delay(50);
 8000578:	2032      	movs	r0, #50	; 0x32
 800057a:	f000 fccd 	bl	8000f18 <HAL_Delay>
						HAL_UART_Transmit(&huart1,cam4preset,7,100);
 800057e:	492b      	ldr	r1, [pc, #172]	; (800062c <main+0x394>)
 8000580:	481c      	ldr	r0, [pc, #112]	; (80005f4 <main+0x35c>)
 8000582:	2364      	movs	r3, #100	; 0x64
 8000584:	2207      	movs	r2, #7
 8000586:	f001 ffe7 	bl	8002558 <HAL_UART_Transmit>
						HAL_Delay(30);
 800058a:	201e      	movs	r0, #30
 800058c:	f000 fcc4 	bl	8000f18 <HAL_Delay>
						HAL_UART_Transmit(&huart1,powerinquiry,5,100);
 8000590:	4924      	ldr	r1, [pc, #144]	; (8000624 <main+0x38c>)
 8000592:	4818      	ldr	r0, [pc, #96]	; (80005f4 <main+0x35c>)
 8000594:	2364      	movs	r3, #100	; 0x64
 8000596:	2205      	movs	r2, #5
 8000598:	f001 ffde 	bl	8002558 <HAL_UART_Transmit>
						HAL_TIM_Base_Start_IT(&htim17);
 800059c:	4b13      	ldr	r3, [pc, #76]	; (80005ec <main+0x354>)
 800059e:	0018      	movs	r0, r3
 80005a0:	f001 fd60 	bl	8002064 <HAL_TIM_Base_Start_IT>
						villtimer = 200;
 80005a4:	4b17      	ldr	r3, [pc, #92]	; (8000604 <main+0x36c>)
 80005a6:	22c8      	movs	r2, #200	; 0xc8
 80005a8:	701a      	strb	r2, [r3, #0]
					}
					if(lastgomb[3] == 0)//gomb4
 80005aa:	4b14      	ldr	r3, [pc, #80]	; (80005fc <main+0x364>)
 80005ac:	68db      	ldr	r3, [r3, #12]
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d000      	beq.n	80005b4 <main+0x31c>
 80005b2:	e6dc      	b.n	800036e <main+0xd6>
					{
						HAL_TIM_Base_Stop_IT(&htim17);
 80005b4:	4b0d      	ldr	r3, [pc, #52]	; (80005ec <main+0x354>)
 80005b6:	0018      	movs	r0, r3
 80005b8:	f001 fd9a 	bl	80020f0 <HAL_TIM_Base_Stop_IT>
						HAL_UART_Transmit(&huart1,autotrackon,7,100);
 80005bc:	4913      	ldr	r1, [pc, #76]	; (800060c <main+0x374>)
 80005be:	480d      	ldr	r0, [pc, #52]	; (80005f4 <main+0x35c>)
 80005c0:	2364      	movs	r3, #100	; 0x64
 80005c2:	2207      	movs	r2, #7
 80005c4:	f001 ffc8 	bl	8002558 <HAL_UART_Transmit>
						HAL_Delay(30);
 80005c8:	201e      	movs	r0, #30
 80005ca:	f000 fca5 	bl	8000f18 <HAL_Delay>
						HAL_UART_Transmit(&huart1,powerinquiry,5,100);
 80005ce:	4915      	ldr	r1, [pc, #84]	; (8000624 <main+0x38c>)
 80005d0:	4808      	ldr	r0, [pc, #32]	; (80005f4 <main+0x35c>)
 80005d2:	2364      	movs	r3, #100	; 0x64
 80005d4:	2205      	movs	r2, #5
 80005d6:	f001 ffbf 	bl	8002558 <HAL_UART_Transmit>
						HAL_TIM_Base_Start_IT(&htim17);
 80005da:	4b04      	ldr	r3, [pc, #16]	; (80005ec <main+0x354>)
 80005dc:	0018      	movs	r0, r3
 80005de:	f001 fd41 	bl	8002064 <HAL_TIM_Base_Start_IT>
						villtimer = 200;
 80005e2:	4b08      	ldr	r3, [pc, #32]	; (8000604 <main+0x36c>)
 80005e4:	22c8      	movs	r2, #200	; 0xc8
 80005e6:	701a      	strb	r2, [r3, #0]
	if((poweronflag == 1)&&(villtimer == 0))
 80005e8:	e6c1      	b.n	800036e <main+0xd6>
 80005ea:	46c0      	nop			; (mov r8, r8)
 80005ec:	20000030 	.word	0x20000030
 80005f0:	20000194 	.word	0x20000194
 80005f4:	20000078 	.word	0x20000078
 80005f8:	20000100 	.word	0x20000100
 80005fc:	20000114 	.word	0x20000114
 8000600:	20000198 	.word	0x20000198
 8000604:	2000019a 	.word	0x2000019a
 8000608:	20000004 	.word	0x20000004
 800060c:	080039ac 	.word	0x080039ac
 8000610:	20000199 	.word	0x20000199
 8000614:	20000000 	.word	0x20000000
 8000618:	20000128 	.word	0x20000128
 800061c:	080039b4 	.word	0x080039b4
 8000620:	08003994 	.word	0x08003994
 8000624:	080039bc 	.word	0x080039bc
 8000628:	0800399c 	.word	0x0800399c
 800062c:	080039a4 	.word	0x080039a4

08000630 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000630:	b590      	push	{r4, r7, lr}
 8000632:	b095      	sub	sp, #84	; 0x54
 8000634:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000636:	2420      	movs	r4, #32
 8000638:	193b      	adds	r3, r7, r4
 800063a:	0018      	movs	r0, r3
 800063c:	2330      	movs	r3, #48	; 0x30
 800063e:	001a      	movs	r2, r3
 8000640:	2100      	movs	r1, #0
 8000642:	f003 f98b 	bl	800395c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000646:	2310      	movs	r3, #16
 8000648:	18fb      	adds	r3, r7, r3
 800064a:	0018      	movs	r0, r3
 800064c:	2310      	movs	r3, #16
 800064e:	001a      	movs	r2, r3
 8000650:	2100      	movs	r1, #0
 8000652:	f003 f983 	bl	800395c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000656:	003b      	movs	r3, r7
 8000658:	0018      	movs	r0, r3
 800065a:	2310      	movs	r3, #16
 800065c:	001a      	movs	r2, r3
 800065e:	2100      	movs	r1, #0
 8000660:	f003 f97c 	bl	800395c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000664:	0021      	movs	r1, r4
 8000666:	187b      	adds	r3, r7, r1
 8000668:	2201      	movs	r2, #1
 800066a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800066c:	187b      	adds	r3, r7, r1
 800066e:	2201      	movs	r2, #1
 8000670:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000672:	187b      	adds	r3, r7, r1
 8000674:	2202      	movs	r2, #2
 8000676:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000678:	187b      	adds	r3, r7, r1
 800067a:	2280      	movs	r2, #128	; 0x80
 800067c:	0252      	lsls	r2, r2, #9
 800067e:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000680:	187b      	adds	r3, r7, r1
 8000682:	2280      	movs	r2, #128	; 0x80
 8000684:	0352      	lsls	r2, r2, #13
 8000686:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000688:	187b      	adds	r3, r7, r1
 800068a:	2200      	movs	r2, #0
 800068c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800068e:	187b      	adds	r3, r7, r1
 8000690:	0018      	movs	r0, r3
 8000692:	f000 ff6b 	bl	800156c <HAL_RCC_OscConfig>
 8000696:	1e03      	subs	r3, r0, #0
 8000698:	d001      	beq.n	800069e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800069a:	f000 fad3 	bl	8000c44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800069e:	2110      	movs	r1, #16
 80006a0:	187b      	adds	r3, r7, r1
 80006a2:	2207      	movs	r2, #7
 80006a4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a6:	187b      	adds	r3, r7, r1
 80006a8:	2202      	movs	r2, #2
 80006aa:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ac:	187b      	adds	r3, r7, r1
 80006ae:	2200      	movs	r2, #0
 80006b0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006b2:	187b      	adds	r3, r7, r1
 80006b4:	2200      	movs	r2, #0
 80006b6:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006b8:	187b      	adds	r3, r7, r1
 80006ba:	2101      	movs	r1, #1
 80006bc:	0018      	movs	r0, r3
 80006be:	f001 fa6f 	bl	8001ba0 <HAL_RCC_ClockConfig>
 80006c2:	1e03      	subs	r3, r0, #0
 80006c4:	d001      	beq.n	80006ca <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80006c6:	f000 fabd 	bl	8000c44 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80006ca:	003b      	movs	r3, r7
 80006cc:	2201      	movs	r2, #1
 80006ce:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80006d0:	003b      	movs	r3, r7
 80006d2:	2200      	movs	r2, #0
 80006d4:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006d6:	003b      	movs	r3, r7
 80006d8:	0018      	movs	r0, r3
 80006da:	f001 fba5 	bl	8001e28 <HAL_RCCEx_PeriphCLKConfig>
 80006de:	1e03      	subs	r3, r0, #0
 80006e0:	d001      	beq.n	80006e6 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80006e2:	f000 faaf 	bl	8000c44 <Error_Handler>
  }
}
 80006e6:	46c0      	nop			; (mov r8, r8)
 80006e8:	46bd      	mov	sp, r7
 80006ea:	b015      	add	sp, #84	; 0x54
 80006ec:	bd90      	pop	{r4, r7, pc}
	...

080006f0 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80006f4:	4b0f      	ldr	r3, [pc, #60]	; (8000734 <MX_TIM17_Init+0x44>)
 80006f6:	4a10      	ldr	r2, [pc, #64]	; (8000738 <MX_TIM17_Init+0x48>)
 80006f8:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 10;
 80006fa:	4b0e      	ldr	r3, [pc, #56]	; (8000734 <MX_TIM17_Init+0x44>)
 80006fc:	220a      	movs	r2, #10
 80006fe:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000700:	4b0c      	ldr	r3, [pc, #48]	; (8000734 <MX_TIM17_Init+0x44>)
 8000702:	2200      	movs	r2, #0
 8000704:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 4469;
 8000706:	4b0b      	ldr	r3, [pc, #44]	; (8000734 <MX_TIM17_Init+0x44>)
 8000708:	4a0c      	ldr	r2, [pc, #48]	; (800073c <MX_TIM17_Init+0x4c>)
 800070a:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800070c:	4b09      	ldr	r3, [pc, #36]	; (8000734 <MX_TIM17_Init+0x44>)
 800070e:	2200      	movs	r2, #0
 8000710:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000712:	4b08      	ldr	r3, [pc, #32]	; (8000734 <MX_TIM17_Init+0x44>)
 8000714:	2200      	movs	r2, #0
 8000716:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000718:	4b06      	ldr	r3, [pc, #24]	; (8000734 <MX_TIM17_Init+0x44>)
 800071a:	2280      	movs	r2, #128	; 0x80
 800071c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800071e:	4b05      	ldr	r3, [pc, #20]	; (8000734 <MX_TIM17_Init+0x44>)
 8000720:	0018      	movs	r0, r3
 8000722:	f001 fc4f 	bl	8001fc4 <HAL_TIM_Base_Init>
 8000726:	1e03      	subs	r3, r0, #0
 8000728:	d001      	beq.n	800072e <MX_TIM17_Init+0x3e>
  {
    Error_Handler();
 800072a:	f000 fa8b 	bl	8000c44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 800072e:	46c0      	nop			; (mov r8, r8)
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	20000030 	.word	0x20000030
 8000738:	40014800 	.word	0x40014800
 800073c:	00001175 	.word	0x00001175

08000740 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000744:	4b14      	ldr	r3, [pc, #80]	; (8000798 <MX_USART1_UART_Init+0x58>)
 8000746:	4a15      	ldr	r2, [pc, #84]	; (800079c <MX_USART1_UART_Init+0x5c>)
 8000748:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800074a:	4b13      	ldr	r3, [pc, #76]	; (8000798 <MX_USART1_UART_Init+0x58>)
 800074c:	2296      	movs	r2, #150	; 0x96
 800074e:	0192      	lsls	r2, r2, #6
 8000750:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000752:	4b11      	ldr	r3, [pc, #68]	; (8000798 <MX_USART1_UART_Init+0x58>)
 8000754:	2200      	movs	r2, #0
 8000756:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000758:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <MX_USART1_UART_Init+0x58>)
 800075a:	2200      	movs	r2, #0
 800075c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800075e:	4b0e      	ldr	r3, [pc, #56]	; (8000798 <MX_USART1_UART_Init+0x58>)
 8000760:	2200      	movs	r2, #0
 8000762:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000764:	4b0c      	ldr	r3, [pc, #48]	; (8000798 <MX_USART1_UART_Init+0x58>)
 8000766:	220c      	movs	r2, #12
 8000768:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800076a:	4b0b      	ldr	r3, [pc, #44]	; (8000798 <MX_USART1_UART_Init+0x58>)
 800076c:	2200      	movs	r2, #0
 800076e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000770:	4b09      	ldr	r3, [pc, #36]	; (8000798 <MX_USART1_UART_Init+0x58>)
 8000772:	2200      	movs	r2, #0
 8000774:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000776:	4b08      	ldr	r3, [pc, #32]	; (8000798 <MX_USART1_UART_Init+0x58>)
 8000778:	2200      	movs	r2, #0
 800077a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800077c:	4b06      	ldr	r3, [pc, #24]	; (8000798 <MX_USART1_UART_Init+0x58>)
 800077e:	2200      	movs	r2, #0
 8000780:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000782:	4b05      	ldr	r3, [pc, #20]	; (8000798 <MX_USART1_UART_Init+0x58>)
 8000784:	0018      	movs	r0, r3
 8000786:	f001 fe93 	bl	80024b0 <HAL_UART_Init>
 800078a:	1e03      	subs	r3, r0, #0
 800078c:	d001      	beq.n	8000792 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800078e:	f000 fa59 	bl	8000c44 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000792:	46c0      	nop			; (mov r8, r8)
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	20000078 	.word	0x20000078
 800079c:	40013800 	.word	0x40013800

080007a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007a0:	b590      	push	{r4, r7, lr}
 80007a2:	b089      	sub	sp, #36	; 0x24
 80007a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a6:	240c      	movs	r4, #12
 80007a8:	193b      	adds	r3, r7, r4
 80007aa:	0018      	movs	r0, r3
 80007ac:	2314      	movs	r3, #20
 80007ae:	001a      	movs	r2, r3
 80007b0:	2100      	movs	r1, #0
 80007b2:	f003 f8d3 	bl	800395c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007b6:	4b35      	ldr	r3, [pc, #212]	; (800088c <MX_GPIO_Init+0xec>)
 80007b8:	695a      	ldr	r2, [r3, #20]
 80007ba:	4b34      	ldr	r3, [pc, #208]	; (800088c <MX_GPIO_Init+0xec>)
 80007bc:	2180      	movs	r1, #128	; 0x80
 80007be:	03c9      	lsls	r1, r1, #15
 80007c0:	430a      	orrs	r2, r1
 80007c2:	615a      	str	r2, [r3, #20]
 80007c4:	4b31      	ldr	r3, [pc, #196]	; (800088c <MX_GPIO_Init+0xec>)
 80007c6:	695a      	ldr	r2, [r3, #20]
 80007c8:	2380      	movs	r3, #128	; 0x80
 80007ca:	03db      	lsls	r3, r3, #15
 80007cc:	4013      	ands	r3, r2
 80007ce:	60bb      	str	r3, [r7, #8]
 80007d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d2:	4b2e      	ldr	r3, [pc, #184]	; (800088c <MX_GPIO_Init+0xec>)
 80007d4:	695a      	ldr	r2, [r3, #20]
 80007d6:	4b2d      	ldr	r3, [pc, #180]	; (800088c <MX_GPIO_Init+0xec>)
 80007d8:	2180      	movs	r1, #128	; 0x80
 80007da:	0289      	lsls	r1, r1, #10
 80007dc:	430a      	orrs	r2, r1
 80007de:	615a      	str	r2, [r3, #20]
 80007e0:	4b2a      	ldr	r3, [pc, #168]	; (800088c <MX_GPIO_Init+0xec>)
 80007e2:	695a      	ldr	r2, [r3, #20]
 80007e4:	2380      	movs	r3, #128	; 0x80
 80007e6:	029b      	lsls	r3, r3, #10
 80007e8:	4013      	ands	r3, r2
 80007ea:	607b      	str	r3, [r7, #4]
 80007ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ee:	4b27      	ldr	r3, [pc, #156]	; (800088c <MX_GPIO_Init+0xec>)
 80007f0:	695a      	ldr	r2, [r3, #20]
 80007f2:	4b26      	ldr	r3, [pc, #152]	; (800088c <MX_GPIO_Init+0xec>)
 80007f4:	2180      	movs	r1, #128	; 0x80
 80007f6:	02c9      	lsls	r1, r1, #11
 80007f8:	430a      	orrs	r2, r1
 80007fa:	615a      	str	r2, [r3, #20]
 80007fc:	4b23      	ldr	r3, [pc, #140]	; (800088c <MX_GPIO_Init+0xec>)
 80007fe:	695a      	ldr	r2, [r3, #20]
 8000800:	2380      	movs	r3, #128	; 0x80
 8000802:	02db      	lsls	r3, r3, #11
 8000804:	4013      	ands	r3, r2
 8000806:	603b      	str	r3, [r7, #0]
 8000808:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PWR_LED_GPIO_Port, PWR_LED_Pin, GPIO_PIN_RESET);
 800080a:	2380      	movs	r3, #128	; 0x80
 800080c:	00d9      	lsls	r1, r3, #3
 800080e:	2390      	movs	r3, #144	; 0x90
 8000810:	05db      	lsls	r3, r3, #23
 8000812:	2200      	movs	r2, #0
 8000814:	0018      	movs	r0, r3
 8000816:	f000 fe8c 	bl	8001532 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BUTT_2_Pin BUTT_3_Pin BUTT_4_Pin BUTT_GEN_Pin */
  GPIO_InitStruct.Pin = BUTT_2_Pin|BUTT_3_Pin|BUTT_4_Pin|BUTT_GEN_Pin;
 800081a:	193b      	adds	r3, r7, r4
 800081c:	22b8      	movs	r2, #184	; 0xb8
 800081e:	0092      	lsls	r2, r2, #2
 8000820:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000822:	193b      	adds	r3, r7, r4
 8000824:	2200      	movs	r2, #0
 8000826:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000828:	193b      	adds	r3, r7, r4
 800082a:	2201      	movs	r2, #1
 800082c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800082e:	193a      	adds	r2, r7, r4
 8000830:	2390      	movs	r3, #144	; 0x90
 8000832:	05db      	lsls	r3, r3, #23
 8000834:	0011      	movs	r1, r2
 8000836:	0018      	movs	r0, r3
 8000838:	f000 fcee 	bl	8001218 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTT_1_Pin */
  GPIO_InitStruct.Pin = BUTT_1_Pin;
 800083c:	193b      	adds	r3, r7, r4
 800083e:	2202      	movs	r2, #2
 8000840:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000842:	193b      	adds	r3, r7, r4
 8000844:	2200      	movs	r2, #0
 8000846:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000848:	193b      	adds	r3, r7, r4
 800084a:	2201      	movs	r2, #1
 800084c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BUTT_1_GPIO_Port, &GPIO_InitStruct);
 800084e:	193b      	adds	r3, r7, r4
 8000850:	4a0f      	ldr	r2, [pc, #60]	; (8000890 <MX_GPIO_Init+0xf0>)
 8000852:	0019      	movs	r1, r3
 8000854:	0010      	movs	r0, r2
 8000856:	f000 fcdf 	bl	8001218 <HAL_GPIO_Init>

  /*Configure GPIO pin : PWR_LED_Pin */
  GPIO_InitStruct.Pin = PWR_LED_Pin;
 800085a:	0021      	movs	r1, r4
 800085c:	187b      	adds	r3, r7, r1
 800085e:	2280      	movs	r2, #128	; 0x80
 8000860:	00d2      	lsls	r2, r2, #3
 8000862:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000864:	187b      	adds	r3, r7, r1
 8000866:	2201      	movs	r2, #1
 8000868:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086a:	187b      	adds	r3, r7, r1
 800086c:	2200      	movs	r2, #0
 800086e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000870:	187b      	adds	r3, r7, r1
 8000872:	2200      	movs	r2, #0
 8000874:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(PWR_LED_GPIO_Port, &GPIO_InitStruct);
 8000876:	187a      	adds	r2, r7, r1
 8000878:	2390      	movs	r3, #144	; 0x90
 800087a:	05db      	lsls	r3, r3, #23
 800087c:	0011      	movs	r1, r2
 800087e:	0018      	movs	r0, r3
 8000880:	f000 fcca 	bl	8001218 <HAL_GPIO_Init>

}
 8000884:	46c0      	nop			; (mov r8, r8)
 8000886:	46bd      	mov	sp, r7
 8000888:	b009      	add	sp, #36	; 0x24
 800088a:	bd90      	pop	{r4, r7, pc}
 800088c:	40021000 	.word	0x40021000
 8000890:	48000400 	.word	0x48000400

08000894 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]

	if(prelltimer >0)
 800089c:	4b7d      	ldr	r3, [pc, #500]	; (8000a94 <HAL_TIM_PeriodElapsedCallback+0x200>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	dd04      	ble.n	80008ae <HAL_TIM_PeriodElapsedCallback+0x1a>
	{
		prelltimer--;
 80008a4:	4b7b      	ldr	r3, [pc, #492]	; (8000a94 <HAL_TIM_PeriodElapsedCallback+0x200>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	1e5a      	subs	r2, r3, #1
 80008aa:	4b7a      	ldr	r3, [pc, #488]	; (8000a94 <HAL_TIM_PeriodElapsedCallback+0x200>)
 80008ac:	601a      	str	r2, [r3, #0]
	}
	if(villtimer >0)
 80008ae:	4b7a      	ldr	r3, [pc, #488]	; (8000a98 <HAL_TIM_PeriodElapsedCallback+0x204>)
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d035      	beq.n	8000922 <HAL_TIM_PeriodElapsedCallback+0x8e>
	{
		villtimer--;
 80008b6:	4b78      	ldr	r3, [pc, #480]	; (8000a98 <HAL_TIM_PeriodElapsedCallback+0x204>)
 80008b8:	781b      	ldrb	r3, [r3, #0]
 80008ba:	3b01      	subs	r3, #1
 80008bc:	b2da      	uxtb	r2, r3
 80008be:	4b76      	ldr	r3, [pc, #472]	; (8000a98 <HAL_TIM_PeriodElapsedCallback+0x204>)
 80008c0:	701a      	strb	r2, [r3, #0]
		if(poweronflag == 1)
 80008c2:	4b76      	ldr	r3, [pc, #472]	; (8000a9c <HAL_TIM_PeriodElapsedCallback+0x208>)
 80008c4:	781b      	ldrb	r3, [r3, #0]
 80008c6:	2b01      	cmp	r3, #1
 80008c8:	d113      	bne.n	80008f2 <HAL_TIM_PeriodElapsedCallback+0x5e>
		{
			HAL_GPIO_WritePin(PWR_LED_GPIO_Port,PWR_LED_Pin,GPIO_PIN_RESET);//led off
 80008ca:	2380      	movs	r3, #128	; 0x80
 80008cc:	00d9      	lsls	r1, r3, #3
 80008ce:	2390      	movs	r3, #144	; 0x90
 80008d0:	05db      	lsls	r3, r3, #23
 80008d2:	2200      	movs	r2, #0
 80008d4:	0018      	movs	r0, r3
 80008d6:	f000 fe2c 	bl	8001532 <HAL_GPIO_WritePin>
			if(villtimer == 0)
 80008da:	4b6f      	ldr	r3, [pc, #444]	; (8000a98 <HAL_TIM_PeriodElapsedCallback+0x204>)
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d107      	bne.n	80008f2 <HAL_TIM_PeriodElapsedCallback+0x5e>
			{
				HAL_GPIO_WritePin(PWR_LED_GPIO_Port,PWR_LED_Pin,GPIO_PIN_SET);//led on
 80008e2:	2380      	movs	r3, #128	; 0x80
 80008e4:	00d9      	lsls	r1, r3, #3
 80008e6:	2390      	movs	r3, #144	; 0x90
 80008e8:	05db      	lsls	r3, r3, #23
 80008ea:	2201      	movs	r2, #1
 80008ec:	0018      	movs	r0, r3
 80008ee:	f000 fe20 	bl	8001532 <HAL_GPIO_WritePin>
			}
		}
		if(poweroffflag == 1)
 80008f2:	4b6b      	ldr	r3, [pc, #428]	; (8000aa0 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 80008f4:	781b      	ldrb	r3, [r3, #0]
 80008f6:	2b01      	cmp	r3, #1
 80008f8:	d113      	bne.n	8000922 <HAL_TIM_PeriodElapsedCallback+0x8e>
		{
			HAL_GPIO_WritePin(PWR_LED_GPIO_Port,PWR_LED_Pin,GPIO_PIN_SET);//led on
 80008fa:	2380      	movs	r3, #128	; 0x80
 80008fc:	00d9      	lsls	r1, r3, #3
 80008fe:	2390      	movs	r3, #144	; 0x90
 8000900:	05db      	lsls	r3, r3, #23
 8000902:	2201      	movs	r2, #1
 8000904:	0018      	movs	r0, r3
 8000906:	f000 fe14 	bl	8001532 <HAL_GPIO_WritePin>
			if(villtimer == 0)
 800090a:	4b63      	ldr	r3, [pc, #396]	; (8000a98 <HAL_TIM_PeriodElapsedCallback+0x204>)
 800090c:	781b      	ldrb	r3, [r3, #0]
 800090e:	2b00      	cmp	r3, #0
 8000910:	d107      	bne.n	8000922 <HAL_TIM_PeriodElapsedCallback+0x8e>
			{
				HAL_GPIO_WritePin(PWR_LED_GPIO_Port,PWR_LED_Pin,GPIO_PIN_RESET);//led off
 8000912:	2380      	movs	r3, #128	; 0x80
 8000914:	00d9      	lsls	r1, r3, #3
 8000916:	2390      	movs	r3, #144	; 0x90
 8000918:	05db      	lsls	r3, r3, #23
 800091a:	2200      	movs	r2, #0
 800091c:	0018      	movs	r0, r3
 800091e:	f000 fe08 	bl	8001532 <HAL_GPIO_WritePin>
			}
		}
	}
	if(actgomb[0] == 0)
 8000922:	4b60      	ldr	r3, [pc, #384]	; (8000aa4 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	2b00      	cmp	r3, #0
 8000928:	d129      	bne.n	800097e <HAL_TIM_PeriodElapsedCallback+0xea>
	{
		gomb0hosszutime++;
 800092a:	4b5f      	ldr	r3, [pc, #380]	; (8000aa8 <HAL_TIM_PeriodElapsedCallback+0x214>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	1c5a      	adds	r2, r3, #1
 8000930:	4b5d      	ldr	r3, [pc, #372]	; (8000aa8 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8000932:	601a      	str	r2, [r3, #0]
		if(gomb0hosszutime > 3000)
 8000934:	4b5c      	ldr	r3, [pc, #368]	; (8000aa8 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a5c      	ldr	r2, [pc, #368]	; (8000aac <HAL_TIM_PeriodElapsedCallback+0x218>)
 800093a:	4293      	cmp	r3, r2
 800093c:	dd1f      	ble.n	800097e <HAL_TIM_PeriodElapsedCallback+0xea>
		{
			HAL_TIM_Base_Stop_IT(&htim17);
 800093e:	4b5c      	ldr	r3, [pc, #368]	; (8000ab0 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8000940:	0018      	movs	r0, r3
 8000942:	f001 fbd5 	bl	80020f0 <HAL_TIM_Base_Stop_IT>
			HAL_UART_Transmit(&huart1,pwron,6,100);
 8000946:	495b      	ldr	r1, [pc, #364]	; (8000ab4 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8000948:	485b      	ldr	r0, [pc, #364]	; (8000ab8 <HAL_TIM_PeriodElapsedCallback+0x224>)
 800094a:	2364      	movs	r3, #100	; 0x64
 800094c:	2206      	movs	r2, #6
 800094e:	f001 fe03 	bl	8002558 <HAL_UART_Transmit>
			pwrtime = 100;
 8000952:	4b5a      	ldr	r3, [pc, #360]	; (8000abc <HAL_TIM_PeriodElapsedCallback+0x228>)
 8000954:	2264      	movs	r2, #100	; 0x64
 8000956:	601a      	str	r2, [r3, #0]
			poweronflag = 1;
 8000958:	4b50      	ldr	r3, [pc, #320]	; (8000a9c <HAL_TIM_PeriodElapsedCallback+0x208>)
 800095a:	2201      	movs	r2, #1
 800095c:	701a      	strb	r2, [r3, #0]
			poweroffflag = 0;
 800095e:	4b50      	ldr	r3, [pc, #320]	; (8000aa0 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8000960:	2200      	movs	r2, #0
 8000962:	701a      	strb	r2, [r3, #0]
			gomb0hosszutime = 0;
 8000964:	4b50      	ldr	r3, [pc, #320]	; (8000aa8 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8000966:	2200      	movs	r2, #0
 8000968:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit(&huart1,powerinquiry,5,100);
 800096a:	4955      	ldr	r1, [pc, #340]	; (8000ac0 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 800096c:	4852      	ldr	r0, [pc, #328]	; (8000ab8 <HAL_TIM_PeriodElapsedCallback+0x224>)
 800096e:	2364      	movs	r3, #100	; 0x64
 8000970:	2205      	movs	r2, #5
 8000972:	f001 fdf1 	bl	8002558 <HAL_UART_Transmit>
			HAL_TIM_Base_Start_IT(&htim17);
 8000976:	4b4e      	ldr	r3, [pc, #312]	; (8000ab0 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8000978:	0018      	movs	r0, r3
 800097a:	f001 fb73 	bl	8002064 <HAL_TIM_Base_Start_IT>
		}

	}

	if(actgomb[0] == 1)
 800097e:	4b49      	ldr	r3, [pc, #292]	; (8000aa4 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	2b01      	cmp	r3, #1
 8000984:	d113      	bne.n	80009ae <HAL_TIM_PeriodElapsedCallback+0x11a>
	{
		if(gomb0hosszutime >0)
 8000986:	4b48      	ldr	r3, [pc, #288]	; (8000aa8 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	2b00      	cmp	r3, #0
 800098c:	dd05      	ble.n	800099a <HAL_TIM_PeriodElapsedCallback+0x106>
		{
			gomb0prell++;
 800098e:	4b4d      	ldr	r3, [pc, #308]	; (8000ac4 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8000990:	781b      	ldrb	r3, [r3, #0]
 8000992:	3301      	adds	r3, #1
 8000994:	b2da      	uxtb	r2, r3
 8000996:	4b4b      	ldr	r3, [pc, #300]	; (8000ac4 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8000998:	701a      	strb	r2, [r3, #0]
		}
		if(gomb0prell >50)
 800099a:	4b4a      	ldr	r3, [pc, #296]	; (8000ac4 <HAL_TIM_PeriodElapsedCallback+0x230>)
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	2b32      	cmp	r3, #50	; 0x32
 80009a0:	d905      	bls.n	80009ae <HAL_TIM_PeriodElapsedCallback+0x11a>
		{
			gomb0hosszutime = 0;
 80009a2:	4b41      	ldr	r3, [pc, #260]	; (8000aa8 <HAL_TIM_PeriodElapsedCallback+0x214>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	601a      	str	r2, [r3, #0]
			gomb0prell = 0;
 80009a8:	4b46      	ldr	r3, [pc, #280]	; (8000ac4 <HAL_TIM_PeriodElapsedCallback+0x230>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	701a      	strb	r2, [r3, #0]
		}

	}
	if(actgomb[3] == 0)
 80009ae:	4b3d      	ldr	r3, [pc, #244]	; (8000aa4 <HAL_TIM_PeriodElapsedCallback+0x210>)
 80009b0:	68db      	ldr	r3, [r3, #12]
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d12a      	bne.n	8000a0c <HAL_TIM_PeriodElapsedCallback+0x178>
	{
		gomb4hosszutime++;
 80009b6:	4b44      	ldr	r3, [pc, #272]	; (8000ac8 <HAL_TIM_PeriodElapsedCallback+0x234>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	1c5a      	adds	r2, r3, #1
 80009bc:	4b42      	ldr	r3, [pc, #264]	; (8000ac8 <HAL_TIM_PeriodElapsedCallback+0x234>)
 80009be:	601a      	str	r2, [r3, #0]
		if(gomb4hosszutime > 3000)
 80009c0:	4b41      	ldr	r3, [pc, #260]	; (8000ac8 <HAL_TIM_PeriodElapsedCallback+0x234>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4a39      	ldr	r2, [pc, #228]	; (8000aac <HAL_TIM_PeriodElapsedCallback+0x218>)
 80009c6:	4293      	cmp	r3, r2
 80009c8:	dd20      	ble.n	8000a0c <HAL_TIM_PeriodElapsedCallback+0x178>
		{
			HAL_TIM_Base_Stop_IT(&htim17);
 80009ca:	4b39      	ldr	r3, [pc, #228]	; (8000ab0 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 80009cc:	0018      	movs	r0, r3
 80009ce:	f001 fb8f 	bl	80020f0 <HAL_TIM_Base_Stop_IT>
			HAL_UART_Transmit(&huart1,pwroff,6,100);
 80009d2:	493e      	ldr	r1, [pc, #248]	; (8000acc <HAL_TIM_PeriodElapsedCallback+0x238>)
 80009d4:	4838      	ldr	r0, [pc, #224]	; (8000ab8 <HAL_TIM_PeriodElapsedCallback+0x224>)
 80009d6:	2364      	movs	r3, #100	; 0x64
 80009d8:	2206      	movs	r2, #6
 80009da:	f001 fdbd 	bl	8002558 <HAL_UART_Transmit>
			pwrtime = 300;
 80009de:	4b37      	ldr	r3, [pc, #220]	; (8000abc <HAL_TIM_PeriodElapsedCallback+0x228>)
 80009e0:	2296      	movs	r2, #150	; 0x96
 80009e2:	0052      	lsls	r2, r2, #1
 80009e4:	601a      	str	r2, [r3, #0]
			poweronflag = 0;
 80009e6:	4b2d      	ldr	r3, [pc, #180]	; (8000a9c <HAL_TIM_PeriodElapsedCallback+0x208>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	701a      	strb	r2, [r3, #0]
			poweroffflag = 1;
 80009ec:	4b2c      	ldr	r3, [pc, #176]	; (8000aa0 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 80009ee:	2201      	movs	r2, #1
 80009f0:	701a      	strb	r2, [r3, #0]
			gomb4hosszutime = 0;
 80009f2:	4b35      	ldr	r3, [pc, #212]	; (8000ac8 <HAL_TIM_PeriodElapsedCallback+0x234>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit(&huart1,powerinquiry,5,100);
 80009f8:	4931      	ldr	r1, [pc, #196]	; (8000ac0 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 80009fa:	482f      	ldr	r0, [pc, #188]	; (8000ab8 <HAL_TIM_PeriodElapsedCallback+0x224>)
 80009fc:	2364      	movs	r3, #100	; 0x64
 80009fe:	2205      	movs	r2, #5
 8000a00:	f001 fdaa 	bl	8002558 <HAL_UART_Transmit>
			HAL_TIM_Base_Start_IT(&htim17);
 8000a04:	4b2a      	ldr	r3, [pc, #168]	; (8000ab0 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8000a06:	0018      	movs	r0, r3
 8000a08:	f001 fb2c 	bl	8002064 <HAL_TIM_Base_Start_IT>
		}
	}
	if(actgomb[3] == 1)
 8000a0c:	4b25      	ldr	r3, [pc, #148]	; (8000aa4 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8000a0e:	68db      	ldr	r3, [r3, #12]
 8000a10:	2b01      	cmp	r3, #1
 8000a12:	d113      	bne.n	8000a3c <HAL_TIM_PeriodElapsedCallback+0x1a8>
	{
			if(gomb4hosszutime >0)
 8000a14:	4b2c      	ldr	r3, [pc, #176]	; (8000ac8 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	dd05      	ble.n	8000a28 <HAL_TIM_PeriodElapsedCallback+0x194>
		{
			gomb3prell++;
 8000a1c:	4b2c      	ldr	r3, [pc, #176]	; (8000ad0 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	3301      	adds	r3, #1
 8000a22:	b2da      	uxtb	r2, r3
 8000a24:	4b2a      	ldr	r3, [pc, #168]	; (8000ad0 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8000a26:	701a      	strb	r2, [r3, #0]
		}
		if(gomb3prell >50)
 8000a28:	4b29      	ldr	r3, [pc, #164]	; (8000ad0 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	2b32      	cmp	r3, #50	; 0x32
 8000a2e:	d905      	bls.n	8000a3c <HAL_TIM_PeriodElapsedCallback+0x1a8>
		{
			gomb4hosszutime = 0;
 8000a30:	4b25      	ldr	r3, [pc, #148]	; (8000ac8 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	601a      	str	r2, [r3, #0]
			gomb3prell = 0;
 8000a36:	4b26      	ldr	r3, [pc, #152]	; (8000ad0 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	701a      	strb	r2, [r3, #0]
		}
	}

	if(pwrtime >0)
 8000a3c:	4b1f      	ldr	r3, [pc, #124]	; (8000abc <HAL_TIM_PeriodElapsedCallback+0x228>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	dd22      	ble.n	8000a8a <HAL_TIM_PeriodElapsedCallback+0x1f6>
	{
		pwrtime--;
 8000a44:	4b1d      	ldr	r3, [pc, #116]	; (8000abc <HAL_TIM_PeriodElapsedCallback+0x228>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	1e5a      	subs	r2, r3, #1
 8000a4a:	4b1c      	ldr	r3, [pc, #112]	; (8000abc <HAL_TIM_PeriodElapsedCallback+0x228>)
 8000a4c:	601a      	str	r2, [r3, #0]
		if((pwrtime == 0)||(pwrtime == 99)||(pwrtime == 150)||(pwrtime == 250))
 8000a4e:	4b1b      	ldr	r3, [pc, #108]	; (8000abc <HAL_TIM_PeriodElapsedCallback+0x228>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d00b      	beq.n	8000a6e <HAL_TIM_PeriodElapsedCallback+0x1da>
 8000a56:	4b19      	ldr	r3, [pc, #100]	; (8000abc <HAL_TIM_PeriodElapsedCallback+0x228>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	2b63      	cmp	r3, #99	; 0x63
 8000a5c:	d007      	beq.n	8000a6e <HAL_TIM_PeriodElapsedCallback+0x1da>
 8000a5e:	4b17      	ldr	r3, [pc, #92]	; (8000abc <HAL_TIM_PeriodElapsedCallback+0x228>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	2b96      	cmp	r3, #150	; 0x96
 8000a64:	d003      	beq.n	8000a6e <HAL_TIM_PeriodElapsedCallback+0x1da>
 8000a66:	4b15      	ldr	r3, [pc, #84]	; (8000abc <HAL_TIM_PeriodElapsedCallback+0x228>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	2bfa      	cmp	r3, #250	; 0xfa
 8000a6c:	d10d      	bne.n	8000a8a <HAL_TIM_PeriodElapsedCallback+0x1f6>
		{
			HAL_TIM_Base_Stop_IT(&htim17);
 8000a6e:	4b10      	ldr	r3, [pc, #64]	; (8000ab0 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8000a70:	0018      	movs	r0, r3
 8000a72:	f001 fb3d 	bl	80020f0 <HAL_TIM_Base_Stop_IT>
			HAL_UART_Transmit(&huart1,powerinquiry,5,100);
 8000a76:	4912      	ldr	r1, [pc, #72]	; (8000ac0 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8000a78:	480f      	ldr	r0, [pc, #60]	; (8000ab8 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8000a7a:	2364      	movs	r3, #100	; 0x64
 8000a7c:	2205      	movs	r2, #5
 8000a7e:	f001 fd6b 	bl	8002558 <HAL_UART_Transmit>
			HAL_TIM_Base_Start_IT(&htim17);
 8000a82:	4b0b      	ldr	r3, [pc, #44]	; (8000ab0 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8000a84:	0018      	movs	r0, r3
 8000a86:	f001 faed 	bl	8002064 <HAL_TIM_Base_Start_IT>
		}
	}

}
 8000a8a:	46c0      	nop			; (mov r8, r8)
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	b002      	add	sp, #8
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	46c0      	nop			; (mov r8, r8)
 8000a94:	20000128 	.word	0x20000128
 8000a98:	2000019a 	.word	0x2000019a
 8000a9c:	20000198 	.word	0x20000198
 8000aa0:	20000199 	.word	0x20000199
 8000aa4:	20000100 	.word	0x20000100
 8000aa8:	2000019c 	.word	0x2000019c
 8000aac:	00000bb8 	.word	0x00000bb8
 8000ab0:	20000030 	.word	0x20000030
 8000ab4:	08003984 	.word	0x08003984
 8000ab8:	20000078 	.word	0x20000078
 8000abc:	200001a4 	.word	0x200001a4
 8000ac0:	080039bc 	.word	0x080039bc
 8000ac4:	2000012c 	.word	0x2000012c
 8000ac8:	200001a0 	.word	0x200001a0
 8000acc:	0800398c 	.word	0x0800398c
 8000ad0:	2000012d 	.word	0x2000012d

08000ad4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
	uartbuff[uartcount] = uartbuf;
 8000adc:	4b50      	ldr	r3, [pc, #320]	; (8000c20 <HAL_UART_RxCpltCallback+0x14c>)
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	001a      	movs	r2, r3
 8000ae2:	4b50      	ldr	r3, [pc, #320]	; (8000c24 <HAL_UART_RxCpltCallback+0x150>)
 8000ae4:	7819      	ldrb	r1, [r3, #0]
 8000ae6:	4b50      	ldr	r3, [pc, #320]	; (8000c28 <HAL_UART_RxCpltCallback+0x154>)
 8000ae8:	5499      	strb	r1, [r3, r2]
	uartcount++;
 8000aea:	4b4d      	ldr	r3, [pc, #308]	; (8000c20 <HAL_UART_RxCpltCallback+0x14c>)
 8000aec:	781b      	ldrb	r3, [r3, #0]
 8000aee:	3301      	adds	r3, #1
 8000af0:	b2da      	uxtb	r2, r3
 8000af2:	4b4b      	ldr	r3, [pc, #300]	; (8000c20 <HAL_UART_RxCpltCallback+0x14c>)
 8000af4:	701a      	strb	r2, [r3, #0]
	if(uartcount > 5)
 8000af6:	4b4a      	ldr	r3, [pc, #296]	; (8000c20 <HAL_UART_RxCpltCallback+0x14c>)
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	2b05      	cmp	r3, #5
 8000afc:	d908      	bls.n	8000b10 <HAL_UART_RxCpltCallback+0x3c>
	{
		uartcount = 0;
 8000afe:	4b48      	ldr	r3, [pc, #288]	; (8000c20 <HAL_UART_RxCpltCallback+0x14c>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	701a      	strb	r2, [r3, #0]
		memset(uartbuff,0,10);
 8000b04:	4b48      	ldr	r3, [pc, #288]	; (8000c28 <HAL_UART_RxCpltCallback+0x154>)
 8000b06:	220a      	movs	r2, #10
 8000b08:	2100      	movs	r1, #0
 8000b0a:	0018      	movs	r0, r3
 8000b0c:	f002 ff26 	bl	800395c <memset>
	}

	if((uartbuff[0] == 0x90)&&(uartbuff[1] == 0x41)&&(uartbuff[2] == 0xFF))
 8000b10:	4b45      	ldr	r3, [pc, #276]	; (8000c28 <HAL_UART_RxCpltCallback+0x154>)
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	2b90      	cmp	r3, #144	; 0x90
 8000b16:	d117      	bne.n	8000b48 <HAL_UART_RxCpltCallback+0x74>
 8000b18:	4b43      	ldr	r3, [pc, #268]	; (8000c28 <HAL_UART_RxCpltCallback+0x154>)
 8000b1a:	785b      	ldrb	r3, [r3, #1]
 8000b1c:	2b41      	cmp	r3, #65	; 0x41
 8000b1e:	d113      	bne.n	8000b48 <HAL_UART_RxCpltCallback+0x74>
 8000b20:	4b41      	ldr	r3, [pc, #260]	; (8000c28 <HAL_UART_RxCpltCallback+0x154>)
 8000b22:	789b      	ldrb	r3, [r3, #2]
 8000b24:	2bff      	cmp	r3, #255	; 0xff
 8000b26:	d10f      	bne.n	8000b48 <HAL_UART_RxCpltCallback+0x74>
	{
		villtimer = 200;
 8000b28:	4b40      	ldr	r3, [pc, #256]	; (8000c2c <HAL_UART_RxCpltCallback+0x158>)
 8000b2a:	22c8      	movs	r2, #200	; 0xc8
 8000b2c:	701a      	strb	r2, [r3, #0]
		uartcount = 0;
 8000b2e:	4b3c      	ldr	r3, [pc, #240]	; (8000c20 <HAL_UART_RxCpltCallback+0x14c>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	701a      	strb	r2, [r3, #0]
		ackflag = 1;
 8000b34:	4b3e      	ldr	r3, [pc, #248]	; (8000c30 <HAL_UART_RxCpltCallback+0x15c>)
 8000b36:	2201      	movs	r2, #1
 8000b38:	701a      	strb	r2, [r3, #0]
		memset(uartbuff,0,10);
 8000b3a:	4b3b      	ldr	r3, [pc, #236]	; (8000c28 <HAL_UART_RxCpltCallback+0x154>)
 8000b3c:	220a      	movs	r2, #10
 8000b3e:	2100      	movs	r1, #0
 8000b40:	0018      	movs	r0, r3
 8000b42:	f002 ff0b 	bl	800395c <memset>
 8000b46:	e060      	b.n	8000c0a <HAL_UART_RxCpltCallback+0x136>
	}else if((uartbuff[0] == 0x90)&&(uartbuff[1] == 0x51)&&(uartbuff[2] == 0xFF))
 8000b48:	4b37      	ldr	r3, [pc, #220]	; (8000c28 <HAL_UART_RxCpltCallback+0x154>)
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	2b90      	cmp	r3, #144	; 0x90
 8000b4e:	d117      	bne.n	8000b80 <HAL_UART_RxCpltCallback+0xac>
 8000b50:	4b35      	ldr	r3, [pc, #212]	; (8000c28 <HAL_UART_RxCpltCallback+0x154>)
 8000b52:	785b      	ldrb	r3, [r3, #1]
 8000b54:	2b51      	cmp	r3, #81	; 0x51
 8000b56:	d113      	bne.n	8000b80 <HAL_UART_RxCpltCallback+0xac>
 8000b58:	4b33      	ldr	r3, [pc, #204]	; (8000c28 <HAL_UART_RxCpltCallback+0x154>)
 8000b5a:	789b      	ldrb	r3, [r3, #2]
 8000b5c:	2bff      	cmp	r3, #255	; 0xff
 8000b5e:	d10f      	bne.n	8000b80 <HAL_UART_RxCpltCallback+0xac>
	{
		villtimer = 200;
 8000b60:	4b32      	ldr	r3, [pc, #200]	; (8000c2c <HAL_UART_RxCpltCallback+0x158>)
 8000b62:	22c8      	movs	r2, #200	; 0xc8
 8000b64:	701a      	strb	r2, [r3, #0]
		uartcount = 0;
 8000b66:	4b2e      	ldr	r3, [pc, #184]	; (8000c20 <HAL_UART_RxCpltCallback+0x14c>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	701a      	strb	r2, [r3, #0]
		cpltflag = 1;
 8000b6c:	4b31      	ldr	r3, [pc, #196]	; (8000c34 <HAL_UART_RxCpltCallback+0x160>)
 8000b6e:	2201      	movs	r2, #1
 8000b70:	701a      	strb	r2, [r3, #0]
		memset(uartbuff,0,10);
 8000b72:	4b2d      	ldr	r3, [pc, #180]	; (8000c28 <HAL_UART_RxCpltCallback+0x154>)
 8000b74:	220a      	movs	r2, #10
 8000b76:	2100      	movs	r1, #0
 8000b78:	0018      	movs	r0, r3
 8000b7a:	f002 feef 	bl	800395c <memset>
 8000b7e:	e044      	b.n	8000c0a <HAL_UART_RxCpltCallback+0x136>
	}
	else if((uartbuff[0] == 0x90)&&(uartbuff[1] == 0x50)&&(uartbuff[2] == 0x02)&&(uartbuff[3] == 0xFF))//pwr on
 8000b80:	4b29      	ldr	r3, [pc, #164]	; (8000c28 <HAL_UART_RxCpltCallback+0x154>)
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	2b90      	cmp	r3, #144	; 0x90
 8000b86:	d11e      	bne.n	8000bc6 <HAL_UART_RxCpltCallback+0xf2>
 8000b88:	4b27      	ldr	r3, [pc, #156]	; (8000c28 <HAL_UART_RxCpltCallback+0x154>)
 8000b8a:	785b      	ldrb	r3, [r3, #1]
 8000b8c:	2b50      	cmp	r3, #80	; 0x50
 8000b8e:	d11a      	bne.n	8000bc6 <HAL_UART_RxCpltCallback+0xf2>
 8000b90:	4b25      	ldr	r3, [pc, #148]	; (8000c28 <HAL_UART_RxCpltCallback+0x154>)
 8000b92:	789b      	ldrb	r3, [r3, #2]
 8000b94:	2b02      	cmp	r3, #2
 8000b96:	d116      	bne.n	8000bc6 <HAL_UART_RxCpltCallback+0xf2>
 8000b98:	4b23      	ldr	r3, [pc, #140]	; (8000c28 <HAL_UART_RxCpltCallback+0x154>)
 8000b9a:	78db      	ldrb	r3, [r3, #3]
 8000b9c:	2bff      	cmp	r3, #255	; 0xff
 8000b9e:	d112      	bne.n	8000bc6 <HAL_UART_RxCpltCallback+0xf2>
	{
		villtimer = 200;
 8000ba0:	4b22      	ldr	r3, [pc, #136]	; (8000c2c <HAL_UART_RxCpltCallback+0x158>)
 8000ba2:	22c8      	movs	r2, #200	; 0xc8
 8000ba4:	701a      	strb	r2, [r3, #0]
		uartcount = 0;
 8000ba6:	4b1e      	ldr	r3, [pc, #120]	; (8000c20 <HAL_UART_RxCpltCallback+0x14c>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	701a      	strb	r2, [r3, #0]
		poweronflag = 1;
 8000bac:	4b22      	ldr	r3, [pc, #136]	; (8000c38 <HAL_UART_RxCpltCallback+0x164>)
 8000bae:	2201      	movs	r2, #1
 8000bb0:	701a      	strb	r2, [r3, #0]
		poweroffflag = 0;
 8000bb2:	4b22      	ldr	r3, [pc, #136]	; (8000c3c <HAL_UART_RxCpltCallback+0x168>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	701a      	strb	r2, [r3, #0]
		memset(uartbuff,0,10);
 8000bb8:	4b1b      	ldr	r3, [pc, #108]	; (8000c28 <HAL_UART_RxCpltCallback+0x154>)
 8000bba:	220a      	movs	r2, #10
 8000bbc:	2100      	movs	r1, #0
 8000bbe:	0018      	movs	r0, r3
 8000bc0:	f002 fecc 	bl	800395c <memset>
 8000bc4:	e021      	b.n	8000c0a <HAL_UART_RxCpltCallback+0x136>
	}else if((uartbuff[0] == 0x90)&&(uartbuff[1] == 0x50)&&(uartbuff[2] == 0x03)&&(uartbuff[3] == 0xFF))//pwr off
 8000bc6:	4b18      	ldr	r3, [pc, #96]	; (8000c28 <HAL_UART_RxCpltCallback+0x154>)
 8000bc8:	781b      	ldrb	r3, [r3, #0]
 8000bca:	2b90      	cmp	r3, #144	; 0x90
 8000bcc:	d11d      	bne.n	8000c0a <HAL_UART_RxCpltCallback+0x136>
 8000bce:	4b16      	ldr	r3, [pc, #88]	; (8000c28 <HAL_UART_RxCpltCallback+0x154>)
 8000bd0:	785b      	ldrb	r3, [r3, #1]
 8000bd2:	2b50      	cmp	r3, #80	; 0x50
 8000bd4:	d119      	bne.n	8000c0a <HAL_UART_RxCpltCallback+0x136>
 8000bd6:	4b14      	ldr	r3, [pc, #80]	; (8000c28 <HAL_UART_RxCpltCallback+0x154>)
 8000bd8:	789b      	ldrb	r3, [r3, #2]
 8000bda:	2b03      	cmp	r3, #3
 8000bdc:	d115      	bne.n	8000c0a <HAL_UART_RxCpltCallback+0x136>
 8000bde:	4b12      	ldr	r3, [pc, #72]	; (8000c28 <HAL_UART_RxCpltCallback+0x154>)
 8000be0:	78db      	ldrb	r3, [r3, #3]
 8000be2:	2bff      	cmp	r3, #255	; 0xff
 8000be4:	d111      	bne.n	8000c0a <HAL_UART_RxCpltCallback+0x136>
	{
		villtimer = 200;
 8000be6:	4b11      	ldr	r3, [pc, #68]	; (8000c2c <HAL_UART_RxCpltCallback+0x158>)
 8000be8:	22c8      	movs	r2, #200	; 0xc8
 8000bea:	701a      	strb	r2, [r3, #0]
		uartcount = 0;
 8000bec:	4b0c      	ldr	r3, [pc, #48]	; (8000c20 <HAL_UART_RxCpltCallback+0x14c>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	701a      	strb	r2, [r3, #0]
		poweroffflag = 1;
 8000bf2:	4b12      	ldr	r3, [pc, #72]	; (8000c3c <HAL_UART_RxCpltCallback+0x168>)
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	701a      	strb	r2, [r3, #0]
		poweronflag = 0;
 8000bf8:	4b0f      	ldr	r3, [pc, #60]	; (8000c38 <HAL_UART_RxCpltCallback+0x164>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	701a      	strb	r2, [r3, #0]
		memset(uartbuff,0,10);
 8000bfe:	4b0a      	ldr	r3, [pc, #40]	; (8000c28 <HAL_UART_RxCpltCallback+0x154>)
 8000c00:	220a      	movs	r2, #10
 8000c02:	2100      	movs	r1, #0
 8000c04:	0018      	movs	r0, r3
 8000c06:	f002 fea9 	bl	800395c <memset>
	}
	HAL_UART_Receive_IT(&huart1,&uartbuf,1);
 8000c0a:	4906      	ldr	r1, [pc, #24]	; (8000c24 <HAL_UART_RxCpltCallback+0x150>)
 8000c0c:	4b0c      	ldr	r3, [pc, #48]	; (8000c40 <HAL_UART_RxCpltCallback+0x16c>)
 8000c0e:	2201      	movs	r2, #1
 8000c10:	0018      	movs	r0, r3
 8000c12:	f001 fd41 	bl	8002698 <HAL_UART_Receive_IT>
}
 8000c16:	46c0      	nop			; (mov r8, r8)
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	b002      	add	sp, #8
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	46c0      	nop			; (mov r8, r8)
 8000c20:	20000195 	.word	0x20000195
 8000c24:	20000194 	.word	0x20000194
 8000c28:	20000130 	.word	0x20000130
 8000c2c:	2000019a 	.word	0x2000019a
 8000c30:	20000196 	.word	0x20000196
 8000c34:	20000197 	.word	0x20000197
 8000c38:	20000198 	.word	0x20000198
 8000c3c:	20000199 	.word	0x20000199
 8000c40:	20000078 	.word	0x20000078

08000c44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
						/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000c48:	46c0      	nop			; (mov r8, r8)
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
	...

08000c50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c56:	4b0f      	ldr	r3, [pc, #60]	; (8000c94 <HAL_MspInit+0x44>)
 8000c58:	699a      	ldr	r2, [r3, #24]
 8000c5a:	4b0e      	ldr	r3, [pc, #56]	; (8000c94 <HAL_MspInit+0x44>)
 8000c5c:	2101      	movs	r1, #1
 8000c5e:	430a      	orrs	r2, r1
 8000c60:	619a      	str	r2, [r3, #24]
 8000c62:	4b0c      	ldr	r3, [pc, #48]	; (8000c94 <HAL_MspInit+0x44>)
 8000c64:	699b      	ldr	r3, [r3, #24]
 8000c66:	2201      	movs	r2, #1
 8000c68:	4013      	ands	r3, r2
 8000c6a:	607b      	str	r3, [r7, #4]
 8000c6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c6e:	4b09      	ldr	r3, [pc, #36]	; (8000c94 <HAL_MspInit+0x44>)
 8000c70:	69da      	ldr	r2, [r3, #28]
 8000c72:	4b08      	ldr	r3, [pc, #32]	; (8000c94 <HAL_MspInit+0x44>)
 8000c74:	2180      	movs	r1, #128	; 0x80
 8000c76:	0549      	lsls	r1, r1, #21
 8000c78:	430a      	orrs	r2, r1
 8000c7a:	61da      	str	r2, [r3, #28]
 8000c7c:	4b05      	ldr	r3, [pc, #20]	; (8000c94 <HAL_MspInit+0x44>)
 8000c7e:	69da      	ldr	r2, [r3, #28]
 8000c80:	2380      	movs	r3, #128	; 0x80
 8000c82:	055b      	lsls	r3, r3, #21
 8000c84:	4013      	ands	r3, r2
 8000c86:	603b      	str	r3, [r7, #0]
 8000c88:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c8a:	46c0      	nop			; (mov r8, r8)
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	b002      	add	sp, #8
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	46c0      	nop			; (mov r8, r8)
 8000c94:	40021000 	.word	0x40021000

08000c98 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b084      	sub	sp, #16
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a0e      	ldr	r2, [pc, #56]	; (8000ce0 <HAL_TIM_Base_MspInit+0x48>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d115      	bne.n	8000cd6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 8000caa:	4b0e      	ldr	r3, [pc, #56]	; (8000ce4 <HAL_TIM_Base_MspInit+0x4c>)
 8000cac:	699a      	ldr	r2, [r3, #24]
 8000cae:	4b0d      	ldr	r3, [pc, #52]	; (8000ce4 <HAL_TIM_Base_MspInit+0x4c>)
 8000cb0:	2180      	movs	r1, #128	; 0x80
 8000cb2:	02c9      	lsls	r1, r1, #11
 8000cb4:	430a      	orrs	r2, r1
 8000cb6:	619a      	str	r2, [r3, #24]
 8000cb8:	4b0a      	ldr	r3, [pc, #40]	; (8000ce4 <HAL_TIM_Base_MspInit+0x4c>)
 8000cba:	699a      	ldr	r2, [r3, #24]
 8000cbc:	2380      	movs	r3, #128	; 0x80
 8000cbe:	02db      	lsls	r3, r3, #11
 8000cc0:	4013      	ands	r3, r2
 8000cc2:	60fb      	str	r3, [r7, #12]
 8000cc4:	68fb      	ldr	r3, [r7, #12]
    /* TIM17 interrupt Init */
    HAL_NVIC_SetPriority(TIM17_IRQn, 3, 0);
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	2103      	movs	r1, #3
 8000cca:	2016      	movs	r0, #22
 8000ccc:	f000 f9f4 	bl	80010b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8000cd0:	2016      	movs	r0, #22
 8000cd2:	f000 fa06 	bl	80010e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8000cd6:	46c0      	nop			; (mov r8, r8)
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	b004      	add	sp, #16
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	46c0      	nop			; (mov r8, r8)
 8000ce0:	40014800 	.word	0x40014800
 8000ce4:	40021000 	.word	0x40021000

08000ce8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ce8:	b590      	push	{r4, r7, lr}
 8000cea:	b08b      	sub	sp, #44	; 0x2c
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf0:	2414      	movs	r4, #20
 8000cf2:	193b      	adds	r3, r7, r4
 8000cf4:	0018      	movs	r0, r3
 8000cf6:	2314      	movs	r3, #20
 8000cf8:	001a      	movs	r2, r3
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	f002 fe2e 	bl	800395c <memset>
  if(huart->Instance==USART1)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a20      	ldr	r2, [pc, #128]	; (8000d88 <HAL_UART_MspInit+0xa0>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d13a      	bne.n	8000d80 <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d0a:	4b20      	ldr	r3, [pc, #128]	; (8000d8c <HAL_UART_MspInit+0xa4>)
 8000d0c:	699a      	ldr	r2, [r3, #24]
 8000d0e:	4b1f      	ldr	r3, [pc, #124]	; (8000d8c <HAL_UART_MspInit+0xa4>)
 8000d10:	2180      	movs	r1, #128	; 0x80
 8000d12:	01c9      	lsls	r1, r1, #7
 8000d14:	430a      	orrs	r2, r1
 8000d16:	619a      	str	r2, [r3, #24]
 8000d18:	4b1c      	ldr	r3, [pc, #112]	; (8000d8c <HAL_UART_MspInit+0xa4>)
 8000d1a:	699a      	ldr	r2, [r3, #24]
 8000d1c:	2380      	movs	r3, #128	; 0x80
 8000d1e:	01db      	lsls	r3, r3, #7
 8000d20:	4013      	ands	r3, r2
 8000d22:	613b      	str	r3, [r7, #16]
 8000d24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d26:	4b19      	ldr	r3, [pc, #100]	; (8000d8c <HAL_UART_MspInit+0xa4>)
 8000d28:	695a      	ldr	r2, [r3, #20]
 8000d2a:	4b18      	ldr	r3, [pc, #96]	; (8000d8c <HAL_UART_MspInit+0xa4>)
 8000d2c:	2180      	movs	r1, #128	; 0x80
 8000d2e:	0289      	lsls	r1, r1, #10
 8000d30:	430a      	orrs	r2, r1
 8000d32:	615a      	str	r2, [r3, #20]
 8000d34:	4b15      	ldr	r3, [pc, #84]	; (8000d8c <HAL_UART_MspInit+0xa4>)
 8000d36:	695a      	ldr	r2, [r3, #20]
 8000d38:	2380      	movs	r3, #128	; 0x80
 8000d3a:	029b      	lsls	r3, r3, #10
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	60fb      	str	r3, [r7, #12]
 8000d40:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA2     ------> USART1_TX
    PA3     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000d42:	0021      	movs	r1, r4
 8000d44:	187b      	adds	r3, r7, r1
 8000d46:	220c      	movs	r2, #12
 8000d48:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d4a:	187b      	adds	r3, r7, r1
 8000d4c:	2202      	movs	r2, #2
 8000d4e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d50:	187b      	adds	r3, r7, r1
 8000d52:	2200      	movs	r2, #0
 8000d54:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d56:	187b      	adds	r3, r7, r1
 8000d58:	2203      	movs	r2, #3
 8000d5a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000d5c:	187b      	adds	r3, r7, r1
 8000d5e:	2201      	movs	r2, #1
 8000d60:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d62:	187a      	adds	r2, r7, r1
 8000d64:	2390      	movs	r3, #144	; 0x90
 8000d66:	05db      	lsls	r3, r3, #23
 8000d68:	0011      	movs	r1, r2
 8000d6a:	0018      	movs	r0, r3
 8000d6c:	f000 fa54 	bl	8001218 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000d70:	2200      	movs	r2, #0
 8000d72:	2100      	movs	r1, #0
 8000d74:	201b      	movs	r0, #27
 8000d76:	f000 f99f 	bl	80010b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000d7a:	201b      	movs	r0, #27
 8000d7c:	f000 f9b1 	bl	80010e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000d80:	46c0      	nop			; (mov r8, r8)
 8000d82:	46bd      	mov	sp, r7
 8000d84:	b00b      	add	sp, #44	; 0x2c
 8000d86:	bd90      	pop	{r4, r7, pc}
 8000d88:	40013800 	.word	0x40013800
 8000d8c:	40021000 	.word	0x40021000

08000d90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d94:	e7fe      	b.n	8000d94 <NMI_Handler+0x4>

08000d96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d96:	b580      	push	{r7, lr}
 8000d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d9a:	e7fe      	b.n	8000d9a <HardFault_Handler+0x4>

08000d9c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000da0:	46c0      	nop			; (mov r8, r8)
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}

08000da6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000da6:	b580      	push	{r7, lr}
 8000da8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000daa:	46c0      	nop			; (mov r8, r8)
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}

08000db0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000db4:	f000 f894 	bl	8000ee0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000db8:	46c0      	nop			; (mov r8, r8)
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
	...

08000dc0 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8000dc4:	4b03      	ldr	r3, [pc, #12]	; (8000dd4 <TIM17_IRQHandler+0x14>)
 8000dc6:	0018      	movs	r0, r3
 8000dc8:	f001 f9c0 	bl	800214c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8000dcc:	46c0      	nop			; (mov r8, r8)
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	46c0      	nop			; (mov r8, r8)
 8000dd4:	20000030 	.word	0x20000030

08000dd8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000ddc:	4b03      	ldr	r3, [pc, #12]	; (8000dec <USART1_IRQHandler+0x14>)
 8000dde:	0018      	movs	r0, r3
 8000de0:	f001 fcb2 	bl	8002748 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000de4:	46c0      	nop			; (mov r8, r8)
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	46c0      	nop			; (mov r8, r8)
 8000dec:	20000078 	.word	0x20000078

08000df0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000df4:	46c0      	nop			; (mov r8, r8)
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
	...

08000dfc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000dfc:	480d      	ldr	r0, [pc, #52]	; (8000e34 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000dfe:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e00:	f7ff fff6 	bl	8000df0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e04:	480c      	ldr	r0, [pc, #48]	; (8000e38 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e06:	490d      	ldr	r1, [pc, #52]	; (8000e3c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e08:	4a0d      	ldr	r2, [pc, #52]	; (8000e40 <LoopForever+0xe>)
  movs r3, #0
 8000e0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e0c:	e002      	b.n	8000e14 <LoopCopyDataInit>

08000e0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e12:	3304      	adds	r3, #4

08000e14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e18:	d3f9      	bcc.n	8000e0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e1a:	4a0a      	ldr	r2, [pc, #40]	; (8000e44 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e1c:	4c0a      	ldr	r4, [pc, #40]	; (8000e48 <LoopForever+0x16>)
  movs r3, #0
 8000e1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e20:	e001      	b.n	8000e26 <LoopFillZerobss>

08000e22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e24:	3204      	adds	r2, #4

08000e26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e28:	d3fb      	bcc.n	8000e22 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000e2a:	f002 fd73 	bl	8003914 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e2e:	f7ff fa33 	bl	8000298 <main>

08000e32 <LoopForever>:

LoopForever:
    b LoopForever
 8000e32:	e7fe      	b.n	8000e32 <LoopForever>
  ldr   r0, =_estack
 8000e34:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8000e38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e3c:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000e40:	08003a04 	.word	0x08003a04
  ldr r2, =_sbss
 8000e44:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000e48:	200001ac 	.word	0x200001ac

08000e4c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e4c:	e7fe      	b.n	8000e4c <ADC1_IRQHandler>
	...

08000e50 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e54:	4b07      	ldr	r3, [pc, #28]	; (8000e74 <HAL_Init+0x24>)
 8000e56:	681a      	ldr	r2, [r3, #0]
 8000e58:	4b06      	ldr	r3, [pc, #24]	; (8000e74 <HAL_Init+0x24>)
 8000e5a:	2110      	movs	r1, #16
 8000e5c:	430a      	orrs	r2, r1
 8000e5e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000e60:	2001      	movs	r0, #1
 8000e62:	f000 f809 	bl	8000e78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e66:	f7ff fef3 	bl	8000c50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e6a:	2300      	movs	r3, #0
}
 8000e6c:	0018      	movs	r0, r3
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	46c0      	nop			; (mov r8, r8)
 8000e74:	40022000 	.word	0x40022000

08000e78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e78:	b590      	push	{r4, r7, lr}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e80:	4b14      	ldr	r3, [pc, #80]	; (8000ed4 <HAL_InitTick+0x5c>)
 8000e82:	681c      	ldr	r4, [r3, #0]
 8000e84:	4b14      	ldr	r3, [pc, #80]	; (8000ed8 <HAL_InitTick+0x60>)
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	0019      	movs	r1, r3
 8000e8a:	23fa      	movs	r3, #250	; 0xfa
 8000e8c:	0098      	lsls	r0, r3, #2
 8000e8e:	f7ff f93b 	bl	8000108 <__udivsi3>
 8000e92:	0003      	movs	r3, r0
 8000e94:	0019      	movs	r1, r3
 8000e96:	0020      	movs	r0, r4
 8000e98:	f7ff f936 	bl	8000108 <__udivsi3>
 8000e9c:	0003      	movs	r3, r0
 8000e9e:	0018      	movs	r0, r3
 8000ea0:	f000 f92f 	bl	8001102 <HAL_SYSTICK_Config>
 8000ea4:	1e03      	subs	r3, r0, #0
 8000ea6:	d001      	beq.n	8000eac <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	e00f      	b.n	8000ecc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	2b03      	cmp	r3, #3
 8000eb0:	d80b      	bhi.n	8000eca <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000eb2:	6879      	ldr	r1, [r7, #4]
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	425b      	negs	r3, r3
 8000eb8:	2200      	movs	r2, #0
 8000eba:	0018      	movs	r0, r3
 8000ebc:	f000 f8fc 	bl	80010b8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ec0:	4b06      	ldr	r3, [pc, #24]	; (8000edc <HAL_InitTick+0x64>)
 8000ec2:	687a      	ldr	r2, [r7, #4]
 8000ec4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	e000      	b.n	8000ecc <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000eca:	2301      	movs	r3, #1
}
 8000ecc:	0018      	movs	r0, r3
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	b003      	add	sp, #12
 8000ed2:	bd90      	pop	{r4, r7, pc}
 8000ed4:	20000008 	.word	0x20000008
 8000ed8:	20000010 	.word	0x20000010
 8000edc:	2000000c 	.word	0x2000000c

08000ee0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ee4:	4b05      	ldr	r3, [pc, #20]	; (8000efc <HAL_IncTick+0x1c>)
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	001a      	movs	r2, r3
 8000eea:	4b05      	ldr	r3, [pc, #20]	; (8000f00 <HAL_IncTick+0x20>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	18d2      	adds	r2, r2, r3
 8000ef0:	4b03      	ldr	r3, [pc, #12]	; (8000f00 <HAL_IncTick+0x20>)
 8000ef2:	601a      	str	r2, [r3, #0]
}
 8000ef4:	46c0      	nop			; (mov r8, r8)
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	46c0      	nop			; (mov r8, r8)
 8000efc:	20000010 	.word	0x20000010
 8000f00:	200001a8 	.word	0x200001a8

08000f04 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
  return uwTick;
 8000f08:	4b02      	ldr	r3, [pc, #8]	; (8000f14 <HAL_GetTick+0x10>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
}
 8000f0c:	0018      	movs	r0, r3
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	46c0      	nop			; (mov r8, r8)
 8000f14:	200001a8 	.word	0x200001a8

08000f18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b084      	sub	sp, #16
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f20:	f7ff fff0 	bl	8000f04 <HAL_GetTick>
 8000f24:	0003      	movs	r3, r0
 8000f26:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	3301      	adds	r3, #1
 8000f30:	d005      	beq.n	8000f3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f32:	4b0a      	ldr	r3, [pc, #40]	; (8000f5c <HAL_Delay+0x44>)
 8000f34:	781b      	ldrb	r3, [r3, #0]
 8000f36:	001a      	movs	r2, r3
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	189b      	adds	r3, r3, r2
 8000f3c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000f3e:	46c0      	nop			; (mov r8, r8)
 8000f40:	f7ff ffe0 	bl	8000f04 <HAL_GetTick>
 8000f44:	0002      	movs	r2, r0
 8000f46:	68bb      	ldr	r3, [r7, #8]
 8000f48:	1ad3      	subs	r3, r2, r3
 8000f4a:	68fa      	ldr	r2, [r7, #12]
 8000f4c:	429a      	cmp	r2, r3
 8000f4e:	d8f7      	bhi.n	8000f40 <HAL_Delay+0x28>
  {
  }
}
 8000f50:	46c0      	nop			; (mov r8, r8)
 8000f52:	46c0      	nop			; (mov r8, r8)
 8000f54:	46bd      	mov	sp, r7
 8000f56:	b004      	add	sp, #16
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	46c0      	nop			; (mov r8, r8)
 8000f5c:	20000010 	.word	0x20000010

08000f60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	0002      	movs	r2, r0
 8000f68:	1dfb      	adds	r3, r7, #7
 8000f6a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000f6c:	1dfb      	adds	r3, r7, #7
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	2b7f      	cmp	r3, #127	; 0x7f
 8000f72:	d809      	bhi.n	8000f88 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f74:	1dfb      	adds	r3, r7, #7
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	001a      	movs	r2, r3
 8000f7a:	231f      	movs	r3, #31
 8000f7c:	401a      	ands	r2, r3
 8000f7e:	4b04      	ldr	r3, [pc, #16]	; (8000f90 <__NVIC_EnableIRQ+0x30>)
 8000f80:	2101      	movs	r1, #1
 8000f82:	4091      	lsls	r1, r2
 8000f84:	000a      	movs	r2, r1
 8000f86:	601a      	str	r2, [r3, #0]
  }
}
 8000f88:	46c0      	nop			; (mov r8, r8)
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	b002      	add	sp, #8
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	e000e100 	.word	0xe000e100

08000f94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f94:	b590      	push	{r4, r7, lr}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	0002      	movs	r2, r0
 8000f9c:	6039      	str	r1, [r7, #0]
 8000f9e:	1dfb      	adds	r3, r7, #7
 8000fa0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000fa2:	1dfb      	adds	r3, r7, #7
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	2b7f      	cmp	r3, #127	; 0x7f
 8000fa8:	d828      	bhi.n	8000ffc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000faa:	4a2f      	ldr	r2, [pc, #188]	; (8001068 <__NVIC_SetPriority+0xd4>)
 8000fac:	1dfb      	adds	r3, r7, #7
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	b25b      	sxtb	r3, r3
 8000fb2:	089b      	lsrs	r3, r3, #2
 8000fb4:	33c0      	adds	r3, #192	; 0xc0
 8000fb6:	009b      	lsls	r3, r3, #2
 8000fb8:	589b      	ldr	r3, [r3, r2]
 8000fba:	1dfa      	adds	r2, r7, #7
 8000fbc:	7812      	ldrb	r2, [r2, #0]
 8000fbe:	0011      	movs	r1, r2
 8000fc0:	2203      	movs	r2, #3
 8000fc2:	400a      	ands	r2, r1
 8000fc4:	00d2      	lsls	r2, r2, #3
 8000fc6:	21ff      	movs	r1, #255	; 0xff
 8000fc8:	4091      	lsls	r1, r2
 8000fca:	000a      	movs	r2, r1
 8000fcc:	43d2      	mvns	r2, r2
 8000fce:	401a      	ands	r2, r3
 8000fd0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	019b      	lsls	r3, r3, #6
 8000fd6:	22ff      	movs	r2, #255	; 0xff
 8000fd8:	401a      	ands	r2, r3
 8000fda:	1dfb      	adds	r3, r7, #7
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	0018      	movs	r0, r3
 8000fe0:	2303      	movs	r3, #3
 8000fe2:	4003      	ands	r3, r0
 8000fe4:	00db      	lsls	r3, r3, #3
 8000fe6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fe8:	481f      	ldr	r0, [pc, #124]	; (8001068 <__NVIC_SetPriority+0xd4>)
 8000fea:	1dfb      	adds	r3, r7, #7
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	b25b      	sxtb	r3, r3
 8000ff0:	089b      	lsrs	r3, r3, #2
 8000ff2:	430a      	orrs	r2, r1
 8000ff4:	33c0      	adds	r3, #192	; 0xc0
 8000ff6:	009b      	lsls	r3, r3, #2
 8000ff8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000ffa:	e031      	b.n	8001060 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ffc:	4a1b      	ldr	r2, [pc, #108]	; (800106c <__NVIC_SetPriority+0xd8>)
 8000ffe:	1dfb      	adds	r3, r7, #7
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	0019      	movs	r1, r3
 8001004:	230f      	movs	r3, #15
 8001006:	400b      	ands	r3, r1
 8001008:	3b08      	subs	r3, #8
 800100a:	089b      	lsrs	r3, r3, #2
 800100c:	3306      	adds	r3, #6
 800100e:	009b      	lsls	r3, r3, #2
 8001010:	18d3      	adds	r3, r2, r3
 8001012:	3304      	adds	r3, #4
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	1dfa      	adds	r2, r7, #7
 8001018:	7812      	ldrb	r2, [r2, #0]
 800101a:	0011      	movs	r1, r2
 800101c:	2203      	movs	r2, #3
 800101e:	400a      	ands	r2, r1
 8001020:	00d2      	lsls	r2, r2, #3
 8001022:	21ff      	movs	r1, #255	; 0xff
 8001024:	4091      	lsls	r1, r2
 8001026:	000a      	movs	r2, r1
 8001028:	43d2      	mvns	r2, r2
 800102a:	401a      	ands	r2, r3
 800102c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	019b      	lsls	r3, r3, #6
 8001032:	22ff      	movs	r2, #255	; 0xff
 8001034:	401a      	ands	r2, r3
 8001036:	1dfb      	adds	r3, r7, #7
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	0018      	movs	r0, r3
 800103c:	2303      	movs	r3, #3
 800103e:	4003      	ands	r3, r0
 8001040:	00db      	lsls	r3, r3, #3
 8001042:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001044:	4809      	ldr	r0, [pc, #36]	; (800106c <__NVIC_SetPriority+0xd8>)
 8001046:	1dfb      	adds	r3, r7, #7
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	001c      	movs	r4, r3
 800104c:	230f      	movs	r3, #15
 800104e:	4023      	ands	r3, r4
 8001050:	3b08      	subs	r3, #8
 8001052:	089b      	lsrs	r3, r3, #2
 8001054:	430a      	orrs	r2, r1
 8001056:	3306      	adds	r3, #6
 8001058:	009b      	lsls	r3, r3, #2
 800105a:	18c3      	adds	r3, r0, r3
 800105c:	3304      	adds	r3, #4
 800105e:	601a      	str	r2, [r3, #0]
}
 8001060:	46c0      	nop			; (mov r8, r8)
 8001062:	46bd      	mov	sp, r7
 8001064:	b003      	add	sp, #12
 8001066:	bd90      	pop	{r4, r7, pc}
 8001068:	e000e100 	.word	0xe000e100
 800106c:	e000ed00 	.word	0xe000ed00

08001070 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	1e5a      	subs	r2, r3, #1
 800107c:	2380      	movs	r3, #128	; 0x80
 800107e:	045b      	lsls	r3, r3, #17
 8001080:	429a      	cmp	r2, r3
 8001082:	d301      	bcc.n	8001088 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001084:	2301      	movs	r3, #1
 8001086:	e010      	b.n	80010aa <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001088:	4b0a      	ldr	r3, [pc, #40]	; (80010b4 <SysTick_Config+0x44>)
 800108a:	687a      	ldr	r2, [r7, #4]
 800108c:	3a01      	subs	r2, #1
 800108e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001090:	2301      	movs	r3, #1
 8001092:	425b      	negs	r3, r3
 8001094:	2103      	movs	r1, #3
 8001096:	0018      	movs	r0, r3
 8001098:	f7ff ff7c 	bl	8000f94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800109c:	4b05      	ldr	r3, [pc, #20]	; (80010b4 <SysTick_Config+0x44>)
 800109e:	2200      	movs	r2, #0
 80010a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010a2:	4b04      	ldr	r3, [pc, #16]	; (80010b4 <SysTick_Config+0x44>)
 80010a4:	2207      	movs	r2, #7
 80010a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010a8:	2300      	movs	r3, #0
}
 80010aa:	0018      	movs	r0, r3
 80010ac:	46bd      	mov	sp, r7
 80010ae:	b002      	add	sp, #8
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	46c0      	nop			; (mov r8, r8)
 80010b4:	e000e010 	.word	0xe000e010

080010b8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b084      	sub	sp, #16
 80010bc:	af00      	add	r7, sp, #0
 80010be:	60b9      	str	r1, [r7, #8]
 80010c0:	607a      	str	r2, [r7, #4]
 80010c2:	210f      	movs	r1, #15
 80010c4:	187b      	adds	r3, r7, r1
 80010c6:	1c02      	adds	r2, r0, #0
 80010c8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80010ca:	68ba      	ldr	r2, [r7, #8]
 80010cc:	187b      	adds	r3, r7, r1
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	b25b      	sxtb	r3, r3
 80010d2:	0011      	movs	r1, r2
 80010d4:	0018      	movs	r0, r3
 80010d6:	f7ff ff5d 	bl	8000f94 <__NVIC_SetPriority>
}
 80010da:	46c0      	nop			; (mov r8, r8)
 80010dc:	46bd      	mov	sp, r7
 80010de:	b004      	add	sp, #16
 80010e0:	bd80      	pop	{r7, pc}

080010e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010e2:	b580      	push	{r7, lr}
 80010e4:	b082      	sub	sp, #8
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	0002      	movs	r2, r0
 80010ea:	1dfb      	adds	r3, r7, #7
 80010ec:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010ee:	1dfb      	adds	r3, r7, #7
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	b25b      	sxtb	r3, r3
 80010f4:	0018      	movs	r0, r3
 80010f6:	f7ff ff33 	bl	8000f60 <__NVIC_EnableIRQ>
}
 80010fa:	46c0      	nop			; (mov r8, r8)
 80010fc:	46bd      	mov	sp, r7
 80010fe:	b002      	add	sp, #8
 8001100:	bd80      	pop	{r7, pc}

08001102 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001102:	b580      	push	{r7, lr}
 8001104:	b082      	sub	sp, #8
 8001106:	af00      	add	r7, sp, #0
 8001108:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	0018      	movs	r0, r3
 800110e:	f7ff ffaf 	bl	8001070 <SysTick_Config>
 8001112:	0003      	movs	r3, r0
}
 8001114:	0018      	movs	r0, r3
 8001116:	46bd      	mov	sp, r7
 8001118:	b002      	add	sp, #8
 800111a:	bd80      	pop	{r7, pc}

0800111c <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2221      	movs	r2, #33	; 0x21
 8001128:	5c9b      	ldrb	r3, [r3, r2]
 800112a:	b2db      	uxtb	r3, r3
 800112c:	2b02      	cmp	r3, #2
 800112e:	d008      	beq.n	8001142 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2204      	movs	r2, #4
 8001134:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2220      	movs	r2, #32
 800113a:	2100      	movs	r1, #0
 800113c:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800113e:	2301      	movs	r3, #1
 8001140:	e020      	b.n	8001184 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	681a      	ldr	r2, [r3, #0]
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	210e      	movs	r1, #14
 800114e:	438a      	bics	r2, r1
 8001150:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	2101      	movs	r1, #1
 800115e:	438a      	bics	r2, r1
 8001160:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800116a:	2101      	movs	r1, #1
 800116c:	4091      	lsls	r1, r2
 800116e:	000a      	movs	r2, r1
 8001170:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2221      	movs	r2, #33	; 0x21
 8001176:	2101      	movs	r1, #1
 8001178:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	2220      	movs	r2, #32
 800117e:	2100      	movs	r1, #0
 8001180:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001182:	2300      	movs	r3, #0
}
 8001184:	0018      	movs	r0, r3
 8001186:	46bd      	mov	sp, r7
 8001188:	b002      	add	sp, #8
 800118a:	bd80      	pop	{r7, pc}

0800118c <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b084      	sub	sp, #16
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001194:	210f      	movs	r1, #15
 8001196:	187b      	adds	r3, r7, r1
 8001198:	2200      	movs	r2, #0
 800119a:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2221      	movs	r2, #33	; 0x21
 80011a0:	5c9b      	ldrb	r3, [r3, r2]
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	2b02      	cmp	r3, #2
 80011a6:	d006      	beq.n	80011b6 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2204      	movs	r2, #4
 80011ac:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 80011ae:	187b      	adds	r3, r7, r1
 80011b0:	2201      	movs	r2, #1
 80011b2:	701a      	strb	r2, [r3, #0]
 80011b4:	e028      	b.n	8001208 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	210e      	movs	r1, #14
 80011c2:	438a      	bics	r2, r1
 80011c4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	2101      	movs	r1, #1
 80011d2:	438a      	bics	r2, r1
 80011d4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011de:	2101      	movs	r1, #1
 80011e0:	4091      	lsls	r1, r2
 80011e2:	000a      	movs	r2, r1
 80011e4:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2221      	movs	r2, #33	; 0x21
 80011ea:	2101      	movs	r1, #1
 80011ec:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2220      	movs	r2, #32
 80011f2:	2100      	movs	r1, #0
 80011f4:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d004      	beq.n	8001208 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001202:	687a      	ldr	r2, [r7, #4]
 8001204:	0010      	movs	r0, r2
 8001206:	4798      	blx	r3
    }
  }
  return status;
 8001208:	230f      	movs	r3, #15
 800120a:	18fb      	adds	r3, r7, r3
 800120c:	781b      	ldrb	r3, [r3, #0]
}
 800120e:	0018      	movs	r0, r3
 8001210:	46bd      	mov	sp, r7
 8001212:	b004      	add	sp, #16
 8001214:	bd80      	pop	{r7, pc}
	...

08001218 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b086      	sub	sp, #24
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001222:	2300      	movs	r3, #0
 8001224:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001226:	e14f      	b.n	80014c8 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	2101      	movs	r1, #1
 800122e:	697a      	ldr	r2, [r7, #20]
 8001230:	4091      	lsls	r1, r2
 8001232:	000a      	movs	r2, r1
 8001234:	4013      	ands	r3, r2
 8001236:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d100      	bne.n	8001240 <HAL_GPIO_Init+0x28>
 800123e:	e140      	b.n	80014c2 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	2203      	movs	r2, #3
 8001246:	4013      	ands	r3, r2
 8001248:	2b01      	cmp	r3, #1
 800124a:	d005      	beq.n	8001258 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	2203      	movs	r2, #3
 8001252:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001254:	2b02      	cmp	r3, #2
 8001256:	d130      	bne.n	80012ba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	689b      	ldr	r3, [r3, #8]
 800125c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	005b      	lsls	r3, r3, #1
 8001262:	2203      	movs	r2, #3
 8001264:	409a      	lsls	r2, r3
 8001266:	0013      	movs	r3, r2
 8001268:	43da      	mvns	r2, r3
 800126a:	693b      	ldr	r3, [r7, #16]
 800126c:	4013      	ands	r3, r2
 800126e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	68da      	ldr	r2, [r3, #12]
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	005b      	lsls	r3, r3, #1
 8001278:	409a      	lsls	r2, r3
 800127a:	0013      	movs	r3, r2
 800127c:	693a      	ldr	r2, [r7, #16]
 800127e:	4313      	orrs	r3, r2
 8001280:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	693a      	ldr	r2, [r7, #16]
 8001286:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800128e:	2201      	movs	r2, #1
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	409a      	lsls	r2, r3
 8001294:	0013      	movs	r3, r2
 8001296:	43da      	mvns	r2, r3
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	4013      	ands	r3, r2
 800129c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	091b      	lsrs	r3, r3, #4
 80012a4:	2201      	movs	r2, #1
 80012a6:	401a      	ands	r2, r3
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	409a      	lsls	r2, r3
 80012ac:	0013      	movs	r3, r2
 80012ae:	693a      	ldr	r2, [r7, #16]
 80012b0:	4313      	orrs	r3, r2
 80012b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	693a      	ldr	r2, [r7, #16]
 80012b8:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	2203      	movs	r2, #3
 80012c0:	4013      	ands	r3, r2
 80012c2:	2b03      	cmp	r3, #3
 80012c4:	d017      	beq.n	80012f6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	68db      	ldr	r3, [r3, #12]
 80012ca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	005b      	lsls	r3, r3, #1
 80012d0:	2203      	movs	r2, #3
 80012d2:	409a      	lsls	r2, r3
 80012d4:	0013      	movs	r3, r2
 80012d6:	43da      	mvns	r2, r3
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	4013      	ands	r3, r2
 80012dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	689a      	ldr	r2, [r3, #8]
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	005b      	lsls	r3, r3, #1
 80012e6:	409a      	lsls	r2, r3
 80012e8:	0013      	movs	r3, r2
 80012ea:	693a      	ldr	r2, [r7, #16]
 80012ec:	4313      	orrs	r3, r2
 80012ee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	693a      	ldr	r2, [r7, #16]
 80012f4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	2203      	movs	r2, #3
 80012fc:	4013      	ands	r3, r2
 80012fe:	2b02      	cmp	r3, #2
 8001300:	d123      	bne.n	800134a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	08da      	lsrs	r2, r3, #3
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	3208      	adds	r2, #8
 800130a:	0092      	lsls	r2, r2, #2
 800130c:	58d3      	ldr	r3, [r2, r3]
 800130e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	2207      	movs	r2, #7
 8001314:	4013      	ands	r3, r2
 8001316:	009b      	lsls	r3, r3, #2
 8001318:	220f      	movs	r2, #15
 800131a:	409a      	lsls	r2, r3
 800131c:	0013      	movs	r3, r2
 800131e:	43da      	mvns	r2, r3
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	4013      	ands	r3, r2
 8001324:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	691a      	ldr	r2, [r3, #16]
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	2107      	movs	r1, #7
 800132e:	400b      	ands	r3, r1
 8001330:	009b      	lsls	r3, r3, #2
 8001332:	409a      	lsls	r2, r3
 8001334:	0013      	movs	r3, r2
 8001336:	693a      	ldr	r2, [r7, #16]
 8001338:	4313      	orrs	r3, r2
 800133a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	08da      	lsrs	r2, r3, #3
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	3208      	adds	r2, #8
 8001344:	0092      	lsls	r2, r2, #2
 8001346:	6939      	ldr	r1, [r7, #16]
 8001348:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	005b      	lsls	r3, r3, #1
 8001354:	2203      	movs	r2, #3
 8001356:	409a      	lsls	r2, r3
 8001358:	0013      	movs	r3, r2
 800135a:	43da      	mvns	r2, r3
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	4013      	ands	r3, r2
 8001360:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	2203      	movs	r2, #3
 8001368:	401a      	ands	r2, r3
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	005b      	lsls	r3, r3, #1
 800136e:	409a      	lsls	r2, r3
 8001370:	0013      	movs	r3, r2
 8001372:	693a      	ldr	r2, [r7, #16]
 8001374:	4313      	orrs	r3, r2
 8001376:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	693a      	ldr	r2, [r7, #16]
 800137c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	685a      	ldr	r2, [r3, #4]
 8001382:	23c0      	movs	r3, #192	; 0xc0
 8001384:	029b      	lsls	r3, r3, #10
 8001386:	4013      	ands	r3, r2
 8001388:	d100      	bne.n	800138c <HAL_GPIO_Init+0x174>
 800138a:	e09a      	b.n	80014c2 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800138c:	4b54      	ldr	r3, [pc, #336]	; (80014e0 <HAL_GPIO_Init+0x2c8>)
 800138e:	699a      	ldr	r2, [r3, #24]
 8001390:	4b53      	ldr	r3, [pc, #332]	; (80014e0 <HAL_GPIO_Init+0x2c8>)
 8001392:	2101      	movs	r1, #1
 8001394:	430a      	orrs	r2, r1
 8001396:	619a      	str	r2, [r3, #24]
 8001398:	4b51      	ldr	r3, [pc, #324]	; (80014e0 <HAL_GPIO_Init+0x2c8>)
 800139a:	699b      	ldr	r3, [r3, #24]
 800139c:	2201      	movs	r2, #1
 800139e:	4013      	ands	r3, r2
 80013a0:	60bb      	str	r3, [r7, #8]
 80013a2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80013a4:	4a4f      	ldr	r2, [pc, #316]	; (80014e4 <HAL_GPIO_Init+0x2cc>)
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	089b      	lsrs	r3, r3, #2
 80013aa:	3302      	adds	r3, #2
 80013ac:	009b      	lsls	r3, r3, #2
 80013ae:	589b      	ldr	r3, [r3, r2]
 80013b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	2203      	movs	r2, #3
 80013b6:	4013      	ands	r3, r2
 80013b8:	009b      	lsls	r3, r3, #2
 80013ba:	220f      	movs	r2, #15
 80013bc:	409a      	lsls	r2, r3
 80013be:	0013      	movs	r3, r2
 80013c0:	43da      	mvns	r2, r3
 80013c2:	693b      	ldr	r3, [r7, #16]
 80013c4:	4013      	ands	r3, r2
 80013c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80013c8:	687a      	ldr	r2, [r7, #4]
 80013ca:	2390      	movs	r3, #144	; 0x90
 80013cc:	05db      	lsls	r3, r3, #23
 80013ce:	429a      	cmp	r2, r3
 80013d0:	d013      	beq.n	80013fa <HAL_GPIO_Init+0x1e2>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4a44      	ldr	r2, [pc, #272]	; (80014e8 <HAL_GPIO_Init+0x2d0>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d00d      	beq.n	80013f6 <HAL_GPIO_Init+0x1de>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4a43      	ldr	r2, [pc, #268]	; (80014ec <HAL_GPIO_Init+0x2d4>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d007      	beq.n	80013f2 <HAL_GPIO_Init+0x1da>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4a42      	ldr	r2, [pc, #264]	; (80014f0 <HAL_GPIO_Init+0x2d8>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d101      	bne.n	80013ee <HAL_GPIO_Init+0x1d6>
 80013ea:	2303      	movs	r3, #3
 80013ec:	e006      	b.n	80013fc <HAL_GPIO_Init+0x1e4>
 80013ee:	2305      	movs	r3, #5
 80013f0:	e004      	b.n	80013fc <HAL_GPIO_Init+0x1e4>
 80013f2:	2302      	movs	r3, #2
 80013f4:	e002      	b.n	80013fc <HAL_GPIO_Init+0x1e4>
 80013f6:	2301      	movs	r3, #1
 80013f8:	e000      	b.n	80013fc <HAL_GPIO_Init+0x1e4>
 80013fa:	2300      	movs	r3, #0
 80013fc:	697a      	ldr	r2, [r7, #20]
 80013fe:	2103      	movs	r1, #3
 8001400:	400a      	ands	r2, r1
 8001402:	0092      	lsls	r2, r2, #2
 8001404:	4093      	lsls	r3, r2
 8001406:	693a      	ldr	r2, [r7, #16]
 8001408:	4313      	orrs	r3, r2
 800140a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800140c:	4935      	ldr	r1, [pc, #212]	; (80014e4 <HAL_GPIO_Init+0x2cc>)
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	089b      	lsrs	r3, r3, #2
 8001412:	3302      	adds	r3, #2
 8001414:	009b      	lsls	r3, r3, #2
 8001416:	693a      	ldr	r2, [r7, #16]
 8001418:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800141a:	4b36      	ldr	r3, [pc, #216]	; (80014f4 <HAL_GPIO_Init+0x2dc>)
 800141c:	689b      	ldr	r3, [r3, #8]
 800141e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	43da      	mvns	r2, r3
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	4013      	ands	r3, r2
 8001428:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	685a      	ldr	r2, [r3, #4]
 800142e:	2380      	movs	r3, #128	; 0x80
 8001430:	035b      	lsls	r3, r3, #13
 8001432:	4013      	ands	r3, r2
 8001434:	d003      	beq.n	800143e <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8001436:	693a      	ldr	r2, [r7, #16]
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	4313      	orrs	r3, r2
 800143c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800143e:	4b2d      	ldr	r3, [pc, #180]	; (80014f4 <HAL_GPIO_Init+0x2dc>)
 8001440:	693a      	ldr	r2, [r7, #16]
 8001442:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001444:	4b2b      	ldr	r3, [pc, #172]	; (80014f4 <HAL_GPIO_Init+0x2dc>)
 8001446:	68db      	ldr	r3, [r3, #12]
 8001448:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	43da      	mvns	r2, r3
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	4013      	ands	r3, r2
 8001452:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	685a      	ldr	r2, [r3, #4]
 8001458:	2380      	movs	r3, #128	; 0x80
 800145a:	039b      	lsls	r3, r3, #14
 800145c:	4013      	ands	r3, r2
 800145e:	d003      	beq.n	8001468 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001460:	693a      	ldr	r2, [r7, #16]
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	4313      	orrs	r3, r2
 8001466:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001468:	4b22      	ldr	r3, [pc, #136]	; (80014f4 <HAL_GPIO_Init+0x2dc>)
 800146a:	693a      	ldr	r2, [r7, #16]
 800146c:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 800146e:	4b21      	ldr	r3, [pc, #132]	; (80014f4 <HAL_GPIO_Init+0x2dc>)
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	43da      	mvns	r2, r3
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	4013      	ands	r3, r2
 800147c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	685a      	ldr	r2, [r3, #4]
 8001482:	2380      	movs	r3, #128	; 0x80
 8001484:	029b      	lsls	r3, r3, #10
 8001486:	4013      	ands	r3, r2
 8001488:	d003      	beq.n	8001492 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 800148a:	693a      	ldr	r2, [r7, #16]
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	4313      	orrs	r3, r2
 8001490:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001492:	4b18      	ldr	r3, [pc, #96]	; (80014f4 <HAL_GPIO_Init+0x2dc>)
 8001494:	693a      	ldr	r2, [r7, #16]
 8001496:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001498:	4b16      	ldr	r3, [pc, #88]	; (80014f4 <HAL_GPIO_Init+0x2dc>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	43da      	mvns	r2, r3
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	4013      	ands	r3, r2
 80014a6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	685a      	ldr	r2, [r3, #4]
 80014ac:	2380      	movs	r3, #128	; 0x80
 80014ae:	025b      	lsls	r3, r3, #9
 80014b0:	4013      	ands	r3, r2
 80014b2:	d003      	beq.n	80014bc <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80014b4:	693a      	ldr	r2, [r7, #16]
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	4313      	orrs	r3, r2
 80014ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80014bc:	4b0d      	ldr	r3, [pc, #52]	; (80014f4 <HAL_GPIO_Init+0x2dc>)
 80014be:	693a      	ldr	r2, [r7, #16]
 80014c0:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	3301      	adds	r3, #1
 80014c6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	40da      	lsrs	r2, r3
 80014d0:	1e13      	subs	r3, r2, #0
 80014d2:	d000      	beq.n	80014d6 <HAL_GPIO_Init+0x2be>
 80014d4:	e6a8      	b.n	8001228 <HAL_GPIO_Init+0x10>
  } 
}
 80014d6:	46c0      	nop			; (mov r8, r8)
 80014d8:	46c0      	nop			; (mov r8, r8)
 80014da:	46bd      	mov	sp, r7
 80014dc:	b006      	add	sp, #24
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	40021000 	.word	0x40021000
 80014e4:	40010000 	.word	0x40010000
 80014e8:	48000400 	.word	0x48000400
 80014ec:	48000800 	.word	0x48000800
 80014f0:	48000c00 	.word	0x48000c00
 80014f4:	40010400 	.word	0x40010400

080014f8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b084      	sub	sp, #16
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
 8001500:	000a      	movs	r2, r1
 8001502:	1cbb      	adds	r3, r7, #2
 8001504:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	691b      	ldr	r3, [r3, #16]
 800150a:	1cba      	adds	r2, r7, #2
 800150c:	8812      	ldrh	r2, [r2, #0]
 800150e:	4013      	ands	r3, r2
 8001510:	d004      	beq.n	800151c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001512:	230f      	movs	r3, #15
 8001514:	18fb      	adds	r3, r7, r3
 8001516:	2201      	movs	r2, #1
 8001518:	701a      	strb	r2, [r3, #0]
 800151a:	e003      	b.n	8001524 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800151c:	230f      	movs	r3, #15
 800151e:	18fb      	adds	r3, r7, r3
 8001520:	2200      	movs	r2, #0
 8001522:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001524:	230f      	movs	r3, #15
 8001526:	18fb      	adds	r3, r7, r3
 8001528:	781b      	ldrb	r3, [r3, #0]
  }
 800152a:	0018      	movs	r0, r3
 800152c:	46bd      	mov	sp, r7
 800152e:	b004      	add	sp, #16
 8001530:	bd80      	pop	{r7, pc}

08001532 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001532:	b580      	push	{r7, lr}
 8001534:	b082      	sub	sp, #8
 8001536:	af00      	add	r7, sp, #0
 8001538:	6078      	str	r0, [r7, #4]
 800153a:	0008      	movs	r0, r1
 800153c:	0011      	movs	r1, r2
 800153e:	1cbb      	adds	r3, r7, #2
 8001540:	1c02      	adds	r2, r0, #0
 8001542:	801a      	strh	r2, [r3, #0]
 8001544:	1c7b      	adds	r3, r7, #1
 8001546:	1c0a      	adds	r2, r1, #0
 8001548:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800154a:	1c7b      	adds	r3, r7, #1
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d004      	beq.n	800155c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001552:	1cbb      	adds	r3, r7, #2
 8001554:	881a      	ldrh	r2, [r3, #0]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800155a:	e003      	b.n	8001564 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800155c:	1cbb      	adds	r3, r7, #2
 800155e:	881a      	ldrh	r2, [r3, #0]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001564:	46c0      	nop			; (mov r8, r8)
 8001566:	46bd      	mov	sp, r7
 8001568:	b002      	add	sp, #8
 800156a:	bd80      	pop	{r7, pc}

0800156c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b088      	sub	sp, #32
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d101      	bne.n	800157e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800157a:	2301      	movs	r3, #1
 800157c:	e301      	b.n	8001b82 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	2201      	movs	r2, #1
 8001584:	4013      	ands	r3, r2
 8001586:	d100      	bne.n	800158a <HAL_RCC_OscConfig+0x1e>
 8001588:	e08d      	b.n	80016a6 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800158a:	4bc3      	ldr	r3, [pc, #780]	; (8001898 <HAL_RCC_OscConfig+0x32c>)
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	220c      	movs	r2, #12
 8001590:	4013      	ands	r3, r2
 8001592:	2b04      	cmp	r3, #4
 8001594:	d00e      	beq.n	80015b4 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001596:	4bc0      	ldr	r3, [pc, #768]	; (8001898 <HAL_RCC_OscConfig+0x32c>)
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	220c      	movs	r2, #12
 800159c:	4013      	ands	r3, r2
 800159e:	2b08      	cmp	r3, #8
 80015a0:	d116      	bne.n	80015d0 <HAL_RCC_OscConfig+0x64>
 80015a2:	4bbd      	ldr	r3, [pc, #756]	; (8001898 <HAL_RCC_OscConfig+0x32c>)
 80015a4:	685a      	ldr	r2, [r3, #4]
 80015a6:	2380      	movs	r3, #128	; 0x80
 80015a8:	025b      	lsls	r3, r3, #9
 80015aa:	401a      	ands	r2, r3
 80015ac:	2380      	movs	r3, #128	; 0x80
 80015ae:	025b      	lsls	r3, r3, #9
 80015b0:	429a      	cmp	r2, r3
 80015b2:	d10d      	bne.n	80015d0 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015b4:	4bb8      	ldr	r3, [pc, #736]	; (8001898 <HAL_RCC_OscConfig+0x32c>)
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	2380      	movs	r3, #128	; 0x80
 80015ba:	029b      	lsls	r3, r3, #10
 80015bc:	4013      	ands	r3, r2
 80015be:	d100      	bne.n	80015c2 <HAL_RCC_OscConfig+0x56>
 80015c0:	e070      	b.n	80016a4 <HAL_RCC_OscConfig+0x138>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d000      	beq.n	80015cc <HAL_RCC_OscConfig+0x60>
 80015ca:	e06b      	b.n	80016a4 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80015cc:	2301      	movs	r3, #1
 80015ce:	e2d8      	b.n	8001b82 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	2b01      	cmp	r3, #1
 80015d6:	d107      	bne.n	80015e8 <HAL_RCC_OscConfig+0x7c>
 80015d8:	4baf      	ldr	r3, [pc, #700]	; (8001898 <HAL_RCC_OscConfig+0x32c>)
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	4bae      	ldr	r3, [pc, #696]	; (8001898 <HAL_RCC_OscConfig+0x32c>)
 80015de:	2180      	movs	r1, #128	; 0x80
 80015e0:	0249      	lsls	r1, r1, #9
 80015e2:	430a      	orrs	r2, r1
 80015e4:	601a      	str	r2, [r3, #0]
 80015e6:	e02f      	b.n	8001648 <HAL_RCC_OscConfig+0xdc>
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d10c      	bne.n	800160a <HAL_RCC_OscConfig+0x9e>
 80015f0:	4ba9      	ldr	r3, [pc, #676]	; (8001898 <HAL_RCC_OscConfig+0x32c>)
 80015f2:	681a      	ldr	r2, [r3, #0]
 80015f4:	4ba8      	ldr	r3, [pc, #672]	; (8001898 <HAL_RCC_OscConfig+0x32c>)
 80015f6:	49a9      	ldr	r1, [pc, #676]	; (800189c <HAL_RCC_OscConfig+0x330>)
 80015f8:	400a      	ands	r2, r1
 80015fa:	601a      	str	r2, [r3, #0]
 80015fc:	4ba6      	ldr	r3, [pc, #664]	; (8001898 <HAL_RCC_OscConfig+0x32c>)
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	4ba5      	ldr	r3, [pc, #660]	; (8001898 <HAL_RCC_OscConfig+0x32c>)
 8001602:	49a7      	ldr	r1, [pc, #668]	; (80018a0 <HAL_RCC_OscConfig+0x334>)
 8001604:	400a      	ands	r2, r1
 8001606:	601a      	str	r2, [r3, #0]
 8001608:	e01e      	b.n	8001648 <HAL_RCC_OscConfig+0xdc>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	2b05      	cmp	r3, #5
 8001610:	d10e      	bne.n	8001630 <HAL_RCC_OscConfig+0xc4>
 8001612:	4ba1      	ldr	r3, [pc, #644]	; (8001898 <HAL_RCC_OscConfig+0x32c>)
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	4ba0      	ldr	r3, [pc, #640]	; (8001898 <HAL_RCC_OscConfig+0x32c>)
 8001618:	2180      	movs	r1, #128	; 0x80
 800161a:	02c9      	lsls	r1, r1, #11
 800161c:	430a      	orrs	r2, r1
 800161e:	601a      	str	r2, [r3, #0]
 8001620:	4b9d      	ldr	r3, [pc, #628]	; (8001898 <HAL_RCC_OscConfig+0x32c>)
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	4b9c      	ldr	r3, [pc, #624]	; (8001898 <HAL_RCC_OscConfig+0x32c>)
 8001626:	2180      	movs	r1, #128	; 0x80
 8001628:	0249      	lsls	r1, r1, #9
 800162a:	430a      	orrs	r2, r1
 800162c:	601a      	str	r2, [r3, #0]
 800162e:	e00b      	b.n	8001648 <HAL_RCC_OscConfig+0xdc>
 8001630:	4b99      	ldr	r3, [pc, #612]	; (8001898 <HAL_RCC_OscConfig+0x32c>)
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	4b98      	ldr	r3, [pc, #608]	; (8001898 <HAL_RCC_OscConfig+0x32c>)
 8001636:	4999      	ldr	r1, [pc, #612]	; (800189c <HAL_RCC_OscConfig+0x330>)
 8001638:	400a      	ands	r2, r1
 800163a:	601a      	str	r2, [r3, #0]
 800163c:	4b96      	ldr	r3, [pc, #600]	; (8001898 <HAL_RCC_OscConfig+0x32c>)
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	4b95      	ldr	r3, [pc, #596]	; (8001898 <HAL_RCC_OscConfig+0x32c>)
 8001642:	4997      	ldr	r1, [pc, #604]	; (80018a0 <HAL_RCC_OscConfig+0x334>)
 8001644:	400a      	ands	r2, r1
 8001646:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d014      	beq.n	800167a <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001650:	f7ff fc58 	bl	8000f04 <HAL_GetTick>
 8001654:	0003      	movs	r3, r0
 8001656:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001658:	e008      	b.n	800166c <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800165a:	f7ff fc53 	bl	8000f04 <HAL_GetTick>
 800165e:	0002      	movs	r2, r0
 8001660:	69bb      	ldr	r3, [r7, #24]
 8001662:	1ad3      	subs	r3, r2, r3
 8001664:	2b64      	cmp	r3, #100	; 0x64
 8001666:	d901      	bls.n	800166c <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001668:	2303      	movs	r3, #3
 800166a:	e28a      	b.n	8001b82 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800166c:	4b8a      	ldr	r3, [pc, #552]	; (8001898 <HAL_RCC_OscConfig+0x32c>)
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	2380      	movs	r3, #128	; 0x80
 8001672:	029b      	lsls	r3, r3, #10
 8001674:	4013      	ands	r3, r2
 8001676:	d0f0      	beq.n	800165a <HAL_RCC_OscConfig+0xee>
 8001678:	e015      	b.n	80016a6 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800167a:	f7ff fc43 	bl	8000f04 <HAL_GetTick>
 800167e:	0003      	movs	r3, r0
 8001680:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001682:	e008      	b.n	8001696 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001684:	f7ff fc3e 	bl	8000f04 <HAL_GetTick>
 8001688:	0002      	movs	r2, r0
 800168a:	69bb      	ldr	r3, [r7, #24]
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	2b64      	cmp	r3, #100	; 0x64
 8001690:	d901      	bls.n	8001696 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001692:	2303      	movs	r3, #3
 8001694:	e275      	b.n	8001b82 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001696:	4b80      	ldr	r3, [pc, #512]	; (8001898 <HAL_RCC_OscConfig+0x32c>)
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	2380      	movs	r3, #128	; 0x80
 800169c:	029b      	lsls	r3, r3, #10
 800169e:	4013      	ands	r3, r2
 80016a0:	d1f0      	bne.n	8001684 <HAL_RCC_OscConfig+0x118>
 80016a2:	e000      	b.n	80016a6 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016a4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	2202      	movs	r2, #2
 80016ac:	4013      	ands	r3, r2
 80016ae:	d100      	bne.n	80016b2 <HAL_RCC_OscConfig+0x146>
 80016b0:	e069      	b.n	8001786 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80016b2:	4b79      	ldr	r3, [pc, #484]	; (8001898 <HAL_RCC_OscConfig+0x32c>)
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	220c      	movs	r2, #12
 80016b8:	4013      	ands	r3, r2
 80016ba:	d00b      	beq.n	80016d4 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80016bc:	4b76      	ldr	r3, [pc, #472]	; (8001898 <HAL_RCC_OscConfig+0x32c>)
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	220c      	movs	r2, #12
 80016c2:	4013      	ands	r3, r2
 80016c4:	2b08      	cmp	r3, #8
 80016c6:	d11c      	bne.n	8001702 <HAL_RCC_OscConfig+0x196>
 80016c8:	4b73      	ldr	r3, [pc, #460]	; (8001898 <HAL_RCC_OscConfig+0x32c>)
 80016ca:	685a      	ldr	r2, [r3, #4]
 80016cc:	2380      	movs	r3, #128	; 0x80
 80016ce:	025b      	lsls	r3, r3, #9
 80016d0:	4013      	ands	r3, r2
 80016d2:	d116      	bne.n	8001702 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016d4:	4b70      	ldr	r3, [pc, #448]	; (8001898 <HAL_RCC_OscConfig+0x32c>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	2202      	movs	r2, #2
 80016da:	4013      	ands	r3, r2
 80016dc:	d005      	beq.n	80016ea <HAL_RCC_OscConfig+0x17e>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	68db      	ldr	r3, [r3, #12]
 80016e2:	2b01      	cmp	r3, #1
 80016e4:	d001      	beq.n	80016ea <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80016e6:	2301      	movs	r3, #1
 80016e8:	e24b      	b.n	8001b82 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016ea:	4b6b      	ldr	r3, [pc, #428]	; (8001898 <HAL_RCC_OscConfig+0x32c>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	22f8      	movs	r2, #248	; 0xf8
 80016f0:	4393      	bics	r3, r2
 80016f2:	0019      	movs	r1, r3
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	691b      	ldr	r3, [r3, #16]
 80016f8:	00da      	lsls	r2, r3, #3
 80016fa:	4b67      	ldr	r3, [pc, #412]	; (8001898 <HAL_RCC_OscConfig+0x32c>)
 80016fc:	430a      	orrs	r2, r1
 80016fe:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001700:	e041      	b.n	8001786 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	68db      	ldr	r3, [r3, #12]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d024      	beq.n	8001754 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800170a:	4b63      	ldr	r3, [pc, #396]	; (8001898 <HAL_RCC_OscConfig+0x32c>)
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	4b62      	ldr	r3, [pc, #392]	; (8001898 <HAL_RCC_OscConfig+0x32c>)
 8001710:	2101      	movs	r1, #1
 8001712:	430a      	orrs	r2, r1
 8001714:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001716:	f7ff fbf5 	bl	8000f04 <HAL_GetTick>
 800171a:	0003      	movs	r3, r0
 800171c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800171e:	e008      	b.n	8001732 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001720:	f7ff fbf0 	bl	8000f04 <HAL_GetTick>
 8001724:	0002      	movs	r2, r0
 8001726:	69bb      	ldr	r3, [r7, #24]
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	2b02      	cmp	r3, #2
 800172c:	d901      	bls.n	8001732 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 800172e:	2303      	movs	r3, #3
 8001730:	e227      	b.n	8001b82 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001732:	4b59      	ldr	r3, [pc, #356]	; (8001898 <HAL_RCC_OscConfig+0x32c>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	2202      	movs	r2, #2
 8001738:	4013      	ands	r3, r2
 800173a:	d0f1      	beq.n	8001720 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800173c:	4b56      	ldr	r3, [pc, #344]	; (8001898 <HAL_RCC_OscConfig+0x32c>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	22f8      	movs	r2, #248	; 0xf8
 8001742:	4393      	bics	r3, r2
 8001744:	0019      	movs	r1, r3
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	691b      	ldr	r3, [r3, #16]
 800174a:	00da      	lsls	r2, r3, #3
 800174c:	4b52      	ldr	r3, [pc, #328]	; (8001898 <HAL_RCC_OscConfig+0x32c>)
 800174e:	430a      	orrs	r2, r1
 8001750:	601a      	str	r2, [r3, #0]
 8001752:	e018      	b.n	8001786 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001754:	4b50      	ldr	r3, [pc, #320]	; (8001898 <HAL_RCC_OscConfig+0x32c>)
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	4b4f      	ldr	r3, [pc, #316]	; (8001898 <HAL_RCC_OscConfig+0x32c>)
 800175a:	2101      	movs	r1, #1
 800175c:	438a      	bics	r2, r1
 800175e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001760:	f7ff fbd0 	bl	8000f04 <HAL_GetTick>
 8001764:	0003      	movs	r3, r0
 8001766:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001768:	e008      	b.n	800177c <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800176a:	f7ff fbcb 	bl	8000f04 <HAL_GetTick>
 800176e:	0002      	movs	r2, r0
 8001770:	69bb      	ldr	r3, [r7, #24]
 8001772:	1ad3      	subs	r3, r2, r3
 8001774:	2b02      	cmp	r3, #2
 8001776:	d901      	bls.n	800177c <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001778:	2303      	movs	r3, #3
 800177a:	e202      	b.n	8001b82 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800177c:	4b46      	ldr	r3, [pc, #280]	; (8001898 <HAL_RCC_OscConfig+0x32c>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	2202      	movs	r2, #2
 8001782:	4013      	ands	r3, r2
 8001784:	d1f1      	bne.n	800176a <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	2208      	movs	r2, #8
 800178c:	4013      	ands	r3, r2
 800178e:	d036      	beq.n	80017fe <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	69db      	ldr	r3, [r3, #28]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d019      	beq.n	80017cc <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001798:	4b3f      	ldr	r3, [pc, #252]	; (8001898 <HAL_RCC_OscConfig+0x32c>)
 800179a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800179c:	4b3e      	ldr	r3, [pc, #248]	; (8001898 <HAL_RCC_OscConfig+0x32c>)
 800179e:	2101      	movs	r1, #1
 80017a0:	430a      	orrs	r2, r1
 80017a2:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017a4:	f7ff fbae 	bl	8000f04 <HAL_GetTick>
 80017a8:	0003      	movs	r3, r0
 80017aa:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017ac:	e008      	b.n	80017c0 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017ae:	f7ff fba9 	bl	8000f04 <HAL_GetTick>
 80017b2:	0002      	movs	r2, r0
 80017b4:	69bb      	ldr	r3, [r7, #24]
 80017b6:	1ad3      	subs	r3, r2, r3
 80017b8:	2b02      	cmp	r3, #2
 80017ba:	d901      	bls.n	80017c0 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80017bc:	2303      	movs	r3, #3
 80017be:	e1e0      	b.n	8001b82 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017c0:	4b35      	ldr	r3, [pc, #212]	; (8001898 <HAL_RCC_OscConfig+0x32c>)
 80017c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c4:	2202      	movs	r2, #2
 80017c6:	4013      	ands	r3, r2
 80017c8:	d0f1      	beq.n	80017ae <HAL_RCC_OscConfig+0x242>
 80017ca:	e018      	b.n	80017fe <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017cc:	4b32      	ldr	r3, [pc, #200]	; (8001898 <HAL_RCC_OscConfig+0x32c>)
 80017ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017d0:	4b31      	ldr	r3, [pc, #196]	; (8001898 <HAL_RCC_OscConfig+0x32c>)
 80017d2:	2101      	movs	r1, #1
 80017d4:	438a      	bics	r2, r1
 80017d6:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017d8:	f7ff fb94 	bl	8000f04 <HAL_GetTick>
 80017dc:	0003      	movs	r3, r0
 80017de:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017e0:	e008      	b.n	80017f4 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017e2:	f7ff fb8f 	bl	8000f04 <HAL_GetTick>
 80017e6:	0002      	movs	r2, r0
 80017e8:	69bb      	ldr	r3, [r7, #24]
 80017ea:	1ad3      	subs	r3, r2, r3
 80017ec:	2b02      	cmp	r3, #2
 80017ee:	d901      	bls.n	80017f4 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80017f0:	2303      	movs	r3, #3
 80017f2:	e1c6      	b.n	8001b82 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017f4:	4b28      	ldr	r3, [pc, #160]	; (8001898 <HAL_RCC_OscConfig+0x32c>)
 80017f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f8:	2202      	movs	r2, #2
 80017fa:	4013      	ands	r3, r2
 80017fc:	d1f1      	bne.n	80017e2 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	2204      	movs	r2, #4
 8001804:	4013      	ands	r3, r2
 8001806:	d100      	bne.n	800180a <HAL_RCC_OscConfig+0x29e>
 8001808:	e0b4      	b.n	8001974 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 800180a:	201f      	movs	r0, #31
 800180c:	183b      	adds	r3, r7, r0
 800180e:	2200      	movs	r2, #0
 8001810:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001812:	4b21      	ldr	r3, [pc, #132]	; (8001898 <HAL_RCC_OscConfig+0x32c>)
 8001814:	69da      	ldr	r2, [r3, #28]
 8001816:	2380      	movs	r3, #128	; 0x80
 8001818:	055b      	lsls	r3, r3, #21
 800181a:	4013      	ands	r3, r2
 800181c:	d110      	bne.n	8001840 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800181e:	4b1e      	ldr	r3, [pc, #120]	; (8001898 <HAL_RCC_OscConfig+0x32c>)
 8001820:	69da      	ldr	r2, [r3, #28]
 8001822:	4b1d      	ldr	r3, [pc, #116]	; (8001898 <HAL_RCC_OscConfig+0x32c>)
 8001824:	2180      	movs	r1, #128	; 0x80
 8001826:	0549      	lsls	r1, r1, #21
 8001828:	430a      	orrs	r2, r1
 800182a:	61da      	str	r2, [r3, #28]
 800182c:	4b1a      	ldr	r3, [pc, #104]	; (8001898 <HAL_RCC_OscConfig+0x32c>)
 800182e:	69da      	ldr	r2, [r3, #28]
 8001830:	2380      	movs	r3, #128	; 0x80
 8001832:	055b      	lsls	r3, r3, #21
 8001834:	4013      	ands	r3, r2
 8001836:	60fb      	str	r3, [r7, #12]
 8001838:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800183a:	183b      	adds	r3, r7, r0
 800183c:	2201      	movs	r2, #1
 800183e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001840:	4b18      	ldr	r3, [pc, #96]	; (80018a4 <HAL_RCC_OscConfig+0x338>)
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	2380      	movs	r3, #128	; 0x80
 8001846:	005b      	lsls	r3, r3, #1
 8001848:	4013      	ands	r3, r2
 800184a:	d11a      	bne.n	8001882 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800184c:	4b15      	ldr	r3, [pc, #84]	; (80018a4 <HAL_RCC_OscConfig+0x338>)
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	4b14      	ldr	r3, [pc, #80]	; (80018a4 <HAL_RCC_OscConfig+0x338>)
 8001852:	2180      	movs	r1, #128	; 0x80
 8001854:	0049      	lsls	r1, r1, #1
 8001856:	430a      	orrs	r2, r1
 8001858:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800185a:	f7ff fb53 	bl	8000f04 <HAL_GetTick>
 800185e:	0003      	movs	r3, r0
 8001860:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001862:	e008      	b.n	8001876 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001864:	f7ff fb4e 	bl	8000f04 <HAL_GetTick>
 8001868:	0002      	movs	r2, r0
 800186a:	69bb      	ldr	r3, [r7, #24]
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	2b64      	cmp	r3, #100	; 0x64
 8001870:	d901      	bls.n	8001876 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8001872:	2303      	movs	r3, #3
 8001874:	e185      	b.n	8001b82 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001876:	4b0b      	ldr	r3, [pc, #44]	; (80018a4 <HAL_RCC_OscConfig+0x338>)
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	2380      	movs	r3, #128	; 0x80
 800187c:	005b      	lsls	r3, r3, #1
 800187e:	4013      	ands	r3, r2
 8001880:	d0f0      	beq.n	8001864 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	689b      	ldr	r3, [r3, #8]
 8001886:	2b01      	cmp	r3, #1
 8001888:	d10e      	bne.n	80018a8 <HAL_RCC_OscConfig+0x33c>
 800188a:	4b03      	ldr	r3, [pc, #12]	; (8001898 <HAL_RCC_OscConfig+0x32c>)
 800188c:	6a1a      	ldr	r2, [r3, #32]
 800188e:	4b02      	ldr	r3, [pc, #8]	; (8001898 <HAL_RCC_OscConfig+0x32c>)
 8001890:	2101      	movs	r1, #1
 8001892:	430a      	orrs	r2, r1
 8001894:	621a      	str	r2, [r3, #32]
 8001896:	e035      	b.n	8001904 <HAL_RCC_OscConfig+0x398>
 8001898:	40021000 	.word	0x40021000
 800189c:	fffeffff 	.word	0xfffeffff
 80018a0:	fffbffff 	.word	0xfffbffff
 80018a4:	40007000 	.word	0x40007000
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d10c      	bne.n	80018ca <HAL_RCC_OscConfig+0x35e>
 80018b0:	4bb6      	ldr	r3, [pc, #728]	; (8001b8c <HAL_RCC_OscConfig+0x620>)
 80018b2:	6a1a      	ldr	r2, [r3, #32]
 80018b4:	4bb5      	ldr	r3, [pc, #724]	; (8001b8c <HAL_RCC_OscConfig+0x620>)
 80018b6:	2101      	movs	r1, #1
 80018b8:	438a      	bics	r2, r1
 80018ba:	621a      	str	r2, [r3, #32]
 80018bc:	4bb3      	ldr	r3, [pc, #716]	; (8001b8c <HAL_RCC_OscConfig+0x620>)
 80018be:	6a1a      	ldr	r2, [r3, #32]
 80018c0:	4bb2      	ldr	r3, [pc, #712]	; (8001b8c <HAL_RCC_OscConfig+0x620>)
 80018c2:	2104      	movs	r1, #4
 80018c4:	438a      	bics	r2, r1
 80018c6:	621a      	str	r2, [r3, #32]
 80018c8:	e01c      	b.n	8001904 <HAL_RCC_OscConfig+0x398>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	2b05      	cmp	r3, #5
 80018d0:	d10c      	bne.n	80018ec <HAL_RCC_OscConfig+0x380>
 80018d2:	4bae      	ldr	r3, [pc, #696]	; (8001b8c <HAL_RCC_OscConfig+0x620>)
 80018d4:	6a1a      	ldr	r2, [r3, #32]
 80018d6:	4bad      	ldr	r3, [pc, #692]	; (8001b8c <HAL_RCC_OscConfig+0x620>)
 80018d8:	2104      	movs	r1, #4
 80018da:	430a      	orrs	r2, r1
 80018dc:	621a      	str	r2, [r3, #32]
 80018de:	4bab      	ldr	r3, [pc, #684]	; (8001b8c <HAL_RCC_OscConfig+0x620>)
 80018e0:	6a1a      	ldr	r2, [r3, #32]
 80018e2:	4baa      	ldr	r3, [pc, #680]	; (8001b8c <HAL_RCC_OscConfig+0x620>)
 80018e4:	2101      	movs	r1, #1
 80018e6:	430a      	orrs	r2, r1
 80018e8:	621a      	str	r2, [r3, #32]
 80018ea:	e00b      	b.n	8001904 <HAL_RCC_OscConfig+0x398>
 80018ec:	4ba7      	ldr	r3, [pc, #668]	; (8001b8c <HAL_RCC_OscConfig+0x620>)
 80018ee:	6a1a      	ldr	r2, [r3, #32]
 80018f0:	4ba6      	ldr	r3, [pc, #664]	; (8001b8c <HAL_RCC_OscConfig+0x620>)
 80018f2:	2101      	movs	r1, #1
 80018f4:	438a      	bics	r2, r1
 80018f6:	621a      	str	r2, [r3, #32]
 80018f8:	4ba4      	ldr	r3, [pc, #656]	; (8001b8c <HAL_RCC_OscConfig+0x620>)
 80018fa:	6a1a      	ldr	r2, [r3, #32]
 80018fc:	4ba3      	ldr	r3, [pc, #652]	; (8001b8c <HAL_RCC_OscConfig+0x620>)
 80018fe:	2104      	movs	r1, #4
 8001900:	438a      	bics	r2, r1
 8001902:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d014      	beq.n	8001936 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800190c:	f7ff fafa 	bl	8000f04 <HAL_GetTick>
 8001910:	0003      	movs	r3, r0
 8001912:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001914:	e009      	b.n	800192a <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001916:	f7ff faf5 	bl	8000f04 <HAL_GetTick>
 800191a:	0002      	movs	r2, r0
 800191c:	69bb      	ldr	r3, [r7, #24]
 800191e:	1ad3      	subs	r3, r2, r3
 8001920:	4a9b      	ldr	r2, [pc, #620]	; (8001b90 <HAL_RCC_OscConfig+0x624>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d901      	bls.n	800192a <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8001926:	2303      	movs	r3, #3
 8001928:	e12b      	b.n	8001b82 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800192a:	4b98      	ldr	r3, [pc, #608]	; (8001b8c <HAL_RCC_OscConfig+0x620>)
 800192c:	6a1b      	ldr	r3, [r3, #32]
 800192e:	2202      	movs	r2, #2
 8001930:	4013      	ands	r3, r2
 8001932:	d0f0      	beq.n	8001916 <HAL_RCC_OscConfig+0x3aa>
 8001934:	e013      	b.n	800195e <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001936:	f7ff fae5 	bl	8000f04 <HAL_GetTick>
 800193a:	0003      	movs	r3, r0
 800193c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800193e:	e009      	b.n	8001954 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001940:	f7ff fae0 	bl	8000f04 <HAL_GetTick>
 8001944:	0002      	movs	r2, r0
 8001946:	69bb      	ldr	r3, [r7, #24]
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	4a91      	ldr	r2, [pc, #580]	; (8001b90 <HAL_RCC_OscConfig+0x624>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d901      	bls.n	8001954 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001950:	2303      	movs	r3, #3
 8001952:	e116      	b.n	8001b82 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001954:	4b8d      	ldr	r3, [pc, #564]	; (8001b8c <HAL_RCC_OscConfig+0x620>)
 8001956:	6a1b      	ldr	r3, [r3, #32]
 8001958:	2202      	movs	r2, #2
 800195a:	4013      	ands	r3, r2
 800195c:	d1f0      	bne.n	8001940 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800195e:	231f      	movs	r3, #31
 8001960:	18fb      	adds	r3, r7, r3
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	2b01      	cmp	r3, #1
 8001966:	d105      	bne.n	8001974 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001968:	4b88      	ldr	r3, [pc, #544]	; (8001b8c <HAL_RCC_OscConfig+0x620>)
 800196a:	69da      	ldr	r2, [r3, #28]
 800196c:	4b87      	ldr	r3, [pc, #540]	; (8001b8c <HAL_RCC_OscConfig+0x620>)
 800196e:	4989      	ldr	r1, [pc, #548]	; (8001b94 <HAL_RCC_OscConfig+0x628>)
 8001970:	400a      	ands	r2, r1
 8001972:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	2210      	movs	r2, #16
 800197a:	4013      	ands	r3, r2
 800197c:	d063      	beq.n	8001a46 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	695b      	ldr	r3, [r3, #20]
 8001982:	2b01      	cmp	r3, #1
 8001984:	d12a      	bne.n	80019dc <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001986:	4b81      	ldr	r3, [pc, #516]	; (8001b8c <HAL_RCC_OscConfig+0x620>)
 8001988:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800198a:	4b80      	ldr	r3, [pc, #512]	; (8001b8c <HAL_RCC_OscConfig+0x620>)
 800198c:	2104      	movs	r1, #4
 800198e:	430a      	orrs	r2, r1
 8001990:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001992:	4b7e      	ldr	r3, [pc, #504]	; (8001b8c <HAL_RCC_OscConfig+0x620>)
 8001994:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001996:	4b7d      	ldr	r3, [pc, #500]	; (8001b8c <HAL_RCC_OscConfig+0x620>)
 8001998:	2101      	movs	r1, #1
 800199a:	430a      	orrs	r2, r1
 800199c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800199e:	f7ff fab1 	bl	8000f04 <HAL_GetTick>
 80019a2:	0003      	movs	r3, r0
 80019a4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80019a6:	e008      	b.n	80019ba <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80019a8:	f7ff faac 	bl	8000f04 <HAL_GetTick>
 80019ac:	0002      	movs	r2, r0
 80019ae:	69bb      	ldr	r3, [r7, #24]
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	2b02      	cmp	r3, #2
 80019b4:	d901      	bls.n	80019ba <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80019b6:	2303      	movs	r3, #3
 80019b8:	e0e3      	b.n	8001b82 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80019ba:	4b74      	ldr	r3, [pc, #464]	; (8001b8c <HAL_RCC_OscConfig+0x620>)
 80019bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019be:	2202      	movs	r2, #2
 80019c0:	4013      	ands	r3, r2
 80019c2:	d0f1      	beq.n	80019a8 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80019c4:	4b71      	ldr	r3, [pc, #452]	; (8001b8c <HAL_RCC_OscConfig+0x620>)
 80019c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019c8:	22f8      	movs	r2, #248	; 0xf8
 80019ca:	4393      	bics	r3, r2
 80019cc:	0019      	movs	r1, r3
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	699b      	ldr	r3, [r3, #24]
 80019d2:	00da      	lsls	r2, r3, #3
 80019d4:	4b6d      	ldr	r3, [pc, #436]	; (8001b8c <HAL_RCC_OscConfig+0x620>)
 80019d6:	430a      	orrs	r2, r1
 80019d8:	635a      	str	r2, [r3, #52]	; 0x34
 80019da:	e034      	b.n	8001a46 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	695b      	ldr	r3, [r3, #20]
 80019e0:	3305      	adds	r3, #5
 80019e2:	d111      	bne.n	8001a08 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80019e4:	4b69      	ldr	r3, [pc, #420]	; (8001b8c <HAL_RCC_OscConfig+0x620>)
 80019e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019e8:	4b68      	ldr	r3, [pc, #416]	; (8001b8c <HAL_RCC_OscConfig+0x620>)
 80019ea:	2104      	movs	r1, #4
 80019ec:	438a      	bics	r2, r1
 80019ee:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80019f0:	4b66      	ldr	r3, [pc, #408]	; (8001b8c <HAL_RCC_OscConfig+0x620>)
 80019f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019f4:	22f8      	movs	r2, #248	; 0xf8
 80019f6:	4393      	bics	r3, r2
 80019f8:	0019      	movs	r1, r3
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	699b      	ldr	r3, [r3, #24]
 80019fe:	00da      	lsls	r2, r3, #3
 8001a00:	4b62      	ldr	r3, [pc, #392]	; (8001b8c <HAL_RCC_OscConfig+0x620>)
 8001a02:	430a      	orrs	r2, r1
 8001a04:	635a      	str	r2, [r3, #52]	; 0x34
 8001a06:	e01e      	b.n	8001a46 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001a08:	4b60      	ldr	r3, [pc, #384]	; (8001b8c <HAL_RCC_OscConfig+0x620>)
 8001a0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a0c:	4b5f      	ldr	r3, [pc, #380]	; (8001b8c <HAL_RCC_OscConfig+0x620>)
 8001a0e:	2104      	movs	r1, #4
 8001a10:	430a      	orrs	r2, r1
 8001a12:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001a14:	4b5d      	ldr	r3, [pc, #372]	; (8001b8c <HAL_RCC_OscConfig+0x620>)
 8001a16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a18:	4b5c      	ldr	r3, [pc, #368]	; (8001b8c <HAL_RCC_OscConfig+0x620>)
 8001a1a:	2101      	movs	r1, #1
 8001a1c:	438a      	bics	r2, r1
 8001a1e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a20:	f7ff fa70 	bl	8000f04 <HAL_GetTick>
 8001a24:	0003      	movs	r3, r0
 8001a26:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001a28:	e008      	b.n	8001a3c <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001a2a:	f7ff fa6b 	bl	8000f04 <HAL_GetTick>
 8001a2e:	0002      	movs	r2, r0
 8001a30:	69bb      	ldr	r3, [r7, #24]
 8001a32:	1ad3      	subs	r3, r2, r3
 8001a34:	2b02      	cmp	r3, #2
 8001a36:	d901      	bls.n	8001a3c <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001a38:	2303      	movs	r3, #3
 8001a3a:	e0a2      	b.n	8001b82 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001a3c:	4b53      	ldr	r3, [pc, #332]	; (8001b8c <HAL_RCC_OscConfig+0x620>)
 8001a3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a40:	2202      	movs	r2, #2
 8001a42:	4013      	ands	r3, r2
 8001a44:	d1f1      	bne.n	8001a2a <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6a1b      	ldr	r3, [r3, #32]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d100      	bne.n	8001a50 <HAL_RCC_OscConfig+0x4e4>
 8001a4e:	e097      	b.n	8001b80 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a50:	4b4e      	ldr	r3, [pc, #312]	; (8001b8c <HAL_RCC_OscConfig+0x620>)
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	220c      	movs	r2, #12
 8001a56:	4013      	ands	r3, r2
 8001a58:	2b08      	cmp	r3, #8
 8001a5a:	d100      	bne.n	8001a5e <HAL_RCC_OscConfig+0x4f2>
 8001a5c:	e06b      	b.n	8001b36 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6a1b      	ldr	r3, [r3, #32]
 8001a62:	2b02      	cmp	r3, #2
 8001a64:	d14c      	bne.n	8001b00 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a66:	4b49      	ldr	r3, [pc, #292]	; (8001b8c <HAL_RCC_OscConfig+0x620>)
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	4b48      	ldr	r3, [pc, #288]	; (8001b8c <HAL_RCC_OscConfig+0x620>)
 8001a6c:	494a      	ldr	r1, [pc, #296]	; (8001b98 <HAL_RCC_OscConfig+0x62c>)
 8001a6e:	400a      	ands	r2, r1
 8001a70:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a72:	f7ff fa47 	bl	8000f04 <HAL_GetTick>
 8001a76:	0003      	movs	r3, r0
 8001a78:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a7a:	e008      	b.n	8001a8e <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a7c:	f7ff fa42 	bl	8000f04 <HAL_GetTick>
 8001a80:	0002      	movs	r2, r0
 8001a82:	69bb      	ldr	r3, [r7, #24]
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	2b02      	cmp	r3, #2
 8001a88:	d901      	bls.n	8001a8e <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	e079      	b.n	8001b82 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a8e:	4b3f      	ldr	r3, [pc, #252]	; (8001b8c <HAL_RCC_OscConfig+0x620>)
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	2380      	movs	r3, #128	; 0x80
 8001a94:	049b      	lsls	r3, r3, #18
 8001a96:	4013      	ands	r3, r2
 8001a98:	d1f0      	bne.n	8001a7c <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a9a:	4b3c      	ldr	r3, [pc, #240]	; (8001b8c <HAL_RCC_OscConfig+0x620>)
 8001a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a9e:	220f      	movs	r2, #15
 8001aa0:	4393      	bics	r3, r2
 8001aa2:	0019      	movs	r1, r3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001aa8:	4b38      	ldr	r3, [pc, #224]	; (8001b8c <HAL_RCC_OscConfig+0x620>)
 8001aaa:	430a      	orrs	r2, r1
 8001aac:	62da      	str	r2, [r3, #44]	; 0x2c
 8001aae:	4b37      	ldr	r3, [pc, #220]	; (8001b8c <HAL_RCC_OscConfig+0x620>)
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	4a3a      	ldr	r2, [pc, #232]	; (8001b9c <HAL_RCC_OscConfig+0x630>)
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	0019      	movs	r1, r3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac0:	431a      	orrs	r2, r3
 8001ac2:	4b32      	ldr	r3, [pc, #200]	; (8001b8c <HAL_RCC_OscConfig+0x620>)
 8001ac4:	430a      	orrs	r2, r1
 8001ac6:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ac8:	4b30      	ldr	r3, [pc, #192]	; (8001b8c <HAL_RCC_OscConfig+0x620>)
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	4b2f      	ldr	r3, [pc, #188]	; (8001b8c <HAL_RCC_OscConfig+0x620>)
 8001ace:	2180      	movs	r1, #128	; 0x80
 8001ad0:	0449      	lsls	r1, r1, #17
 8001ad2:	430a      	orrs	r2, r1
 8001ad4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ad6:	f7ff fa15 	bl	8000f04 <HAL_GetTick>
 8001ada:	0003      	movs	r3, r0
 8001adc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ade:	e008      	b.n	8001af2 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ae0:	f7ff fa10 	bl	8000f04 <HAL_GetTick>
 8001ae4:	0002      	movs	r2, r0
 8001ae6:	69bb      	ldr	r3, [r7, #24]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	2b02      	cmp	r3, #2
 8001aec:	d901      	bls.n	8001af2 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001aee:	2303      	movs	r3, #3
 8001af0:	e047      	b.n	8001b82 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001af2:	4b26      	ldr	r3, [pc, #152]	; (8001b8c <HAL_RCC_OscConfig+0x620>)
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	2380      	movs	r3, #128	; 0x80
 8001af8:	049b      	lsls	r3, r3, #18
 8001afa:	4013      	ands	r3, r2
 8001afc:	d0f0      	beq.n	8001ae0 <HAL_RCC_OscConfig+0x574>
 8001afe:	e03f      	b.n	8001b80 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b00:	4b22      	ldr	r3, [pc, #136]	; (8001b8c <HAL_RCC_OscConfig+0x620>)
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	4b21      	ldr	r3, [pc, #132]	; (8001b8c <HAL_RCC_OscConfig+0x620>)
 8001b06:	4924      	ldr	r1, [pc, #144]	; (8001b98 <HAL_RCC_OscConfig+0x62c>)
 8001b08:	400a      	ands	r2, r1
 8001b0a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b0c:	f7ff f9fa 	bl	8000f04 <HAL_GetTick>
 8001b10:	0003      	movs	r3, r0
 8001b12:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b14:	e008      	b.n	8001b28 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b16:	f7ff f9f5 	bl	8000f04 <HAL_GetTick>
 8001b1a:	0002      	movs	r2, r0
 8001b1c:	69bb      	ldr	r3, [r7, #24]
 8001b1e:	1ad3      	subs	r3, r2, r3
 8001b20:	2b02      	cmp	r3, #2
 8001b22:	d901      	bls.n	8001b28 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001b24:	2303      	movs	r3, #3
 8001b26:	e02c      	b.n	8001b82 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b28:	4b18      	ldr	r3, [pc, #96]	; (8001b8c <HAL_RCC_OscConfig+0x620>)
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	2380      	movs	r3, #128	; 0x80
 8001b2e:	049b      	lsls	r3, r3, #18
 8001b30:	4013      	ands	r3, r2
 8001b32:	d1f0      	bne.n	8001b16 <HAL_RCC_OscConfig+0x5aa>
 8001b34:	e024      	b.n	8001b80 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6a1b      	ldr	r3, [r3, #32]
 8001b3a:	2b01      	cmp	r3, #1
 8001b3c:	d101      	bne.n	8001b42 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e01f      	b.n	8001b82 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001b42:	4b12      	ldr	r3, [pc, #72]	; (8001b8c <HAL_RCC_OscConfig+0x620>)
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001b48:	4b10      	ldr	r3, [pc, #64]	; (8001b8c <HAL_RCC_OscConfig+0x620>)
 8001b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b4c:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b4e:	697a      	ldr	r2, [r7, #20]
 8001b50:	2380      	movs	r3, #128	; 0x80
 8001b52:	025b      	lsls	r3, r3, #9
 8001b54:	401a      	ands	r2, r3
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b5a:	429a      	cmp	r2, r3
 8001b5c:	d10e      	bne.n	8001b7c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	220f      	movs	r2, #15
 8001b62:	401a      	ands	r2, r3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	d107      	bne.n	8001b7c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001b6c:	697a      	ldr	r2, [r7, #20]
 8001b6e:	23f0      	movs	r3, #240	; 0xf0
 8001b70:	039b      	lsls	r3, r3, #14
 8001b72:	401a      	ands	r2, r3
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d001      	beq.n	8001b80 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e000      	b.n	8001b82 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001b80:	2300      	movs	r3, #0
}
 8001b82:	0018      	movs	r0, r3
 8001b84:	46bd      	mov	sp, r7
 8001b86:	b008      	add	sp, #32
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	46c0      	nop			; (mov r8, r8)
 8001b8c:	40021000 	.word	0x40021000
 8001b90:	00001388 	.word	0x00001388
 8001b94:	efffffff 	.word	0xefffffff
 8001b98:	feffffff 	.word	0xfeffffff
 8001b9c:	ffc2ffff 	.word	0xffc2ffff

08001ba0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b084      	sub	sp, #16
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d101      	bne.n	8001bb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e0b3      	b.n	8001d1c <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001bb4:	4b5b      	ldr	r3, [pc, #364]	; (8001d24 <HAL_RCC_ClockConfig+0x184>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	2201      	movs	r2, #1
 8001bba:	4013      	ands	r3, r2
 8001bbc:	683a      	ldr	r2, [r7, #0]
 8001bbe:	429a      	cmp	r2, r3
 8001bc0:	d911      	bls.n	8001be6 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bc2:	4b58      	ldr	r3, [pc, #352]	; (8001d24 <HAL_RCC_ClockConfig+0x184>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	4393      	bics	r3, r2
 8001bca:	0019      	movs	r1, r3
 8001bcc:	4b55      	ldr	r3, [pc, #340]	; (8001d24 <HAL_RCC_ClockConfig+0x184>)
 8001bce:	683a      	ldr	r2, [r7, #0]
 8001bd0:	430a      	orrs	r2, r1
 8001bd2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bd4:	4b53      	ldr	r3, [pc, #332]	; (8001d24 <HAL_RCC_ClockConfig+0x184>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	2201      	movs	r2, #1
 8001bda:	4013      	ands	r3, r2
 8001bdc:	683a      	ldr	r2, [r7, #0]
 8001bde:	429a      	cmp	r2, r3
 8001be0:	d001      	beq.n	8001be6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e09a      	b.n	8001d1c <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	2202      	movs	r2, #2
 8001bec:	4013      	ands	r3, r2
 8001bee:	d015      	beq.n	8001c1c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	2204      	movs	r2, #4
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	d006      	beq.n	8001c08 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001bfa:	4b4b      	ldr	r3, [pc, #300]	; (8001d28 <HAL_RCC_ClockConfig+0x188>)
 8001bfc:	685a      	ldr	r2, [r3, #4]
 8001bfe:	4b4a      	ldr	r3, [pc, #296]	; (8001d28 <HAL_RCC_ClockConfig+0x188>)
 8001c00:	21e0      	movs	r1, #224	; 0xe0
 8001c02:	00c9      	lsls	r1, r1, #3
 8001c04:	430a      	orrs	r2, r1
 8001c06:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c08:	4b47      	ldr	r3, [pc, #284]	; (8001d28 <HAL_RCC_ClockConfig+0x188>)
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	22f0      	movs	r2, #240	; 0xf0
 8001c0e:	4393      	bics	r3, r2
 8001c10:	0019      	movs	r1, r3
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	689a      	ldr	r2, [r3, #8]
 8001c16:	4b44      	ldr	r3, [pc, #272]	; (8001d28 <HAL_RCC_ClockConfig+0x188>)
 8001c18:	430a      	orrs	r2, r1
 8001c1a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	2201      	movs	r2, #1
 8001c22:	4013      	ands	r3, r2
 8001c24:	d040      	beq.n	8001ca8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d107      	bne.n	8001c3e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c2e:	4b3e      	ldr	r3, [pc, #248]	; (8001d28 <HAL_RCC_ClockConfig+0x188>)
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	2380      	movs	r3, #128	; 0x80
 8001c34:	029b      	lsls	r3, r3, #10
 8001c36:	4013      	ands	r3, r2
 8001c38:	d114      	bne.n	8001c64 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e06e      	b.n	8001d1c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	d107      	bne.n	8001c56 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c46:	4b38      	ldr	r3, [pc, #224]	; (8001d28 <HAL_RCC_ClockConfig+0x188>)
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	2380      	movs	r3, #128	; 0x80
 8001c4c:	049b      	lsls	r3, r3, #18
 8001c4e:	4013      	ands	r3, r2
 8001c50:	d108      	bne.n	8001c64 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e062      	b.n	8001d1c <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c56:	4b34      	ldr	r3, [pc, #208]	; (8001d28 <HAL_RCC_ClockConfig+0x188>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	2202      	movs	r2, #2
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	d101      	bne.n	8001c64 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	e05b      	b.n	8001d1c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c64:	4b30      	ldr	r3, [pc, #192]	; (8001d28 <HAL_RCC_ClockConfig+0x188>)
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	2203      	movs	r2, #3
 8001c6a:	4393      	bics	r3, r2
 8001c6c:	0019      	movs	r1, r3
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	685a      	ldr	r2, [r3, #4]
 8001c72:	4b2d      	ldr	r3, [pc, #180]	; (8001d28 <HAL_RCC_ClockConfig+0x188>)
 8001c74:	430a      	orrs	r2, r1
 8001c76:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c78:	f7ff f944 	bl	8000f04 <HAL_GetTick>
 8001c7c:	0003      	movs	r3, r0
 8001c7e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c80:	e009      	b.n	8001c96 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c82:	f7ff f93f 	bl	8000f04 <HAL_GetTick>
 8001c86:	0002      	movs	r2, r0
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	1ad3      	subs	r3, r2, r3
 8001c8c:	4a27      	ldr	r2, [pc, #156]	; (8001d2c <HAL_RCC_ClockConfig+0x18c>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d901      	bls.n	8001c96 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001c92:	2303      	movs	r3, #3
 8001c94:	e042      	b.n	8001d1c <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c96:	4b24      	ldr	r3, [pc, #144]	; (8001d28 <HAL_RCC_ClockConfig+0x188>)
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	220c      	movs	r2, #12
 8001c9c:	401a      	ands	r2, r3
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d1ec      	bne.n	8001c82 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ca8:	4b1e      	ldr	r3, [pc, #120]	; (8001d24 <HAL_RCC_ClockConfig+0x184>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	2201      	movs	r2, #1
 8001cae:	4013      	ands	r3, r2
 8001cb0:	683a      	ldr	r2, [r7, #0]
 8001cb2:	429a      	cmp	r2, r3
 8001cb4:	d211      	bcs.n	8001cda <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cb6:	4b1b      	ldr	r3, [pc, #108]	; (8001d24 <HAL_RCC_ClockConfig+0x184>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	2201      	movs	r2, #1
 8001cbc:	4393      	bics	r3, r2
 8001cbe:	0019      	movs	r1, r3
 8001cc0:	4b18      	ldr	r3, [pc, #96]	; (8001d24 <HAL_RCC_ClockConfig+0x184>)
 8001cc2:	683a      	ldr	r2, [r7, #0]
 8001cc4:	430a      	orrs	r2, r1
 8001cc6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cc8:	4b16      	ldr	r3, [pc, #88]	; (8001d24 <HAL_RCC_ClockConfig+0x184>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	2201      	movs	r2, #1
 8001cce:	4013      	ands	r3, r2
 8001cd0:	683a      	ldr	r2, [r7, #0]
 8001cd2:	429a      	cmp	r2, r3
 8001cd4:	d001      	beq.n	8001cda <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e020      	b.n	8001d1c <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	2204      	movs	r2, #4
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	d009      	beq.n	8001cf8 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001ce4:	4b10      	ldr	r3, [pc, #64]	; (8001d28 <HAL_RCC_ClockConfig+0x188>)
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	4a11      	ldr	r2, [pc, #68]	; (8001d30 <HAL_RCC_ClockConfig+0x190>)
 8001cea:	4013      	ands	r3, r2
 8001cec:	0019      	movs	r1, r3
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	68da      	ldr	r2, [r3, #12]
 8001cf2:	4b0d      	ldr	r3, [pc, #52]	; (8001d28 <HAL_RCC_ClockConfig+0x188>)
 8001cf4:	430a      	orrs	r2, r1
 8001cf6:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001cf8:	f000 f820 	bl	8001d3c <HAL_RCC_GetSysClockFreq>
 8001cfc:	0001      	movs	r1, r0
 8001cfe:	4b0a      	ldr	r3, [pc, #40]	; (8001d28 <HAL_RCC_ClockConfig+0x188>)
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	091b      	lsrs	r3, r3, #4
 8001d04:	220f      	movs	r2, #15
 8001d06:	4013      	ands	r3, r2
 8001d08:	4a0a      	ldr	r2, [pc, #40]	; (8001d34 <HAL_RCC_ClockConfig+0x194>)
 8001d0a:	5cd3      	ldrb	r3, [r2, r3]
 8001d0c:	000a      	movs	r2, r1
 8001d0e:	40da      	lsrs	r2, r3
 8001d10:	4b09      	ldr	r3, [pc, #36]	; (8001d38 <HAL_RCC_ClockConfig+0x198>)
 8001d12:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001d14:	2001      	movs	r0, #1
 8001d16:	f7ff f8af 	bl	8000e78 <HAL_InitTick>
  
  return HAL_OK;
 8001d1a:	2300      	movs	r3, #0
}
 8001d1c:	0018      	movs	r0, r3
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	b004      	add	sp, #16
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	40022000 	.word	0x40022000
 8001d28:	40021000 	.word	0x40021000
 8001d2c:	00001388 	.word	0x00001388
 8001d30:	fffff8ff 	.word	0xfffff8ff
 8001d34:	080039c4 	.word	0x080039c4
 8001d38:	20000008 	.word	0x20000008

08001d3c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b086      	sub	sp, #24
 8001d40:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d42:	2300      	movs	r3, #0
 8001d44:	60fb      	str	r3, [r7, #12]
 8001d46:	2300      	movs	r3, #0
 8001d48:	60bb      	str	r3, [r7, #8]
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	617b      	str	r3, [r7, #20]
 8001d4e:	2300      	movs	r3, #0
 8001d50:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001d52:	2300      	movs	r3, #0
 8001d54:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001d56:	4b20      	ldr	r3, [pc, #128]	; (8001dd8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	220c      	movs	r2, #12
 8001d60:	4013      	ands	r3, r2
 8001d62:	2b04      	cmp	r3, #4
 8001d64:	d002      	beq.n	8001d6c <HAL_RCC_GetSysClockFreq+0x30>
 8001d66:	2b08      	cmp	r3, #8
 8001d68:	d003      	beq.n	8001d72 <HAL_RCC_GetSysClockFreq+0x36>
 8001d6a:	e02c      	b.n	8001dc6 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d6c:	4b1b      	ldr	r3, [pc, #108]	; (8001ddc <HAL_RCC_GetSysClockFreq+0xa0>)
 8001d6e:	613b      	str	r3, [r7, #16]
      break;
 8001d70:	e02c      	b.n	8001dcc <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	0c9b      	lsrs	r3, r3, #18
 8001d76:	220f      	movs	r2, #15
 8001d78:	4013      	ands	r3, r2
 8001d7a:	4a19      	ldr	r2, [pc, #100]	; (8001de0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001d7c:	5cd3      	ldrb	r3, [r2, r3]
 8001d7e:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001d80:	4b15      	ldr	r3, [pc, #84]	; (8001dd8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d84:	220f      	movs	r2, #15
 8001d86:	4013      	ands	r3, r2
 8001d88:	4a16      	ldr	r2, [pc, #88]	; (8001de4 <HAL_RCC_GetSysClockFreq+0xa8>)
 8001d8a:	5cd3      	ldrb	r3, [r2, r3]
 8001d8c:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001d8e:	68fa      	ldr	r2, [r7, #12]
 8001d90:	2380      	movs	r3, #128	; 0x80
 8001d92:	025b      	lsls	r3, r3, #9
 8001d94:	4013      	ands	r3, r2
 8001d96:	d009      	beq.n	8001dac <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001d98:	68b9      	ldr	r1, [r7, #8]
 8001d9a:	4810      	ldr	r0, [pc, #64]	; (8001ddc <HAL_RCC_GetSysClockFreq+0xa0>)
 8001d9c:	f7fe f9b4 	bl	8000108 <__udivsi3>
 8001da0:	0003      	movs	r3, r0
 8001da2:	001a      	movs	r2, r3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	4353      	muls	r3, r2
 8001da8:	617b      	str	r3, [r7, #20]
 8001daa:	e009      	b.n	8001dc0 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001dac:	6879      	ldr	r1, [r7, #4]
 8001dae:	000a      	movs	r2, r1
 8001db0:	0152      	lsls	r2, r2, #5
 8001db2:	1a52      	subs	r2, r2, r1
 8001db4:	0193      	lsls	r3, r2, #6
 8001db6:	1a9b      	subs	r3, r3, r2
 8001db8:	00db      	lsls	r3, r3, #3
 8001dba:	185b      	adds	r3, r3, r1
 8001dbc:	021b      	lsls	r3, r3, #8
 8001dbe:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	613b      	str	r3, [r7, #16]
      break;
 8001dc4:	e002      	b.n	8001dcc <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001dc6:	4b05      	ldr	r3, [pc, #20]	; (8001ddc <HAL_RCC_GetSysClockFreq+0xa0>)
 8001dc8:	613b      	str	r3, [r7, #16]
      break;
 8001dca:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001dcc:	693b      	ldr	r3, [r7, #16]
}
 8001dce:	0018      	movs	r0, r3
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	b006      	add	sp, #24
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	46c0      	nop			; (mov r8, r8)
 8001dd8:	40021000 	.word	0x40021000
 8001ddc:	007a1200 	.word	0x007a1200
 8001de0:	080039dc 	.word	0x080039dc
 8001de4:	080039ec 	.word	0x080039ec

08001de8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001dec:	4b02      	ldr	r3, [pc, #8]	; (8001df8 <HAL_RCC_GetHCLKFreq+0x10>)
 8001dee:	681b      	ldr	r3, [r3, #0]
}
 8001df0:	0018      	movs	r0, r3
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	46c0      	nop			; (mov r8, r8)
 8001df8:	20000008 	.word	0x20000008

08001dfc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001e00:	f7ff fff2 	bl	8001de8 <HAL_RCC_GetHCLKFreq>
 8001e04:	0001      	movs	r1, r0
 8001e06:	4b06      	ldr	r3, [pc, #24]	; (8001e20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	0a1b      	lsrs	r3, r3, #8
 8001e0c:	2207      	movs	r2, #7
 8001e0e:	4013      	ands	r3, r2
 8001e10:	4a04      	ldr	r2, [pc, #16]	; (8001e24 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001e12:	5cd3      	ldrb	r3, [r2, r3]
 8001e14:	40d9      	lsrs	r1, r3
 8001e16:	000b      	movs	r3, r1
}    
 8001e18:	0018      	movs	r0, r3
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	46c0      	nop			; (mov r8, r8)
 8001e20:	40021000 	.word	0x40021000
 8001e24:	080039d4 	.word	0x080039d4

08001e28 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b086      	sub	sp, #24
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001e30:	2300      	movs	r3, #0
 8001e32:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001e34:	2300      	movs	r3, #0
 8001e36:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	2380      	movs	r3, #128	; 0x80
 8001e3e:	025b      	lsls	r3, r3, #9
 8001e40:	4013      	ands	r3, r2
 8001e42:	d100      	bne.n	8001e46 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001e44:	e08e      	b.n	8001f64 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001e46:	2017      	movs	r0, #23
 8001e48:	183b      	adds	r3, r7, r0
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e4e:	4b57      	ldr	r3, [pc, #348]	; (8001fac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e50:	69da      	ldr	r2, [r3, #28]
 8001e52:	2380      	movs	r3, #128	; 0x80
 8001e54:	055b      	lsls	r3, r3, #21
 8001e56:	4013      	ands	r3, r2
 8001e58:	d110      	bne.n	8001e7c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e5a:	4b54      	ldr	r3, [pc, #336]	; (8001fac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e5c:	69da      	ldr	r2, [r3, #28]
 8001e5e:	4b53      	ldr	r3, [pc, #332]	; (8001fac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e60:	2180      	movs	r1, #128	; 0x80
 8001e62:	0549      	lsls	r1, r1, #21
 8001e64:	430a      	orrs	r2, r1
 8001e66:	61da      	str	r2, [r3, #28]
 8001e68:	4b50      	ldr	r3, [pc, #320]	; (8001fac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e6a:	69da      	ldr	r2, [r3, #28]
 8001e6c:	2380      	movs	r3, #128	; 0x80
 8001e6e:	055b      	lsls	r3, r3, #21
 8001e70:	4013      	ands	r3, r2
 8001e72:	60bb      	str	r3, [r7, #8]
 8001e74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e76:	183b      	adds	r3, r7, r0
 8001e78:	2201      	movs	r2, #1
 8001e7a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e7c:	4b4c      	ldr	r3, [pc, #304]	; (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	2380      	movs	r3, #128	; 0x80
 8001e82:	005b      	lsls	r3, r3, #1
 8001e84:	4013      	ands	r3, r2
 8001e86:	d11a      	bne.n	8001ebe <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e88:	4b49      	ldr	r3, [pc, #292]	; (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	4b48      	ldr	r3, [pc, #288]	; (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001e8e:	2180      	movs	r1, #128	; 0x80
 8001e90:	0049      	lsls	r1, r1, #1
 8001e92:	430a      	orrs	r2, r1
 8001e94:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e96:	f7ff f835 	bl	8000f04 <HAL_GetTick>
 8001e9a:	0003      	movs	r3, r0
 8001e9c:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e9e:	e008      	b.n	8001eb2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ea0:	f7ff f830 	bl	8000f04 <HAL_GetTick>
 8001ea4:	0002      	movs	r2, r0
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	2b64      	cmp	r3, #100	; 0x64
 8001eac:	d901      	bls.n	8001eb2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	e077      	b.n	8001fa2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eb2:	4b3f      	ldr	r3, [pc, #252]	; (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	2380      	movs	r3, #128	; 0x80
 8001eb8:	005b      	lsls	r3, r3, #1
 8001eba:	4013      	ands	r3, r2
 8001ebc:	d0f0      	beq.n	8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001ebe:	4b3b      	ldr	r3, [pc, #236]	; (8001fac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001ec0:	6a1a      	ldr	r2, [r3, #32]
 8001ec2:	23c0      	movs	r3, #192	; 0xc0
 8001ec4:	009b      	lsls	r3, r3, #2
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d034      	beq.n	8001f3a <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	685a      	ldr	r2, [r3, #4]
 8001ed4:	23c0      	movs	r3, #192	; 0xc0
 8001ed6:	009b      	lsls	r3, r3, #2
 8001ed8:	4013      	ands	r3, r2
 8001eda:	68fa      	ldr	r2, [r7, #12]
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d02c      	beq.n	8001f3a <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001ee0:	4b32      	ldr	r3, [pc, #200]	; (8001fac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001ee2:	6a1b      	ldr	r3, [r3, #32]
 8001ee4:	4a33      	ldr	r2, [pc, #204]	; (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001eea:	4b30      	ldr	r3, [pc, #192]	; (8001fac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001eec:	6a1a      	ldr	r2, [r3, #32]
 8001eee:	4b2f      	ldr	r3, [pc, #188]	; (8001fac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001ef0:	2180      	movs	r1, #128	; 0x80
 8001ef2:	0249      	lsls	r1, r1, #9
 8001ef4:	430a      	orrs	r2, r1
 8001ef6:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001ef8:	4b2c      	ldr	r3, [pc, #176]	; (8001fac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001efa:	6a1a      	ldr	r2, [r3, #32]
 8001efc:	4b2b      	ldr	r3, [pc, #172]	; (8001fac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001efe:	492e      	ldr	r1, [pc, #184]	; (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8001f00:	400a      	ands	r2, r1
 8001f02:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001f04:	4b29      	ldr	r3, [pc, #164]	; (8001fac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001f06:	68fa      	ldr	r2, [r7, #12]
 8001f08:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	4013      	ands	r3, r2
 8001f10:	d013      	beq.n	8001f3a <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f12:	f7fe fff7 	bl	8000f04 <HAL_GetTick>
 8001f16:	0003      	movs	r3, r0
 8001f18:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f1a:	e009      	b.n	8001f30 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f1c:	f7fe fff2 	bl	8000f04 <HAL_GetTick>
 8001f20:	0002      	movs	r2, r0
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	4a25      	ldr	r2, [pc, #148]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d901      	bls.n	8001f30 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001f2c:	2303      	movs	r3, #3
 8001f2e:	e038      	b.n	8001fa2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f30:	4b1e      	ldr	r3, [pc, #120]	; (8001fac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001f32:	6a1b      	ldr	r3, [r3, #32]
 8001f34:	2202      	movs	r2, #2
 8001f36:	4013      	ands	r3, r2
 8001f38:	d0f0      	beq.n	8001f1c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f3a:	4b1c      	ldr	r3, [pc, #112]	; (8001fac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001f3c:	6a1b      	ldr	r3, [r3, #32]
 8001f3e:	4a1d      	ldr	r2, [pc, #116]	; (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001f40:	4013      	ands	r3, r2
 8001f42:	0019      	movs	r1, r3
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	685a      	ldr	r2, [r3, #4]
 8001f48:	4b18      	ldr	r3, [pc, #96]	; (8001fac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001f4a:	430a      	orrs	r2, r1
 8001f4c:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001f4e:	2317      	movs	r3, #23
 8001f50:	18fb      	adds	r3, r7, r3
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d105      	bne.n	8001f64 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f58:	4b14      	ldr	r3, [pc, #80]	; (8001fac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001f5a:	69da      	ldr	r2, [r3, #28]
 8001f5c:	4b13      	ldr	r3, [pc, #76]	; (8001fac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001f5e:	4918      	ldr	r1, [pc, #96]	; (8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8001f60:	400a      	ands	r2, r1
 8001f62:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	2201      	movs	r2, #1
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	d009      	beq.n	8001f82 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001f6e:	4b0f      	ldr	r3, [pc, #60]	; (8001fac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f72:	2203      	movs	r2, #3
 8001f74:	4393      	bics	r3, r2
 8001f76:	0019      	movs	r1, r3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	689a      	ldr	r2, [r3, #8]
 8001f7c:	4b0b      	ldr	r3, [pc, #44]	; (8001fac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001f7e:	430a      	orrs	r2, r1
 8001f80:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	2220      	movs	r2, #32
 8001f88:	4013      	ands	r3, r2
 8001f8a:	d009      	beq.n	8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001f8c:	4b07      	ldr	r3, [pc, #28]	; (8001fac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f90:	2210      	movs	r2, #16
 8001f92:	4393      	bics	r3, r2
 8001f94:	0019      	movs	r1, r3
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	68da      	ldr	r2, [r3, #12]
 8001f9a:	4b04      	ldr	r3, [pc, #16]	; (8001fac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001f9c:	430a      	orrs	r2, r1
 8001f9e:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001fa0:	2300      	movs	r3, #0
}
 8001fa2:	0018      	movs	r0, r3
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	b006      	add	sp, #24
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	46c0      	nop			; (mov r8, r8)
 8001fac:	40021000 	.word	0x40021000
 8001fb0:	40007000 	.word	0x40007000
 8001fb4:	fffffcff 	.word	0xfffffcff
 8001fb8:	fffeffff 	.word	0xfffeffff
 8001fbc:	00001388 	.word	0x00001388
 8001fc0:	efffffff 	.word	0xefffffff

08001fc4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d101      	bne.n	8001fd6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e042      	b.n	800205c <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	223d      	movs	r2, #61	; 0x3d
 8001fda:	5c9b      	ldrb	r3, [r3, r2]
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d107      	bne.n	8001ff2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	223c      	movs	r2, #60	; 0x3c
 8001fe6:	2100      	movs	r1, #0
 8001fe8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	0018      	movs	r0, r3
 8001fee:	f7fe fe53 	bl	8000c98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	223d      	movs	r2, #61	; 0x3d
 8001ff6:	2102      	movs	r1, #2
 8001ff8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	3304      	adds	r3, #4
 8002002:	0019      	movs	r1, r3
 8002004:	0010      	movs	r0, r2
 8002006:	f000 f9d7 	bl	80023b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2246      	movs	r2, #70	; 0x46
 800200e:	2101      	movs	r1, #1
 8002010:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	223e      	movs	r2, #62	; 0x3e
 8002016:	2101      	movs	r1, #1
 8002018:	5499      	strb	r1, [r3, r2]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	223f      	movs	r2, #63	; 0x3f
 800201e:	2101      	movs	r1, #1
 8002020:	5499      	strb	r1, [r3, r2]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2240      	movs	r2, #64	; 0x40
 8002026:	2101      	movs	r1, #1
 8002028:	5499      	strb	r1, [r3, r2]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2241      	movs	r2, #65	; 0x41
 800202e:	2101      	movs	r1, #1
 8002030:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2242      	movs	r2, #66	; 0x42
 8002036:	2101      	movs	r1, #1
 8002038:	5499      	strb	r1, [r3, r2]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2243      	movs	r2, #67	; 0x43
 800203e:	2101      	movs	r1, #1
 8002040:	5499      	strb	r1, [r3, r2]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2244      	movs	r2, #68	; 0x44
 8002046:	2101      	movs	r1, #1
 8002048:	5499      	strb	r1, [r3, r2]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2245      	movs	r2, #69	; 0x45
 800204e:	2101      	movs	r1, #1
 8002050:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	223d      	movs	r2, #61	; 0x3d
 8002056:	2101      	movs	r1, #1
 8002058:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800205a:	2300      	movs	r3, #0
}
 800205c:	0018      	movs	r0, r3
 800205e:	46bd      	mov	sp, r7
 8002060:	b002      	add	sp, #8
 8002062:	bd80      	pop	{r7, pc}

08002064 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b084      	sub	sp, #16
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	223d      	movs	r2, #61	; 0x3d
 8002070:	5c9b      	ldrb	r3, [r3, r2]
 8002072:	b2db      	uxtb	r3, r3
 8002074:	2b01      	cmp	r3, #1
 8002076:	d001      	beq.n	800207c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	e030      	b.n	80020de <HAL_TIM_Base_Start_IT+0x7a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	223d      	movs	r2, #61	; 0x3d
 8002080:	2102      	movs	r1, #2
 8002082:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	68da      	ldr	r2, [r3, #12]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	2101      	movs	r1, #1
 8002090:	430a      	orrs	r2, r1
 8002092:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a13      	ldr	r2, [pc, #76]	; (80020e8 <HAL_TIM_Base_Start_IT+0x84>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d004      	beq.n	80020a8 <HAL_TIM_Base_Start_IT+0x44>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a12      	ldr	r2, [pc, #72]	; (80020ec <HAL_TIM_Base_Start_IT+0x88>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d111      	bne.n	80020cc <HAL_TIM_Base_Start_IT+0x68>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	2207      	movs	r2, #7
 80020b0:	4013      	ands	r3, r2
 80020b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	2b06      	cmp	r3, #6
 80020b8:	d010      	beq.n	80020dc <HAL_TIM_Base_Start_IT+0x78>
    {
      __HAL_TIM_ENABLE(htim);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	2101      	movs	r1, #1
 80020c6:	430a      	orrs	r2, r1
 80020c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020ca:	e007      	b.n	80020dc <HAL_TIM_Base_Start_IT+0x78>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	2101      	movs	r1, #1
 80020d8:	430a      	orrs	r2, r1
 80020da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80020dc:	2300      	movs	r3, #0
}
 80020de:	0018      	movs	r0, r3
 80020e0:	46bd      	mov	sp, r7
 80020e2:	b004      	add	sp, #16
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	46c0      	nop			; (mov r8, r8)
 80020e8:	40012c00 	.word	0x40012c00
 80020ec:	40000400 	.word	0x40000400

080020f0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	68da      	ldr	r2, [r3, #12]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	2101      	movs	r1, #1
 8002104:	438a      	bics	r2, r1
 8002106:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	6a1b      	ldr	r3, [r3, #32]
 800210e:	4a0d      	ldr	r2, [pc, #52]	; (8002144 <HAL_TIM_Base_Stop_IT+0x54>)
 8002110:	4013      	ands	r3, r2
 8002112:	d10d      	bne.n	8002130 <HAL_TIM_Base_Stop_IT+0x40>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	6a1b      	ldr	r3, [r3, #32]
 800211a:	4a0b      	ldr	r2, [pc, #44]	; (8002148 <HAL_TIM_Base_Stop_IT+0x58>)
 800211c:	4013      	ands	r3, r2
 800211e:	d107      	bne.n	8002130 <HAL_TIM_Base_Stop_IT+0x40>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	2101      	movs	r1, #1
 800212c:	438a      	bics	r2, r1
 800212e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	223d      	movs	r2, #61	; 0x3d
 8002134:	2101      	movs	r1, #1
 8002136:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8002138:	2300      	movs	r3, #0
}
 800213a:	0018      	movs	r0, r3
 800213c:	46bd      	mov	sp, r7
 800213e:	b002      	add	sp, #8
 8002140:	bd80      	pop	{r7, pc}
 8002142:	46c0      	nop			; (mov r8, r8)
 8002144:	00001111 	.word	0x00001111
 8002148:	00000444 	.word	0x00000444

0800214c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b082      	sub	sp, #8
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	691b      	ldr	r3, [r3, #16]
 800215a:	2202      	movs	r2, #2
 800215c:	4013      	ands	r3, r2
 800215e:	2b02      	cmp	r3, #2
 8002160:	d124      	bne.n	80021ac <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	68db      	ldr	r3, [r3, #12]
 8002168:	2202      	movs	r2, #2
 800216a:	4013      	ands	r3, r2
 800216c:	2b02      	cmp	r3, #2
 800216e:	d11d      	bne.n	80021ac <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	2203      	movs	r2, #3
 8002176:	4252      	negs	r2, r2
 8002178:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2201      	movs	r2, #1
 800217e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	699b      	ldr	r3, [r3, #24]
 8002186:	2203      	movs	r2, #3
 8002188:	4013      	ands	r3, r2
 800218a:	d004      	beq.n	8002196 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	0018      	movs	r0, r3
 8002190:	f000 f8fa 	bl	8002388 <HAL_TIM_IC_CaptureCallback>
 8002194:	e007      	b.n	80021a6 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	0018      	movs	r0, r3
 800219a:	f000 f8ed 	bl	8002378 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	0018      	movs	r0, r3
 80021a2:	f000 f8f9 	bl	8002398 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2200      	movs	r2, #0
 80021aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	691b      	ldr	r3, [r3, #16]
 80021b2:	2204      	movs	r2, #4
 80021b4:	4013      	ands	r3, r2
 80021b6:	2b04      	cmp	r3, #4
 80021b8:	d125      	bne.n	8002206 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	2204      	movs	r2, #4
 80021c2:	4013      	ands	r3, r2
 80021c4:	2b04      	cmp	r3, #4
 80021c6:	d11e      	bne.n	8002206 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	2205      	movs	r2, #5
 80021ce:	4252      	negs	r2, r2
 80021d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2202      	movs	r2, #2
 80021d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	699a      	ldr	r2, [r3, #24]
 80021de:	23c0      	movs	r3, #192	; 0xc0
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	4013      	ands	r3, r2
 80021e4:	d004      	beq.n	80021f0 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	0018      	movs	r0, r3
 80021ea:	f000 f8cd 	bl	8002388 <HAL_TIM_IC_CaptureCallback>
 80021ee:	e007      	b.n	8002200 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	0018      	movs	r0, r3
 80021f4:	f000 f8c0 	bl	8002378 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	0018      	movs	r0, r3
 80021fc:	f000 f8cc 	bl	8002398 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2200      	movs	r2, #0
 8002204:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	691b      	ldr	r3, [r3, #16]
 800220c:	2208      	movs	r2, #8
 800220e:	4013      	ands	r3, r2
 8002210:	2b08      	cmp	r3, #8
 8002212:	d124      	bne.n	800225e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	68db      	ldr	r3, [r3, #12]
 800221a:	2208      	movs	r2, #8
 800221c:	4013      	ands	r3, r2
 800221e:	2b08      	cmp	r3, #8
 8002220:	d11d      	bne.n	800225e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	2209      	movs	r2, #9
 8002228:	4252      	negs	r2, r2
 800222a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2204      	movs	r2, #4
 8002230:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	69db      	ldr	r3, [r3, #28]
 8002238:	2203      	movs	r2, #3
 800223a:	4013      	ands	r3, r2
 800223c:	d004      	beq.n	8002248 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	0018      	movs	r0, r3
 8002242:	f000 f8a1 	bl	8002388 <HAL_TIM_IC_CaptureCallback>
 8002246:	e007      	b.n	8002258 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	0018      	movs	r0, r3
 800224c:	f000 f894 	bl	8002378 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	0018      	movs	r0, r3
 8002254:	f000 f8a0 	bl	8002398 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2200      	movs	r2, #0
 800225c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	691b      	ldr	r3, [r3, #16]
 8002264:	2210      	movs	r2, #16
 8002266:	4013      	ands	r3, r2
 8002268:	2b10      	cmp	r3, #16
 800226a:	d125      	bne.n	80022b8 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	68db      	ldr	r3, [r3, #12]
 8002272:	2210      	movs	r2, #16
 8002274:	4013      	ands	r3, r2
 8002276:	2b10      	cmp	r3, #16
 8002278:	d11e      	bne.n	80022b8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	2211      	movs	r2, #17
 8002280:	4252      	negs	r2, r2
 8002282:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2208      	movs	r2, #8
 8002288:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	69da      	ldr	r2, [r3, #28]
 8002290:	23c0      	movs	r3, #192	; 0xc0
 8002292:	009b      	lsls	r3, r3, #2
 8002294:	4013      	ands	r3, r2
 8002296:	d004      	beq.n	80022a2 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	0018      	movs	r0, r3
 800229c:	f000 f874 	bl	8002388 <HAL_TIM_IC_CaptureCallback>
 80022a0:	e007      	b.n	80022b2 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	0018      	movs	r0, r3
 80022a6:	f000 f867 	bl	8002378 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	0018      	movs	r0, r3
 80022ae:	f000 f873 	bl	8002398 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2200      	movs	r2, #0
 80022b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	691b      	ldr	r3, [r3, #16]
 80022be:	2201      	movs	r2, #1
 80022c0:	4013      	ands	r3, r2
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d10f      	bne.n	80022e6 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	2201      	movs	r2, #1
 80022ce:	4013      	ands	r3, r2
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	d108      	bne.n	80022e6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	2202      	movs	r2, #2
 80022da:	4252      	negs	r2, r2
 80022dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	0018      	movs	r0, r3
 80022e2:	f7fe fad7 	bl	8000894 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	691b      	ldr	r3, [r3, #16]
 80022ec:	2280      	movs	r2, #128	; 0x80
 80022ee:	4013      	ands	r3, r2
 80022f0:	2b80      	cmp	r3, #128	; 0x80
 80022f2:	d10f      	bne.n	8002314 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	68db      	ldr	r3, [r3, #12]
 80022fa:	2280      	movs	r2, #128	; 0x80
 80022fc:	4013      	ands	r3, r2
 80022fe:	2b80      	cmp	r3, #128	; 0x80
 8002300:	d108      	bne.n	8002314 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	2281      	movs	r2, #129	; 0x81
 8002308:	4252      	negs	r2, r2
 800230a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	0018      	movs	r0, r3
 8002310:	f000 f8c6 	bl	80024a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	691b      	ldr	r3, [r3, #16]
 800231a:	2240      	movs	r2, #64	; 0x40
 800231c:	4013      	ands	r3, r2
 800231e:	2b40      	cmp	r3, #64	; 0x40
 8002320:	d10f      	bne.n	8002342 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	2240      	movs	r2, #64	; 0x40
 800232a:	4013      	ands	r3, r2
 800232c:	2b40      	cmp	r3, #64	; 0x40
 800232e:	d108      	bne.n	8002342 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	2241      	movs	r2, #65	; 0x41
 8002336:	4252      	negs	r2, r2
 8002338:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	0018      	movs	r0, r3
 800233e:	f000 f833 	bl	80023a8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	691b      	ldr	r3, [r3, #16]
 8002348:	2220      	movs	r2, #32
 800234a:	4013      	ands	r3, r2
 800234c:	2b20      	cmp	r3, #32
 800234e:	d10f      	bne.n	8002370 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	68db      	ldr	r3, [r3, #12]
 8002356:	2220      	movs	r2, #32
 8002358:	4013      	ands	r3, r2
 800235a:	2b20      	cmp	r3, #32
 800235c:	d108      	bne.n	8002370 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	2221      	movs	r2, #33	; 0x21
 8002364:	4252      	negs	r2, r2
 8002366:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	0018      	movs	r0, r3
 800236c:	f000 f890 	bl	8002490 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002370:	46c0      	nop			; (mov r8, r8)
 8002372:	46bd      	mov	sp, r7
 8002374:	b002      	add	sp, #8
 8002376:	bd80      	pop	{r7, pc}

08002378 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b082      	sub	sp, #8
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002380:	46c0      	nop			; (mov r8, r8)
 8002382:	46bd      	mov	sp, r7
 8002384:	b002      	add	sp, #8
 8002386:	bd80      	pop	{r7, pc}

08002388 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002390:	46c0      	nop			; (mov r8, r8)
 8002392:	46bd      	mov	sp, r7
 8002394:	b002      	add	sp, #8
 8002396:	bd80      	pop	{r7, pc}

08002398 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80023a0:	46c0      	nop			; (mov r8, r8)
 80023a2:	46bd      	mov	sp, r7
 80023a4:	b002      	add	sp, #8
 80023a6:	bd80      	pop	{r7, pc}

080023a8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b082      	sub	sp, #8
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80023b0:	46c0      	nop			; (mov r8, r8)
 80023b2:	46bd      	mov	sp, r7
 80023b4:	b002      	add	sp, #8
 80023b6:	bd80      	pop	{r7, pc}

080023b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b084      	sub	sp, #16
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
 80023c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	4a2b      	ldr	r2, [pc, #172]	; (8002478 <TIM_Base_SetConfig+0xc0>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d003      	beq.n	80023d8 <TIM_Base_SetConfig+0x20>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	4a2a      	ldr	r2, [pc, #168]	; (800247c <TIM_Base_SetConfig+0xc4>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d108      	bne.n	80023ea <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2270      	movs	r2, #112	; 0x70
 80023dc:	4393      	bics	r3, r2
 80023de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	68fa      	ldr	r2, [r7, #12]
 80023e6:	4313      	orrs	r3, r2
 80023e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4a22      	ldr	r2, [pc, #136]	; (8002478 <TIM_Base_SetConfig+0xc0>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d00f      	beq.n	8002412 <TIM_Base_SetConfig+0x5a>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4a21      	ldr	r2, [pc, #132]	; (800247c <TIM_Base_SetConfig+0xc4>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d00b      	beq.n	8002412 <TIM_Base_SetConfig+0x5a>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	4a20      	ldr	r2, [pc, #128]	; (8002480 <TIM_Base_SetConfig+0xc8>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d007      	beq.n	8002412 <TIM_Base_SetConfig+0x5a>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4a1f      	ldr	r2, [pc, #124]	; (8002484 <TIM_Base_SetConfig+0xcc>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d003      	beq.n	8002412 <TIM_Base_SetConfig+0x5a>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4a1e      	ldr	r2, [pc, #120]	; (8002488 <TIM_Base_SetConfig+0xd0>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d108      	bne.n	8002424 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	4a1d      	ldr	r2, [pc, #116]	; (800248c <TIM_Base_SetConfig+0xd4>)
 8002416:	4013      	ands	r3, r2
 8002418:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	68db      	ldr	r3, [r3, #12]
 800241e:	68fa      	ldr	r2, [r7, #12]
 8002420:	4313      	orrs	r3, r2
 8002422:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2280      	movs	r2, #128	; 0x80
 8002428:	4393      	bics	r3, r2
 800242a:	001a      	movs	r2, r3
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	695b      	ldr	r3, [r3, #20]
 8002430:	4313      	orrs	r3, r2
 8002432:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	68fa      	ldr	r2, [r7, #12]
 8002438:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	689a      	ldr	r2, [r3, #8]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	4a0a      	ldr	r2, [pc, #40]	; (8002478 <TIM_Base_SetConfig+0xc0>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d007      	beq.n	8002462 <TIM_Base_SetConfig+0xaa>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	4a0b      	ldr	r2, [pc, #44]	; (8002484 <TIM_Base_SetConfig+0xcc>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d003      	beq.n	8002462 <TIM_Base_SetConfig+0xaa>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	4a0a      	ldr	r2, [pc, #40]	; (8002488 <TIM_Base_SetConfig+0xd0>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d103      	bne.n	800246a <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	691a      	ldr	r2, [r3, #16]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2201      	movs	r2, #1
 800246e:	615a      	str	r2, [r3, #20]
}
 8002470:	46c0      	nop			; (mov r8, r8)
 8002472:	46bd      	mov	sp, r7
 8002474:	b004      	add	sp, #16
 8002476:	bd80      	pop	{r7, pc}
 8002478:	40012c00 	.word	0x40012c00
 800247c:	40000400 	.word	0x40000400
 8002480:	40002000 	.word	0x40002000
 8002484:	40014400 	.word	0x40014400
 8002488:	40014800 	.word	0x40014800
 800248c:	fffffcff 	.word	0xfffffcff

08002490 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b082      	sub	sp, #8
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002498:	46c0      	nop			; (mov r8, r8)
 800249a:	46bd      	mov	sp, r7
 800249c:	b002      	add	sp, #8
 800249e:	bd80      	pop	{r7, pc}

080024a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b082      	sub	sp, #8
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80024a8:	46c0      	nop			; (mov r8, r8)
 80024aa:	46bd      	mov	sp, r7
 80024ac:	b002      	add	sp, #8
 80024ae:	bd80      	pop	{r7, pc}

080024b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b082      	sub	sp, #8
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d101      	bne.n	80024c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e044      	b.n	800254c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d107      	bne.n	80024da <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2278      	movs	r2, #120	; 0x78
 80024ce:	2100      	movs	r1, #0
 80024d0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	0018      	movs	r0, r3
 80024d6:	f7fe fc07 	bl	8000ce8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2224      	movs	r2, #36	; 0x24
 80024de:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	2101      	movs	r1, #1
 80024ec:	438a      	bics	r2, r1
 80024ee:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	0018      	movs	r0, r3
 80024f4:	f000 fc0c 	bl	8002d10 <UART_SetConfig>
 80024f8:	0003      	movs	r3, r0
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d101      	bne.n	8002502 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e024      	b.n	800254c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002506:	2b00      	cmp	r3, #0
 8002508:	d003      	beq.n	8002512 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	0018      	movs	r0, r3
 800250e:	f000 fd27 	bl	8002f60 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	685a      	ldr	r2, [r3, #4]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	490d      	ldr	r1, [pc, #52]	; (8002554 <HAL_UART_Init+0xa4>)
 800251e:	400a      	ands	r2, r1
 8002520:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	689a      	ldr	r2, [r3, #8]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	2108      	movs	r1, #8
 800252e:	438a      	bics	r2, r1
 8002530:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	2101      	movs	r1, #1
 800253e:	430a      	orrs	r2, r1
 8002540:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	0018      	movs	r0, r3
 8002546:	f000 fdbf 	bl	80030c8 <UART_CheckIdleState>
 800254a:	0003      	movs	r3, r0
}
 800254c:	0018      	movs	r0, r3
 800254e:	46bd      	mov	sp, r7
 8002550:	b002      	add	sp, #8
 8002552:	bd80      	pop	{r7, pc}
 8002554:	fffff7ff 	.word	0xfffff7ff

08002558 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b08a      	sub	sp, #40	; 0x28
 800255c:	af02      	add	r7, sp, #8
 800255e:	60f8      	str	r0, [r7, #12]
 8002560:	60b9      	str	r1, [r7, #8]
 8002562:	603b      	str	r3, [r7, #0]
 8002564:	1dbb      	adds	r3, r7, #6
 8002566:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800256c:	2b20      	cmp	r3, #32
 800256e:	d000      	beq.n	8002572 <HAL_UART_Transmit+0x1a>
 8002570:	e08d      	b.n	800268e <HAL_UART_Transmit+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d003      	beq.n	8002580 <HAL_UART_Transmit+0x28>
 8002578:	1dbb      	adds	r3, r7, #6
 800257a:	881b      	ldrh	r3, [r3, #0]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d101      	bne.n	8002584 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	e085      	b.n	8002690 <HAL_UART_Transmit+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	689a      	ldr	r2, [r3, #8]
 8002588:	2380      	movs	r3, #128	; 0x80
 800258a:	015b      	lsls	r3, r3, #5
 800258c:	429a      	cmp	r2, r3
 800258e:	d109      	bne.n	80025a4 <HAL_UART_Transmit+0x4c>
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	691b      	ldr	r3, [r3, #16]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d105      	bne.n	80025a4 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	2201      	movs	r2, #1
 800259c:	4013      	ands	r3, r2
 800259e:	d001      	beq.n	80025a4 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e075      	b.n	8002690 <HAL_UART_Transmit+0x138>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	2284      	movs	r2, #132	; 0x84
 80025a8:	2100      	movs	r1, #0
 80025aa:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	2221      	movs	r2, #33	; 0x21
 80025b0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80025b2:	f7fe fca7 	bl	8000f04 <HAL_GetTick>
 80025b6:	0003      	movs	r3, r0
 80025b8:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	1dba      	adds	r2, r7, #6
 80025be:	2150      	movs	r1, #80	; 0x50
 80025c0:	8812      	ldrh	r2, [r2, #0]
 80025c2:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	1dba      	adds	r2, r7, #6
 80025c8:	2152      	movs	r1, #82	; 0x52
 80025ca:	8812      	ldrh	r2, [r2, #0]
 80025cc:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	689a      	ldr	r2, [r3, #8]
 80025d2:	2380      	movs	r3, #128	; 0x80
 80025d4:	015b      	lsls	r3, r3, #5
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d108      	bne.n	80025ec <HAL_UART_Transmit+0x94>
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	691b      	ldr	r3, [r3, #16]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d104      	bne.n	80025ec <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 80025e2:	2300      	movs	r3, #0
 80025e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	61bb      	str	r3, [r7, #24]
 80025ea:	e003      	b.n	80025f4 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80025f0:	2300      	movs	r3, #0
 80025f2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80025f4:	e030      	b.n	8002658 <HAL_UART_Transmit+0x100>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80025f6:	697a      	ldr	r2, [r7, #20]
 80025f8:	68f8      	ldr	r0, [r7, #12]
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	9300      	str	r3, [sp, #0]
 80025fe:	0013      	movs	r3, r2
 8002600:	2200      	movs	r2, #0
 8002602:	2180      	movs	r1, #128	; 0x80
 8002604:	f000 fe08 	bl	8003218 <UART_WaitOnFlagUntilTimeout>
 8002608:	1e03      	subs	r3, r0, #0
 800260a:	d004      	beq.n	8002616 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2220      	movs	r2, #32
 8002610:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8002612:	2303      	movs	r3, #3
 8002614:	e03c      	b.n	8002690 <HAL_UART_Transmit+0x138>
      }
      if (pdata8bits == NULL)
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d10b      	bne.n	8002634 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800261c:	69bb      	ldr	r3, [r7, #24]
 800261e:	881a      	ldrh	r2, [r3, #0]
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	05d2      	lsls	r2, r2, #23
 8002626:	0dd2      	lsrs	r2, r2, #23
 8002628:	b292      	uxth	r2, r2
 800262a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800262c:	69bb      	ldr	r3, [r7, #24]
 800262e:	3302      	adds	r3, #2
 8002630:	61bb      	str	r3, [r7, #24]
 8002632:	e008      	b.n	8002646 <HAL_UART_Transmit+0xee>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	781a      	ldrb	r2, [r3, #0]
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	b292      	uxth	r2, r2
 800263e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	3301      	adds	r3, #1
 8002644:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	2252      	movs	r2, #82	; 0x52
 800264a:	5a9b      	ldrh	r3, [r3, r2]
 800264c:	b29b      	uxth	r3, r3
 800264e:	3b01      	subs	r3, #1
 8002650:	b299      	uxth	r1, r3
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2252      	movs	r2, #82	; 0x52
 8002656:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	2252      	movs	r2, #82	; 0x52
 800265c:	5a9b      	ldrh	r3, [r3, r2]
 800265e:	b29b      	uxth	r3, r3
 8002660:	2b00      	cmp	r3, #0
 8002662:	d1c8      	bne.n	80025f6 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002664:	697a      	ldr	r2, [r7, #20]
 8002666:	68f8      	ldr	r0, [r7, #12]
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	9300      	str	r3, [sp, #0]
 800266c:	0013      	movs	r3, r2
 800266e:	2200      	movs	r2, #0
 8002670:	2140      	movs	r1, #64	; 0x40
 8002672:	f000 fdd1 	bl	8003218 <UART_WaitOnFlagUntilTimeout>
 8002676:	1e03      	subs	r3, r0, #0
 8002678:	d004      	beq.n	8002684 <HAL_UART_Transmit+0x12c>
    {
      huart->gState = HAL_UART_STATE_READY;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2220      	movs	r2, #32
 800267e:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8002680:	2303      	movs	r3, #3
 8002682:	e005      	b.n	8002690 <HAL_UART_Transmit+0x138>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	2220      	movs	r2, #32
 8002688:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800268a:	2300      	movs	r3, #0
 800268c:	e000      	b.n	8002690 <HAL_UART_Transmit+0x138>
  }
  else
  {
    return HAL_BUSY;
 800268e:	2302      	movs	r3, #2
  }
}
 8002690:	0018      	movs	r0, r3
 8002692:	46bd      	mov	sp, r7
 8002694:	b008      	add	sp, #32
 8002696:	bd80      	pop	{r7, pc}

08002698 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b088      	sub	sp, #32
 800269c:	af00      	add	r7, sp, #0
 800269e:	60f8      	str	r0, [r7, #12]
 80026a0:	60b9      	str	r1, [r7, #8]
 80026a2:	1dbb      	adds	r3, r7, #6
 80026a4:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2280      	movs	r2, #128	; 0x80
 80026aa:	589b      	ldr	r3, [r3, r2]
 80026ac:	2b20      	cmp	r3, #32
 80026ae:	d145      	bne.n	800273c <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d003      	beq.n	80026be <HAL_UART_Receive_IT+0x26>
 80026b6:	1dbb      	adds	r3, r7, #6
 80026b8:	881b      	ldrh	r3, [r3, #0]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d101      	bne.n	80026c2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e03d      	b.n	800273e <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	689a      	ldr	r2, [r3, #8]
 80026c6:	2380      	movs	r3, #128	; 0x80
 80026c8:	015b      	lsls	r3, r3, #5
 80026ca:	429a      	cmp	r2, r3
 80026cc:	d109      	bne.n	80026e2 <HAL_UART_Receive_IT+0x4a>
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	691b      	ldr	r3, [r3, #16]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d105      	bne.n	80026e2 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	2201      	movs	r2, #1
 80026da:	4013      	ands	r3, r2
 80026dc:	d001      	beq.n	80026e2 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e02d      	b.n	800273e <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	2200      	movs	r2, #0
 80026e6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	685a      	ldr	r2, [r3, #4]
 80026ee:	2380      	movs	r3, #128	; 0x80
 80026f0:	041b      	lsls	r3, r3, #16
 80026f2:	4013      	ands	r3, r2
 80026f4:	d019      	beq.n	800272a <HAL_UART_Receive_IT+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80026f6:	f3ef 8310 	mrs	r3, PRIMASK
 80026fa:	613b      	str	r3, [r7, #16]
  return(result);
 80026fc:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80026fe:	61fb      	str	r3, [r7, #28]
 8002700:	2301      	movs	r3, #1
 8002702:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	f383 8810 	msr	PRIMASK, r3
}
 800270a:	46c0      	nop			; (mov r8, r8)
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	2180      	movs	r1, #128	; 0x80
 8002718:	04c9      	lsls	r1, r1, #19
 800271a:	430a      	orrs	r2, r1
 800271c:	601a      	str	r2, [r3, #0]
 800271e:	69fb      	ldr	r3, [r7, #28]
 8002720:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002722:	69bb      	ldr	r3, [r7, #24]
 8002724:	f383 8810 	msr	PRIMASK, r3
}
 8002728:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800272a:	1dbb      	adds	r3, r7, #6
 800272c:	881a      	ldrh	r2, [r3, #0]
 800272e:	68b9      	ldr	r1, [r7, #8]
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	0018      	movs	r0, r3
 8002734:	f000 fdda 	bl	80032ec <UART_Start_Receive_IT>
 8002738:	0003      	movs	r3, r0
 800273a:	e000      	b.n	800273e <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 800273c:	2302      	movs	r3, #2
  }
}
 800273e:	0018      	movs	r0, r3
 8002740:	46bd      	mov	sp, r7
 8002742:	b008      	add	sp, #32
 8002744:	bd80      	pop	{r7, pc}
	...

08002748 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002748:	b590      	push	{r4, r7, lr}
 800274a:	b0ab      	sub	sp, #172	; 0xac
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	69db      	ldr	r3, [r3, #28]
 8002756:	22a4      	movs	r2, #164	; 0xa4
 8002758:	18b9      	adds	r1, r7, r2
 800275a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	20a0      	movs	r0, #160	; 0xa0
 8002764:	1839      	adds	r1, r7, r0
 8002766:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	219c      	movs	r1, #156	; 0x9c
 8002770:	1879      	adds	r1, r7, r1
 8002772:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002774:	0011      	movs	r1, r2
 8002776:	18bb      	adds	r3, r7, r2
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a99      	ldr	r2, [pc, #612]	; (80029e0 <HAL_UART_IRQHandler+0x298>)
 800277c:	4013      	ands	r3, r2
 800277e:	2298      	movs	r2, #152	; 0x98
 8002780:	18bc      	adds	r4, r7, r2
 8002782:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8002784:	18bb      	adds	r3, r7, r2
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d114      	bne.n	80027b6 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800278c:	187b      	adds	r3, r7, r1
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	2220      	movs	r2, #32
 8002792:	4013      	ands	r3, r2
 8002794:	d00f      	beq.n	80027b6 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002796:	183b      	adds	r3, r7, r0
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	2220      	movs	r2, #32
 800279c:	4013      	ands	r3, r2
 800279e:	d00a      	beq.n	80027b6 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d100      	bne.n	80027aa <HAL_UART_IRQHandler+0x62>
 80027a8:	e286      	b.n	8002cb8 <HAL_UART_IRQHandler+0x570>
      {
        huart->RxISR(huart);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	0010      	movs	r0, r2
 80027b2:	4798      	blx	r3
      }
      return;
 80027b4:	e280      	b.n	8002cb8 <HAL_UART_IRQHandler+0x570>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80027b6:	2398      	movs	r3, #152	; 0x98
 80027b8:	18fb      	adds	r3, r7, r3
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d100      	bne.n	80027c2 <HAL_UART_IRQHandler+0x7a>
 80027c0:	e114      	b.n	80029ec <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80027c2:	239c      	movs	r3, #156	; 0x9c
 80027c4:	18fb      	adds	r3, r7, r3
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	2201      	movs	r2, #1
 80027ca:	4013      	ands	r3, r2
 80027cc:	d106      	bne.n	80027dc <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80027ce:	23a0      	movs	r3, #160	; 0xa0
 80027d0:	18fb      	adds	r3, r7, r3
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a83      	ldr	r2, [pc, #524]	; (80029e4 <HAL_UART_IRQHandler+0x29c>)
 80027d6:	4013      	ands	r3, r2
 80027d8:	d100      	bne.n	80027dc <HAL_UART_IRQHandler+0x94>
 80027da:	e107      	b.n	80029ec <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80027dc:	23a4      	movs	r3, #164	; 0xa4
 80027de:	18fb      	adds	r3, r7, r3
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	2201      	movs	r2, #1
 80027e4:	4013      	ands	r3, r2
 80027e6:	d012      	beq.n	800280e <HAL_UART_IRQHandler+0xc6>
 80027e8:	23a0      	movs	r3, #160	; 0xa0
 80027ea:	18fb      	adds	r3, r7, r3
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	2380      	movs	r3, #128	; 0x80
 80027f0:	005b      	lsls	r3, r3, #1
 80027f2:	4013      	ands	r3, r2
 80027f4:	d00b      	beq.n	800280e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	2201      	movs	r2, #1
 80027fc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2284      	movs	r2, #132	; 0x84
 8002802:	589b      	ldr	r3, [r3, r2]
 8002804:	2201      	movs	r2, #1
 8002806:	431a      	orrs	r2, r3
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2184      	movs	r1, #132	; 0x84
 800280c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800280e:	23a4      	movs	r3, #164	; 0xa4
 8002810:	18fb      	adds	r3, r7, r3
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	2202      	movs	r2, #2
 8002816:	4013      	ands	r3, r2
 8002818:	d011      	beq.n	800283e <HAL_UART_IRQHandler+0xf6>
 800281a:	239c      	movs	r3, #156	; 0x9c
 800281c:	18fb      	adds	r3, r7, r3
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	2201      	movs	r2, #1
 8002822:	4013      	ands	r3, r2
 8002824:	d00b      	beq.n	800283e <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	2202      	movs	r2, #2
 800282c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2284      	movs	r2, #132	; 0x84
 8002832:	589b      	ldr	r3, [r3, r2]
 8002834:	2204      	movs	r2, #4
 8002836:	431a      	orrs	r2, r3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2184      	movs	r1, #132	; 0x84
 800283c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800283e:	23a4      	movs	r3, #164	; 0xa4
 8002840:	18fb      	adds	r3, r7, r3
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	2204      	movs	r2, #4
 8002846:	4013      	ands	r3, r2
 8002848:	d011      	beq.n	800286e <HAL_UART_IRQHandler+0x126>
 800284a:	239c      	movs	r3, #156	; 0x9c
 800284c:	18fb      	adds	r3, r7, r3
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	2201      	movs	r2, #1
 8002852:	4013      	ands	r3, r2
 8002854:	d00b      	beq.n	800286e <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	2204      	movs	r2, #4
 800285c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2284      	movs	r2, #132	; 0x84
 8002862:	589b      	ldr	r3, [r3, r2]
 8002864:	2202      	movs	r2, #2
 8002866:	431a      	orrs	r2, r3
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2184      	movs	r1, #132	; 0x84
 800286c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800286e:	23a4      	movs	r3, #164	; 0xa4
 8002870:	18fb      	adds	r3, r7, r3
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	2208      	movs	r2, #8
 8002876:	4013      	ands	r3, r2
 8002878:	d017      	beq.n	80028aa <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800287a:	23a0      	movs	r3, #160	; 0xa0
 800287c:	18fb      	adds	r3, r7, r3
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	2220      	movs	r2, #32
 8002882:	4013      	ands	r3, r2
 8002884:	d105      	bne.n	8002892 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002886:	239c      	movs	r3, #156	; 0x9c
 8002888:	18fb      	adds	r3, r7, r3
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	2201      	movs	r2, #1
 800288e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002890:	d00b      	beq.n	80028aa <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	2208      	movs	r2, #8
 8002898:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2284      	movs	r2, #132	; 0x84
 800289e:	589b      	ldr	r3, [r3, r2]
 80028a0:	2208      	movs	r2, #8
 80028a2:	431a      	orrs	r2, r3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2184      	movs	r1, #132	; 0x84
 80028a8:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80028aa:	23a4      	movs	r3, #164	; 0xa4
 80028ac:	18fb      	adds	r3, r7, r3
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	2380      	movs	r3, #128	; 0x80
 80028b2:	011b      	lsls	r3, r3, #4
 80028b4:	4013      	ands	r3, r2
 80028b6:	d013      	beq.n	80028e0 <HAL_UART_IRQHandler+0x198>
 80028b8:	23a0      	movs	r3, #160	; 0xa0
 80028ba:	18fb      	adds	r3, r7, r3
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	2380      	movs	r3, #128	; 0x80
 80028c0:	04db      	lsls	r3, r3, #19
 80028c2:	4013      	ands	r3, r2
 80028c4:	d00c      	beq.n	80028e0 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	2280      	movs	r2, #128	; 0x80
 80028cc:	0112      	lsls	r2, r2, #4
 80028ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2284      	movs	r2, #132	; 0x84
 80028d4:	589b      	ldr	r3, [r3, r2]
 80028d6:	2220      	movs	r2, #32
 80028d8:	431a      	orrs	r2, r3
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2184      	movs	r1, #132	; 0x84
 80028de:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2284      	movs	r2, #132	; 0x84
 80028e4:	589b      	ldr	r3, [r3, r2]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d100      	bne.n	80028ec <HAL_UART_IRQHandler+0x1a4>
 80028ea:	e1e7      	b.n	8002cbc <HAL_UART_IRQHandler+0x574>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80028ec:	23a4      	movs	r3, #164	; 0xa4
 80028ee:	18fb      	adds	r3, r7, r3
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	2220      	movs	r2, #32
 80028f4:	4013      	ands	r3, r2
 80028f6:	d00e      	beq.n	8002916 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80028f8:	23a0      	movs	r3, #160	; 0xa0
 80028fa:	18fb      	adds	r3, r7, r3
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	2220      	movs	r2, #32
 8002900:	4013      	ands	r3, r2
 8002902:	d008      	beq.n	8002916 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002908:	2b00      	cmp	r3, #0
 800290a:	d004      	beq.n	8002916 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002910:	687a      	ldr	r2, [r7, #4]
 8002912:	0010      	movs	r0, r2
 8002914:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2284      	movs	r2, #132	; 0x84
 800291a:	589b      	ldr	r3, [r3, r2]
 800291c:	2194      	movs	r1, #148	; 0x94
 800291e:	187a      	adds	r2, r7, r1
 8002920:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	2240      	movs	r2, #64	; 0x40
 800292a:	4013      	ands	r3, r2
 800292c:	2b40      	cmp	r3, #64	; 0x40
 800292e:	d004      	beq.n	800293a <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002930:	187b      	adds	r3, r7, r1
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	2228      	movs	r2, #40	; 0x28
 8002936:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002938:	d047      	beq.n	80029ca <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	0018      	movs	r0, r3
 800293e:	f000 fd8b 	bl	8003458 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	2240      	movs	r2, #64	; 0x40
 800294a:	4013      	ands	r3, r2
 800294c:	2b40      	cmp	r3, #64	; 0x40
 800294e:	d137      	bne.n	80029c0 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002950:	f3ef 8310 	mrs	r3, PRIMASK
 8002954:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8002956:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002958:	2090      	movs	r0, #144	; 0x90
 800295a:	183a      	adds	r2, r7, r0
 800295c:	6013      	str	r3, [r2, #0]
 800295e:	2301      	movs	r3, #1
 8002960:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002962:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002964:	f383 8810 	msr	PRIMASK, r3
}
 8002968:	46c0      	nop			; (mov r8, r8)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	689a      	ldr	r2, [r3, #8]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	2140      	movs	r1, #64	; 0x40
 8002976:	438a      	bics	r2, r1
 8002978:	609a      	str	r2, [r3, #8]
 800297a:	183b      	adds	r3, r7, r0
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002980:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002982:	f383 8810 	msr	PRIMASK, r3
}
 8002986:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800298c:	2b00      	cmp	r3, #0
 800298e:	d012      	beq.n	80029b6 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002994:	4a14      	ldr	r2, [pc, #80]	; (80029e8 <HAL_UART_IRQHandler+0x2a0>)
 8002996:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800299c:	0018      	movs	r0, r3
 800299e:	f7fe fbf5 	bl	800118c <HAL_DMA_Abort_IT>
 80029a2:	1e03      	subs	r3, r0, #0
 80029a4:	d01a      	beq.n	80029dc <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029b0:	0018      	movs	r0, r3
 80029b2:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029b4:	e012      	b.n	80029dc <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	0018      	movs	r0, r3
 80029ba:	f000 f995 	bl	8002ce8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029be:	e00d      	b.n	80029dc <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	0018      	movs	r0, r3
 80029c4:	f000 f990 	bl	8002ce8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029c8:	e008      	b.n	80029dc <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	0018      	movs	r0, r3
 80029ce:	f000 f98b 	bl	8002ce8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2284      	movs	r2, #132	; 0x84
 80029d6:	2100      	movs	r1, #0
 80029d8:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80029da:	e16f      	b.n	8002cbc <HAL_UART_IRQHandler+0x574>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029dc:	46c0      	nop			; (mov r8, r8)
    return;
 80029de:	e16d      	b.n	8002cbc <HAL_UART_IRQHandler+0x574>
 80029e0:	0000080f 	.word	0x0000080f
 80029e4:	04000120 	.word	0x04000120
 80029e8:	08003521 	.word	0x08003521

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d000      	beq.n	80029f6 <HAL_UART_IRQHandler+0x2ae>
 80029f4:	e139      	b.n	8002c6a <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80029f6:	23a4      	movs	r3, #164	; 0xa4
 80029f8:	18fb      	adds	r3, r7, r3
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	2210      	movs	r2, #16
 80029fe:	4013      	ands	r3, r2
 8002a00:	d100      	bne.n	8002a04 <HAL_UART_IRQHandler+0x2bc>
 8002a02:	e132      	b.n	8002c6a <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002a04:	23a0      	movs	r3, #160	; 0xa0
 8002a06:	18fb      	adds	r3, r7, r3
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	2210      	movs	r2, #16
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	d100      	bne.n	8002a12 <HAL_UART_IRQHandler+0x2ca>
 8002a10:	e12b      	b.n	8002c6a <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	2210      	movs	r2, #16
 8002a18:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	2240      	movs	r2, #64	; 0x40
 8002a22:	4013      	ands	r3, r2
 8002a24:	2b40      	cmp	r3, #64	; 0x40
 8002a26:	d000      	beq.n	8002a2a <HAL_UART_IRQHandler+0x2e2>
 8002a28:	e09f      	b.n	8002b6a <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	685a      	ldr	r2, [r3, #4]
 8002a32:	217e      	movs	r1, #126	; 0x7e
 8002a34:	187b      	adds	r3, r7, r1
 8002a36:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8002a38:	187b      	adds	r3, r7, r1
 8002a3a:	881b      	ldrh	r3, [r3, #0]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d100      	bne.n	8002a42 <HAL_UART_IRQHandler+0x2fa>
 8002a40:	e13e      	b.n	8002cc0 <HAL_UART_IRQHandler+0x578>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2258      	movs	r2, #88	; 0x58
 8002a46:	5a9b      	ldrh	r3, [r3, r2]
 8002a48:	187a      	adds	r2, r7, r1
 8002a4a:	8812      	ldrh	r2, [r2, #0]
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d300      	bcc.n	8002a52 <HAL_UART_IRQHandler+0x30a>
 8002a50:	e136      	b.n	8002cc0 <HAL_UART_IRQHandler+0x578>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	187a      	adds	r2, r7, r1
 8002a56:	215a      	movs	r1, #90	; 0x5a
 8002a58:	8812      	ldrh	r2, [r2, #0]
 8002a5a:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a60:	699b      	ldr	r3, [r3, #24]
 8002a62:	2b20      	cmp	r3, #32
 8002a64:	d06f      	beq.n	8002b46 <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a66:	f3ef 8310 	mrs	r3, PRIMASK
 8002a6a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8002a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002a6e:	67bb      	str	r3, [r7, #120]	; 0x78
 8002a70:	2301      	movs	r3, #1
 8002a72:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a76:	f383 8810 	msr	PRIMASK, r3
}
 8002a7a:	46c0      	nop			; (mov r8, r8)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4992      	ldr	r1, [pc, #584]	; (8002cd0 <HAL_UART_IRQHandler+0x588>)
 8002a88:	400a      	ands	r2, r1
 8002a8a:	601a      	str	r2, [r3, #0]
 8002a8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a8e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a92:	f383 8810 	msr	PRIMASK, r3
}
 8002a96:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a98:	f3ef 8310 	mrs	r3, PRIMASK
 8002a9c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8002a9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002aa0:	677b      	str	r3, [r7, #116]	; 0x74
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002aa6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002aa8:	f383 8810 	msr	PRIMASK, r3
}
 8002aac:	46c0      	nop			; (mov r8, r8)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	689a      	ldr	r2, [r3, #8]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	2101      	movs	r1, #1
 8002aba:	438a      	bics	r2, r1
 8002abc:	609a      	str	r2, [r3, #8]
 8002abe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ac0:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ac2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ac4:	f383 8810 	msr	PRIMASK, r3
}
 8002ac8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002aca:	f3ef 8310 	mrs	r3, PRIMASK
 8002ace:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8002ad0:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ad2:	673b      	str	r3, [r7, #112]	; 0x70
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ad8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ada:	f383 8810 	msr	PRIMASK, r3
}
 8002ade:	46c0      	nop			; (mov r8, r8)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	689a      	ldr	r2, [r3, #8]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	2140      	movs	r1, #64	; 0x40
 8002aec:	438a      	bics	r2, r1
 8002aee:	609a      	str	r2, [r3, #8]
 8002af0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002af2:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002af4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002af6:	f383 8810 	msr	PRIMASK, r3
}
 8002afa:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2280      	movs	r2, #128	; 0x80
 8002b00:	2120      	movs	r1, #32
 8002b02:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2200      	movs	r2, #0
 8002b08:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b0a:	f3ef 8310 	mrs	r3, PRIMASK
 8002b0e:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8002b10:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b12:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002b14:	2301      	movs	r3, #1
 8002b16:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b18:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b1a:	f383 8810 	msr	PRIMASK, r3
}
 8002b1e:	46c0      	nop			; (mov r8, r8)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	2110      	movs	r1, #16
 8002b2c:	438a      	bics	r2, r1
 8002b2e:	601a      	str	r2, [r3, #0]
 8002b30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b32:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b36:	f383 8810 	msr	PRIMASK, r3
}
 8002b3a:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b40:	0018      	movs	r0, r3
 8002b42:	f7fe faeb 	bl	800111c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2202      	movs	r2, #2
 8002b4a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2258      	movs	r2, #88	; 0x58
 8002b50:	5a9a      	ldrh	r2, [r3, r2]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	215a      	movs	r1, #90	; 0x5a
 8002b56:	5a5b      	ldrh	r3, [r3, r1]
 8002b58:	b29b      	uxth	r3, r3
 8002b5a:	1ad3      	subs	r3, r2, r3
 8002b5c:	b29a      	uxth	r2, r3
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	0011      	movs	r1, r2
 8002b62:	0018      	movs	r0, r3
 8002b64:	f000 f8c8 	bl	8002cf8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002b68:	e0aa      	b.n	8002cc0 <HAL_UART_IRQHandler+0x578>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2258      	movs	r2, #88	; 0x58
 8002b6e:	5a99      	ldrh	r1, [r3, r2]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	225a      	movs	r2, #90	; 0x5a
 8002b74:	5a9b      	ldrh	r3, [r3, r2]
 8002b76:	b29a      	uxth	r2, r3
 8002b78:	208e      	movs	r0, #142	; 0x8e
 8002b7a:	183b      	adds	r3, r7, r0
 8002b7c:	1a8a      	subs	r2, r1, r2
 8002b7e:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	225a      	movs	r2, #90	; 0x5a
 8002b84:	5a9b      	ldrh	r3, [r3, r2]
 8002b86:	b29b      	uxth	r3, r3
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d100      	bne.n	8002b8e <HAL_UART_IRQHandler+0x446>
 8002b8c:	e09a      	b.n	8002cc4 <HAL_UART_IRQHandler+0x57c>
          && (nb_rx_data > 0U))
 8002b8e:	183b      	adds	r3, r7, r0
 8002b90:	881b      	ldrh	r3, [r3, #0]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d100      	bne.n	8002b98 <HAL_UART_IRQHandler+0x450>
 8002b96:	e095      	b.n	8002cc4 <HAL_UART_IRQHandler+0x57c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b98:	f3ef 8310 	mrs	r3, PRIMASK
 8002b9c:	60fb      	str	r3, [r7, #12]
  return(result);
 8002b9e:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ba0:	2488      	movs	r4, #136	; 0x88
 8002ba2:	193a      	adds	r2, r7, r4
 8002ba4:	6013      	str	r3, [r2, #0]
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	f383 8810 	msr	PRIMASK, r3
}
 8002bb0:	46c0      	nop			; (mov r8, r8)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4945      	ldr	r1, [pc, #276]	; (8002cd4 <HAL_UART_IRQHandler+0x58c>)
 8002bbe:	400a      	ands	r2, r1
 8002bc0:	601a      	str	r2, [r3, #0]
 8002bc2:	193b      	adds	r3, r7, r4
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	f383 8810 	msr	PRIMASK, r3
}
 8002bce:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002bd0:	f3ef 8310 	mrs	r3, PRIMASK
 8002bd4:	61bb      	str	r3, [r7, #24]
  return(result);
 8002bd6:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bd8:	2484      	movs	r4, #132	; 0x84
 8002bda:	193a      	adds	r2, r7, r4
 8002bdc:	6013      	str	r3, [r2, #0]
 8002bde:	2301      	movs	r3, #1
 8002be0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	f383 8810 	msr	PRIMASK, r3
}
 8002be8:	46c0      	nop			; (mov r8, r8)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	689a      	ldr	r2, [r3, #8]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	2101      	movs	r1, #1
 8002bf6:	438a      	bics	r2, r1
 8002bf8:	609a      	str	r2, [r3, #8]
 8002bfa:	193b      	adds	r3, r7, r4
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c00:	6a3b      	ldr	r3, [r7, #32]
 8002c02:	f383 8810 	msr	PRIMASK, r3
}
 8002c06:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2280      	movs	r2, #128	; 0x80
 8002c0c:	2120      	movs	r1, #32
 8002c0e:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2200      	movs	r2, #0
 8002c14:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c1c:	f3ef 8310 	mrs	r3, PRIMASK
 8002c20:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c24:	2480      	movs	r4, #128	; 0x80
 8002c26:	193a      	adds	r2, r7, r4
 8002c28:	6013      	str	r3, [r2, #0]
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c30:	f383 8810 	msr	PRIMASK, r3
}
 8002c34:	46c0      	nop			; (mov r8, r8)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	2110      	movs	r1, #16
 8002c42:	438a      	bics	r2, r1
 8002c44:	601a      	str	r2, [r3, #0]
 8002c46:	193b      	adds	r3, r7, r4
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c4e:	f383 8810 	msr	PRIMASK, r3
}
 8002c52:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2202      	movs	r2, #2
 8002c58:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002c5a:	183b      	adds	r3, r7, r0
 8002c5c:	881a      	ldrh	r2, [r3, #0]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	0011      	movs	r1, r2
 8002c62:	0018      	movs	r0, r3
 8002c64:	f000 f848 	bl	8002cf8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002c68:	e02c      	b.n	8002cc4 <HAL_UART_IRQHandler+0x57c>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002c6a:	23a4      	movs	r3, #164	; 0xa4
 8002c6c:	18fb      	adds	r3, r7, r3
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	2280      	movs	r2, #128	; 0x80
 8002c72:	4013      	ands	r3, r2
 8002c74:	d00f      	beq.n	8002c96 <HAL_UART_IRQHandler+0x54e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002c76:	23a0      	movs	r3, #160	; 0xa0
 8002c78:	18fb      	adds	r3, r7, r3
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	2280      	movs	r2, #128	; 0x80
 8002c7e:	4013      	ands	r3, r2
 8002c80:	d009      	beq.n	8002c96 <HAL_UART_IRQHandler+0x54e>
  {
    if (huart->TxISR != NULL)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d01e      	beq.n	8002cc8 <HAL_UART_IRQHandler+0x580>
    {
      huart->TxISR(huart);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c8e:	687a      	ldr	r2, [r7, #4]
 8002c90:	0010      	movs	r0, r2
 8002c92:	4798      	blx	r3
    }
    return;
 8002c94:	e018      	b.n	8002cc8 <HAL_UART_IRQHandler+0x580>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002c96:	23a4      	movs	r3, #164	; 0xa4
 8002c98:	18fb      	adds	r3, r7, r3
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	2240      	movs	r2, #64	; 0x40
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	d013      	beq.n	8002cca <HAL_UART_IRQHandler+0x582>
 8002ca2:	23a0      	movs	r3, #160	; 0xa0
 8002ca4:	18fb      	adds	r3, r7, r3
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	2240      	movs	r2, #64	; 0x40
 8002caa:	4013      	ands	r3, r2
 8002cac:	d00d      	beq.n	8002cca <HAL_UART_IRQHandler+0x582>
  {
    UART_EndTransmit_IT(huart);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	0018      	movs	r0, r3
 8002cb2:	f000 fc4c 	bl	800354e <UART_EndTransmit_IT>
    return;
 8002cb6:	e008      	b.n	8002cca <HAL_UART_IRQHandler+0x582>
      return;
 8002cb8:	46c0      	nop			; (mov r8, r8)
 8002cba:	e006      	b.n	8002cca <HAL_UART_IRQHandler+0x582>
    return;
 8002cbc:	46c0      	nop			; (mov r8, r8)
 8002cbe:	e004      	b.n	8002cca <HAL_UART_IRQHandler+0x582>
      return;
 8002cc0:	46c0      	nop			; (mov r8, r8)
 8002cc2:	e002      	b.n	8002cca <HAL_UART_IRQHandler+0x582>
      return;
 8002cc4:	46c0      	nop			; (mov r8, r8)
 8002cc6:	e000      	b.n	8002cca <HAL_UART_IRQHandler+0x582>
    return;
 8002cc8:	46c0      	nop			; (mov r8, r8)
  }

}
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	b02b      	add	sp, #172	; 0xac
 8002cce:	bd90      	pop	{r4, r7, pc}
 8002cd0:	fffffeff 	.word	0xfffffeff
 8002cd4:	fffffedf 	.word	0xfffffedf

08002cd8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b082      	sub	sp, #8
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002ce0:	46c0      	nop			; (mov r8, r8)
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	b002      	add	sp, #8
 8002ce6:	bd80      	pop	{r7, pc}

08002ce8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b082      	sub	sp, #8
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002cf0:	46c0      	nop			; (mov r8, r8)
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	b002      	add	sp, #8
 8002cf6:	bd80      	pop	{r7, pc}

08002cf8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b082      	sub	sp, #8
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
 8002d00:	000a      	movs	r2, r1
 8002d02:	1cbb      	adds	r3, r7, #2
 8002d04:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002d06:	46c0      	nop			; (mov r8, r8)
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	b002      	add	sp, #8
 8002d0c:	bd80      	pop	{r7, pc}
	...

08002d10 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b088      	sub	sp, #32
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002d18:	231e      	movs	r3, #30
 8002d1a:	18fb      	adds	r3, r7, r3
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	689a      	ldr	r2, [r3, #8]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	691b      	ldr	r3, [r3, #16]
 8002d28:	431a      	orrs	r2, r3
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	695b      	ldr	r3, [r3, #20]
 8002d2e:	431a      	orrs	r2, r3
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	69db      	ldr	r3, [r3, #28]
 8002d34:	4313      	orrs	r3, r2
 8002d36:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a83      	ldr	r2, [pc, #524]	; (8002f4c <UART_SetConfig+0x23c>)
 8002d40:	4013      	ands	r3, r2
 8002d42:	0019      	movs	r1, r3
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	697a      	ldr	r2, [r7, #20]
 8002d4a:	430a      	orrs	r2, r1
 8002d4c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	4a7e      	ldr	r2, [pc, #504]	; (8002f50 <UART_SetConfig+0x240>)
 8002d56:	4013      	ands	r3, r2
 8002d58:	0019      	movs	r1, r3
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	68da      	ldr	r2, [r3, #12]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	430a      	orrs	r2, r1
 8002d64:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	699b      	ldr	r3, [r3, #24]
 8002d6a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6a1b      	ldr	r3, [r3, #32]
 8002d70:	697a      	ldr	r2, [r7, #20]
 8002d72:	4313      	orrs	r3, r2
 8002d74:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	4a75      	ldr	r2, [pc, #468]	; (8002f54 <UART_SetConfig+0x244>)
 8002d7e:	4013      	ands	r3, r2
 8002d80:	0019      	movs	r1, r3
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	697a      	ldr	r2, [r7, #20]
 8002d88:	430a      	orrs	r2, r1
 8002d8a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002d8c:	4b72      	ldr	r3, [pc, #456]	; (8002f58 <UART_SetConfig+0x248>)
 8002d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d90:	2203      	movs	r2, #3
 8002d92:	4013      	ands	r3, r2
 8002d94:	2b03      	cmp	r3, #3
 8002d96:	d00d      	beq.n	8002db4 <UART_SetConfig+0xa4>
 8002d98:	d81b      	bhi.n	8002dd2 <UART_SetConfig+0xc2>
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	d014      	beq.n	8002dc8 <UART_SetConfig+0xb8>
 8002d9e:	d818      	bhi.n	8002dd2 <UART_SetConfig+0xc2>
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d002      	beq.n	8002daa <UART_SetConfig+0x9a>
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	d00a      	beq.n	8002dbe <UART_SetConfig+0xae>
 8002da8:	e013      	b.n	8002dd2 <UART_SetConfig+0xc2>
 8002daa:	231f      	movs	r3, #31
 8002dac:	18fb      	adds	r3, r7, r3
 8002dae:	2200      	movs	r2, #0
 8002db0:	701a      	strb	r2, [r3, #0]
 8002db2:	e012      	b.n	8002dda <UART_SetConfig+0xca>
 8002db4:	231f      	movs	r3, #31
 8002db6:	18fb      	adds	r3, r7, r3
 8002db8:	2202      	movs	r2, #2
 8002dba:	701a      	strb	r2, [r3, #0]
 8002dbc:	e00d      	b.n	8002dda <UART_SetConfig+0xca>
 8002dbe:	231f      	movs	r3, #31
 8002dc0:	18fb      	adds	r3, r7, r3
 8002dc2:	2204      	movs	r2, #4
 8002dc4:	701a      	strb	r2, [r3, #0]
 8002dc6:	e008      	b.n	8002dda <UART_SetConfig+0xca>
 8002dc8:	231f      	movs	r3, #31
 8002dca:	18fb      	adds	r3, r7, r3
 8002dcc:	2208      	movs	r2, #8
 8002dce:	701a      	strb	r2, [r3, #0]
 8002dd0:	e003      	b.n	8002dda <UART_SetConfig+0xca>
 8002dd2:	231f      	movs	r3, #31
 8002dd4:	18fb      	adds	r3, r7, r3
 8002dd6:	2210      	movs	r2, #16
 8002dd8:	701a      	strb	r2, [r3, #0]
 8002dda:	46c0      	nop			; (mov r8, r8)

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	69da      	ldr	r2, [r3, #28]
 8002de0:	2380      	movs	r3, #128	; 0x80
 8002de2:	021b      	lsls	r3, r3, #8
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d15c      	bne.n	8002ea2 <UART_SetConfig+0x192>
  {
    switch (clocksource)
 8002de8:	231f      	movs	r3, #31
 8002dea:	18fb      	adds	r3, r7, r3
 8002dec:	781b      	ldrb	r3, [r3, #0]
 8002dee:	2b08      	cmp	r3, #8
 8002df0:	d015      	beq.n	8002e1e <UART_SetConfig+0x10e>
 8002df2:	dc18      	bgt.n	8002e26 <UART_SetConfig+0x116>
 8002df4:	2b04      	cmp	r3, #4
 8002df6:	d00d      	beq.n	8002e14 <UART_SetConfig+0x104>
 8002df8:	dc15      	bgt.n	8002e26 <UART_SetConfig+0x116>
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d002      	beq.n	8002e04 <UART_SetConfig+0xf4>
 8002dfe:	2b02      	cmp	r3, #2
 8002e00:	d005      	beq.n	8002e0e <UART_SetConfig+0xfe>
 8002e02:	e010      	b.n	8002e26 <UART_SetConfig+0x116>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e04:	f7fe fffa 	bl	8001dfc <HAL_RCC_GetPCLK1Freq>
 8002e08:	0003      	movs	r3, r0
 8002e0a:	61bb      	str	r3, [r7, #24]
        break;
 8002e0c:	e012      	b.n	8002e34 <UART_SetConfig+0x124>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002e0e:	4b53      	ldr	r3, [pc, #332]	; (8002f5c <UART_SetConfig+0x24c>)
 8002e10:	61bb      	str	r3, [r7, #24]
        break;
 8002e12:	e00f      	b.n	8002e34 <UART_SetConfig+0x124>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e14:	f7fe ff92 	bl	8001d3c <HAL_RCC_GetSysClockFreq>
 8002e18:	0003      	movs	r3, r0
 8002e1a:	61bb      	str	r3, [r7, #24]
        break;
 8002e1c:	e00a      	b.n	8002e34 <UART_SetConfig+0x124>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e1e:	2380      	movs	r3, #128	; 0x80
 8002e20:	021b      	lsls	r3, r3, #8
 8002e22:	61bb      	str	r3, [r7, #24]
        break;
 8002e24:	e006      	b.n	8002e34 <UART_SetConfig+0x124>
      default:
        pclk = 0U;
 8002e26:	2300      	movs	r3, #0
 8002e28:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002e2a:	231e      	movs	r3, #30
 8002e2c:	18fb      	adds	r3, r7, r3
 8002e2e:	2201      	movs	r2, #1
 8002e30:	701a      	strb	r2, [r3, #0]
        break;
 8002e32:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002e34:	69bb      	ldr	r3, [r7, #24]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d100      	bne.n	8002e3c <UART_SetConfig+0x12c>
 8002e3a:	e07a      	b.n	8002f32 <UART_SetConfig+0x222>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002e3c:	69bb      	ldr	r3, [r7, #24]
 8002e3e:	005a      	lsls	r2, r3, #1
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	085b      	lsrs	r3, r3, #1
 8002e46:	18d2      	adds	r2, r2, r3
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	0019      	movs	r1, r3
 8002e4e:	0010      	movs	r0, r2
 8002e50:	f7fd f95a 	bl	8000108 <__udivsi3>
 8002e54:	0003      	movs	r3, r0
 8002e56:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	2b0f      	cmp	r3, #15
 8002e5c:	d91c      	bls.n	8002e98 <UART_SetConfig+0x188>
 8002e5e:	693a      	ldr	r2, [r7, #16]
 8002e60:	2380      	movs	r3, #128	; 0x80
 8002e62:	025b      	lsls	r3, r3, #9
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d217      	bcs.n	8002e98 <UART_SetConfig+0x188>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	b29a      	uxth	r2, r3
 8002e6c:	200e      	movs	r0, #14
 8002e6e:	183b      	adds	r3, r7, r0
 8002e70:	210f      	movs	r1, #15
 8002e72:	438a      	bics	r2, r1
 8002e74:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	085b      	lsrs	r3, r3, #1
 8002e7a:	b29b      	uxth	r3, r3
 8002e7c:	2207      	movs	r2, #7
 8002e7e:	4013      	ands	r3, r2
 8002e80:	b299      	uxth	r1, r3
 8002e82:	183b      	adds	r3, r7, r0
 8002e84:	183a      	adds	r2, r7, r0
 8002e86:	8812      	ldrh	r2, [r2, #0]
 8002e88:	430a      	orrs	r2, r1
 8002e8a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	183a      	adds	r2, r7, r0
 8002e92:	8812      	ldrh	r2, [r2, #0]
 8002e94:	60da      	str	r2, [r3, #12]
 8002e96:	e04c      	b.n	8002f32 <UART_SetConfig+0x222>
      }
      else
      {
        ret = HAL_ERROR;
 8002e98:	231e      	movs	r3, #30
 8002e9a:	18fb      	adds	r3, r7, r3
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	701a      	strb	r2, [r3, #0]
 8002ea0:	e047      	b.n	8002f32 <UART_SetConfig+0x222>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002ea2:	231f      	movs	r3, #31
 8002ea4:	18fb      	adds	r3, r7, r3
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	2b08      	cmp	r3, #8
 8002eaa:	d015      	beq.n	8002ed8 <UART_SetConfig+0x1c8>
 8002eac:	dc18      	bgt.n	8002ee0 <UART_SetConfig+0x1d0>
 8002eae:	2b04      	cmp	r3, #4
 8002eb0:	d00d      	beq.n	8002ece <UART_SetConfig+0x1be>
 8002eb2:	dc15      	bgt.n	8002ee0 <UART_SetConfig+0x1d0>
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d002      	beq.n	8002ebe <UART_SetConfig+0x1ae>
 8002eb8:	2b02      	cmp	r3, #2
 8002eba:	d005      	beq.n	8002ec8 <UART_SetConfig+0x1b8>
 8002ebc:	e010      	b.n	8002ee0 <UART_SetConfig+0x1d0>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ebe:	f7fe ff9d 	bl	8001dfc <HAL_RCC_GetPCLK1Freq>
 8002ec2:	0003      	movs	r3, r0
 8002ec4:	61bb      	str	r3, [r7, #24]
        break;
 8002ec6:	e012      	b.n	8002eee <UART_SetConfig+0x1de>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002ec8:	4b24      	ldr	r3, [pc, #144]	; (8002f5c <UART_SetConfig+0x24c>)
 8002eca:	61bb      	str	r3, [r7, #24]
        break;
 8002ecc:	e00f      	b.n	8002eee <UART_SetConfig+0x1de>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002ece:	f7fe ff35 	bl	8001d3c <HAL_RCC_GetSysClockFreq>
 8002ed2:	0003      	movs	r3, r0
 8002ed4:	61bb      	str	r3, [r7, #24]
        break;
 8002ed6:	e00a      	b.n	8002eee <UART_SetConfig+0x1de>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ed8:	2380      	movs	r3, #128	; 0x80
 8002eda:	021b      	lsls	r3, r3, #8
 8002edc:	61bb      	str	r3, [r7, #24]
        break;
 8002ede:	e006      	b.n	8002eee <UART_SetConfig+0x1de>
      default:
        pclk = 0U;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002ee4:	231e      	movs	r3, #30
 8002ee6:	18fb      	adds	r3, r7, r3
 8002ee8:	2201      	movs	r2, #1
 8002eea:	701a      	strb	r2, [r3, #0]
        break;
 8002eec:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002eee:	69bb      	ldr	r3, [r7, #24]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d01e      	beq.n	8002f32 <UART_SetConfig+0x222>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	085a      	lsrs	r2, r3, #1
 8002efa:	69bb      	ldr	r3, [r7, #24]
 8002efc:	18d2      	adds	r2, r2, r3
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	0019      	movs	r1, r3
 8002f04:	0010      	movs	r0, r2
 8002f06:	f7fd f8ff 	bl	8000108 <__udivsi3>
 8002f0a:	0003      	movs	r3, r0
 8002f0c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	2b0f      	cmp	r3, #15
 8002f12:	d90a      	bls.n	8002f2a <UART_SetConfig+0x21a>
 8002f14:	693a      	ldr	r2, [r7, #16]
 8002f16:	2380      	movs	r3, #128	; 0x80
 8002f18:	025b      	lsls	r3, r3, #9
 8002f1a:	429a      	cmp	r2, r3
 8002f1c:	d205      	bcs.n	8002f2a <UART_SetConfig+0x21a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	b29a      	uxth	r2, r3
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	60da      	str	r2, [r3, #12]
 8002f28:	e003      	b.n	8002f32 <UART_SetConfig+0x222>
      }
      else
      {
        ret = HAL_ERROR;
 8002f2a:	231e      	movs	r3, #30
 8002f2c:	18fb      	adds	r3, r7, r3
 8002f2e:	2201      	movs	r2, #1
 8002f30:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2200      	movs	r2, #0
 8002f36:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002f3e:	231e      	movs	r3, #30
 8002f40:	18fb      	adds	r3, r7, r3
 8002f42:	781b      	ldrb	r3, [r3, #0]
}
 8002f44:	0018      	movs	r0, r3
 8002f46:	46bd      	mov	sp, r7
 8002f48:	b008      	add	sp, #32
 8002f4a:	bd80      	pop	{r7, pc}
 8002f4c:	ffff69f3 	.word	0xffff69f3
 8002f50:	ffffcfff 	.word	0xffffcfff
 8002f54:	fffff4ff 	.word	0xfffff4ff
 8002f58:	40021000 	.word	0x40021000
 8002f5c:	007a1200 	.word	0x007a1200

08002f60 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b082      	sub	sp, #8
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	4013      	ands	r3, r2
 8002f70:	d00b      	beq.n	8002f8a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	4a4a      	ldr	r2, [pc, #296]	; (80030a4 <UART_AdvFeatureConfig+0x144>)
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	0019      	movs	r1, r3
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	430a      	orrs	r2, r1
 8002f88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f8e:	2202      	movs	r2, #2
 8002f90:	4013      	ands	r3, r2
 8002f92:	d00b      	beq.n	8002fac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	4a43      	ldr	r2, [pc, #268]	; (80030a8 <UART_AdvFeatureConfig+0x148>)
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	0019      	movs	r1, r3
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	430a      	orrs	r2, r1
 8002faa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb0:	2204      	movs	r2, #4
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	d00b      	beq.n	8002fce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	4a3b      	ldr	r2, [pc, #236]	; (80030ac <UART_AdvFeatureConfig+0x14c>)
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	0019      	movs	r1, r3
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	430a      	orrs	r2, r1
 8002fcc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd2:	2208      	movs	r2, #8
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	d00b      	beq.n	8002ff0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	4a34      	ldr	r2, [pc, #208]	; (80030b0 <UART_AdvFeatureConfig+0x150>)
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	0019      	movs	r1, r3
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	430a      	orrs	r2, r1
 8002fee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff4:	2210      	movs	r2, #16
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	d00b      	beq.n	8003012 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	4a2c      	ldr	r2, [pc, #176]	; (80030b4 <UART_AdvFeatureConfig+0x154>)
 8003002:	4013      	ands	r3, r2
 8003004:	0019      	movs	r1, r3
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	430a      	orrs	r2, r1
 8003010:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003016:	2220      	movs	r2, #32
 8003018:	4013      	ands	r3, r2
 800301a:	d00b      	beq.n	8003034 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	4a25      	ldr	r2, [pc, #148]	; (80030b8 <UART_AdvFeatureConfig+0x158>)
 8003024:	4013      	ands	r3, r2
 8003026:	0019      	movs	r1, r3
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	430a      	orrs	r2, r1
 8003032:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003038:	2240      	movs	r2, #64	; 0x40
 800303a:	4013      	ands	r3, r2
 800303c:	d01d      	beq.n	800307a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	4a1d      	ldr	r2, [pc, #116]	; (80030bc <UART_AdvFeatureConfig+0x15c>)
 8003046:	4013      	ands	r3, r2
 8003048:	0019      	movs	r1, r3
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	430a      	orrs	r2, r1
 8003054:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800305a:	2380      	movs	r3, #128	; 0x80
 800305c:	035b      	lsls	r3, r3, #13
 800305e:	429a      	cmp	r2, r3
 8003060:	d10b      	bne.n	800307a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	4a15      	ldr	r2, [pc, #84]	; (80030c0 <UART_AdvFeatureConfig+0x160>)
 800306a:	4013      	ands	r3, r2
 800306c:	0019      	movs	r1, r3
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	430a      	orrs	r2, r1
 8003078:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800307e:	2280      	movs	r2, #128	; 0x80
 8003080:	4013      	ands	r3, r2
 8003082:	d00b      	beq.n	800309c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	4a0e      	ldr	r2, [pc, #56]	; (80030c4 <UART_AdvFeatureConfig+0x164>)
 800308c:	4013      	ands	r3, r2
 800308e:	0019      	movs	r1, r3
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	430a      	orrs	r2, r1
 800309a:	605a      	str	r2, [r3, #4]
  }
}
 800309c:	46c0      	nop			; (mov r8, r8)
 800309e:	46bd      	mov	sp, r7
 80030a0:	b002      	add	sp, #8
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	fffdffff 	.word	0xfffdffff
 80030a8:	fffeffff 	.word	0xfffeffff
 80030ac:	fffbffff 	.word	0xfffbffff
 80030b0:	ffff7fff 	.word	0xffff7fff
 80030b4:	ffffefff 	.word	0xffffefff
 80030b8:	ffffdfff 	.word	0xffffdfff
 80030bc:	ffefffff 	.word	0xffefffff
 80030c0:	ff9fffff 	.word	0xff9fffff
 80030c4:	fff7ffff 	.word	0xfff7ffff

080030c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b092      	sub	sp, #72	; 0x48
 80030cc:	af02      	add	r7, sp, #8
 80030ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2284      	movs	r2, #132	; 0x84
 80030d4:	2100      	movs	r1, #0
 80030d6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80030d8:	f7fd ff14 	bl	8000f04 <HAL_GetTick>
 80030dc:	0003      	movs	r3, r0
 80030de:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	2208      	movs	r2, #8
 80030e8:	4013      	ands	r3, r2
 80030ea:	2b08      	cmp	r3, #8
 80030ec:	d12c      	bne.n	8003148 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80030ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030f0:	2280      	movs	r2, #128	; 0x80
 80030f2:	0391      	lsls	r1, r2, #14
 80030f4:	6878      	ldr	r0, [r7, #4]
 80030f6:	4a46      	ldr	r2, [pc, #280]	; (8003210 <UART_CheckIdleState+0x148>)
 80030f8:	9200      	str	r2, [sp, #0]
 80030fa:	2200      	movs	r2, #0
 80030fc:	f000 f88c 	bl	8003218 <UART_WaitOnFlagUntilTimeout>
 8003100:	1e03      	subs	r3, r0, #0
 8003102:	d021      	beq.n	8003148 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003104:	f3ef 8310 	mrs	r3, PRIMASK
 8003108:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800310a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800310c:	63bb      	str	r3, [r7, #56]	; 0x38
 800310e:	2301      	movs	r3, #1
 8003110:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003114:	f383 8810 	msr	PRIMASK, r3
}
 8003118:	46c0      	nop			; (mov r8, r8)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	2180      	movs	r1, #128	; 0x80
 8003126:	438a      	bics	r2, r1
 8003128:	601a      	str	r2, [r3, #0]
 800312a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800312c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800312e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003130:	f383 8810 	msr	PRIMASK, r3
}
 8003134:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2220      	movs	r2, #32
 800313a:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2278      	movs	r2, #120	; 0x78
 8003140:	2100      	movs	r1, #0
 8003142:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003144:	2303      	movs	r3, #3
 8003146:	e05f      	b.n	8003208 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	2204      	movs	r2, #4
 8003150:	4013      	ands	r3, r2
 8003152:	2b04      	cmp	r3, #4
 8003154:	d146      	bne.n	80031e4 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003156:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003158:	2280      	movs	r2, #128	; 0x80
 800315a:	03d1      	lsls	r1, r2, #15
 800315c:	6878      	ldr	r0, [r7, #4]
 800315e:	4a2c      	ldr	r2, [pc, #176]	; (8003210 <UART_CheckIdleState+0x148>)
 8003160:	9200      	str	r2, [sp, #0]
 8003162:	2200      	movs	r2, #0
 8003164:	f000 f858 	bl	8003218 <UART_WaitOnFlagUntilTimeout>
 8003168:	1e03      	subs	r3, r0, #0
 800316a:	d03b      	beq.n	80031e4 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800316c:	f3ef 8310 	mrs	r3, PRIMASK
 8003170:	60fb      	str	r3, [r7, #12]
  return(result);
 8003172:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003174:	637b      	str	r3, [r7, #52]	; 0x34
 8003176:	2301      	movs	r3, #1
 8003178:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	f383 8810 	msr	PRIMASK, r3
}
 8003180:	46c0      	nop			; (mov r8, r8)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4921      	ldr	r1, [pc, #132]	; (8003214 <UART_CheckIdleState+0x14c>)
 800318e:	400a      	ands	r2, r1
 8003190:	601a      	str	r2, [r3, #0]
 8003192:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003194:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	f383 8810 	msr	PRIMASK, r3
}
 800319c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800319e:	f3ef 8310 	mrs	r3, PRIMASK
 80031a2:	61bb      	str	r3, [r7, #24]
  return(result);
 80031a4:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031a6:	633b      	str	r3, [r7, #48]	; 0x30
 80031a8:	2301      	movs	r3, #1
 80031aa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031ac:	69fb      	ldr	r3, [r7, #28]
 80031ae:	f383 8810 	msr	PRIMASK, r3
}
 80031b2:	46c0      	nop			; (mov r8, r8)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	689a      	ldr	r2, [r3, #8]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	2101      	movs	r1, #1
 80031c0:	438a      	bics	r2, r1
 80031c2:	609a      	str	r2, [r3, #8]
 80031c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031c6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031c8:	6a3b      	ldr	r3, [r7, #32]
 80031ca:	f383 8810 	msr	PRIMASK, r3
}
 80031ce:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2280      	movs	r2, #128	; 0x80
 80031d4:	2120      	movs	r1, #32
 80031d6:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2278      	movs	r2, #120	; 0x78
 80031dc:	2100      	movs	r1, #0
 80031de:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80031e0:	2303      	movs	r3, #3
 80031e2:	e011      	b.n	8003208 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2220      	movs	r2, #32
 80031e8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2280      	movs	r2, #128	; 0x80
 80031ee:	2120      	movs	r1, #32
 80031f0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2200      	movs	r2, #0
 80031f6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2200      	movs	r2, #0
 80031fc:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2278      	movs	r2, #120	; 0x78
 8003202:	2100      	movs	r1, #0
 8003204:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003206:	2300      	movs	r3, #0
}
 8003208:	0018      	movs	r0, r3
 800320a:	46bd      	mov	sp, r7
 800320c:	b010      	add	sp, #64	; 0x40
 800320e:	bd80      	pop	{r7, pc}
 8003210:	01ffffff 	.word	0x01ffffff
 8003214:	fffffedf 	.word	0xfffffedf

08003218 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b084      	sub	sp, #16
 800321c:	af00      	add	r7, sp, #0
 800321e:	60f8      	str	r0, [r7, #12]
 8003220:	60b9      	str	r1, [r7, #8]
 8003222:	603b      	str	r3, [r7, #0]
 8003224:	1dfb      	adds	r3, r7, #7
 8003226:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003228:	e04b      	b.n	80032c2 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800322a:	69bb      	ldr	r3, [r7, #24]
 800322c:	3301      	adds	r3, #1
 800322e:	d048      	beq.n	80032c2 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003230:	f7fd fe68 	bl	8000f04 <HAL_GetTick>
 8003234:	0002      	movs	r2, r0
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	1ad3      	subs	r3, r2, r3
 800323a:	69ba      	ldr	r2, [r7, #24]
 800323c:	429a      	cmp	r2, r3
 800323e:	d302      	bcc.n	8003246 <UART_WaitOnFlagUntilTimeout+0x2e>
 8003240:	69bb      	ldr	r3, [r7, #24]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d101      	bne.n	800324a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003246:	2303      	movs	r3, #3
 8003248:	e04b      	b.n	80032e2 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	2204      	movs	r2, #4
 8003252:	4013      	ands	r3, r2
 8003254:	d035      	beq.n	80032c2 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	69db      	ldr	r3, [r3, #28]
 800325c:	2208      	movs	r2, #8
 800325e:	4013      	ands	r3, r2
 8003260:	2b08      	cmp	r3, #8
 8003262:	d111      	bne.n	8003288 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	2208      	movs	r2, #8
 800326a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	0018      	movs	r0, r3
 8003270:	f000 f8f2 	bl	8003458 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2284      	movs	r2, #132	; 0x84
 8003278:	2108      	movs	r1, #8
 800327a:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2278      	movs	r2, #120	; 0x78
 8003280:	2100      	movs	r1, #0
 8003282:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	e02c      	b.n	80032e2 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	69da      	ldr	r2, [r3, #28]
 800328e:	2380      	movs	r3, #128	; 0x80
 8003290:	011b      	lsls	r3, r3, #4
 8003292:	401a      	ands	r2, r3
 8003294:	2380      	movs	r3, #128	; 0x80
 8003296:	011b      	lsls	r3, r3, #4
 8003298:	429a      	cmp	r2, r3
 800329a:	d112      	bne.n	80032c2 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	2280      	movs	r2, #128	; 0x80
 80032a2:	0112      	lsls	r2, r2, #4
 80032a4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	0018      	movs	r0, r3
 80032aa:	f000 f8d5 	bl	8003458 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2284      	movs	r2, #132	; 0x84
 80032b2:	2120      	movs	r1, #32
 80032b4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2278      	movs	r2, #120	; 0x78
 80032ba:	2100      	movs	r1, #0
 80032bc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80032be:	2303      	movs	r3, #3
 80032c0:	e00f      	b.n	80032e2 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	69db      	ldr	r3, [r3, #28]
 80032c8:	68ba      	ldr	r2, [r7, #8]
 80032ca:	4013      	ands	r3, r2
 80032cc:	68ba      	ldr	r2, [r7, #8]
 80032ce:	1ad3      	subs	r3, r2, r3
 80032d0:	425a      	negs	r2, r3
 80032d2:	4153      	adcs	r3, r2
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	001a      	movs	r2, r3
 80032d8:	1dfb      	adds	r3, r7, #7
 80032da:	781b      	ldrb	r3, [r3, #0]
 80032dc:	429a      	cmp	r2, r3
 80032de:	d0a4      	beq.n	800322a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80032e0:	2300      	movs	r3, #0
}
 80032e2:	0018      	movs	r0, r3
 80032e4:	46bd      	mov	sp, r7
 80032e6:	b004      	add	sp, #16
 80032e8:	bd80      	pop	{r7, pc}
	...

080032ec <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b090      	sub	sp, #64	; 0x40
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	60f8      	str	r0, [r7, #12]
 80032f4:	60b9      	str	r1, [r7, #8]
 80032f6:	1dbb      	adds	r3, r7, #6
 80032f8:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	68ba      	ldr	r2, [r7, #8]
 80032fe:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	1dba      	adds	r2, r7, #6
 8003304:	2158      	movs	r1, #88	; 0x58
 8003306:	8812      	ldrh	r2, [r2, #0]
 8003308:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	1dba      	adds	r2, r7, #6
 800330e:	215a      	movs	r1, #90	; 0x5a
 8003310:	8812      	ldrh	r2, [r2, #0]
 8003312:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2200      	movs	r2, #0
 8003318:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	689a      	ldr	r2, [r3, #8]
 800331e:	2380      	movs	r3, #128	; 0x80
 8003320:	015b      	lsls	r3, r3, #5
 8003322:	429a      	cmp	r2, r3
 8003324:	d10d      	bne.n	8003342 <UART_Start_Receive_IT+0x56>
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	691b      	ldr	r3, [r3, #16]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d104      	bne.n	8003338 <UART_Start_Receive_IT+0x4c>
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	225c      	movs	r2, #92	; 0x5c
 8003332:	4946      	ldr	r1, [pc, #280]	; (800344c <UART_Start_Receive_IT+0x160>)
 8003334:	5299      	strh	r1, [r3, r2]
 8003336:	e01a      	b.n	800336e <UART_Start_Receive_IT+0x82>
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	225c      	movs	r2, #92	; 0x5c
 800333c:	21ff      	movs	r1, #255	; 0xff
 800333e:	5299      	strh	r1, [r3, r2]
 8003340:	e015      	b.n	800336e <UART_Start_Receive_IT+0x82>
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d10d      	bne.n	8003366 <UART_Start_Receive_IT+0x7a>
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	691b      	ldr	r3, [r3, #16]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d104      	bne.n	800335c <UART_Start_Receive_IT+0x70>
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	225c      	movs	r2, #92	; 0x5c
 8003356:	21ff      	movs	r1, #255	; 0xff
 8003358:	5299      	strh	r1, [r3, r2]
 800335a:	e008      	b.n	800336e <UART_Start_Receive_IT+0x82>
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	225c      	movs	r2, #92	; 0x5c
 8003360:	217f      	movs	r1, #127	; 0x7f
 8003362:	5299      	strh	r1, [r3, r2]
 8003364:	e003      	b.n	800336e <UART_Start_Receive_IT+0x82>
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	225c      	movs	r2, #92	; 0x5c
 800336a:	2100      	movs	r1, #0
 800336c:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2284      	movs	r2, #132	; 0x84
 8003372:	2100      	movs	r1, #0
 8003374:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2280      	movs	r2, #128	; 0x80
 800337a:	2122      	movs	r1, #34	; 0x22
 800337c:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800337e:	f3ef 8310 	mrs	r3, PRIMASK
 8003382:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003384:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003386:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003388:	2301      	movs	r3, #1
 800338a:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800338c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800338e:	f383 8810 	msr	PRIMASK, r3
}
 8003392:	46c0      	nop			; (mov r8, r8)
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	689a      	ldr	r2, [r3, #8]
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	2101      	movs	r1, #1
 80033a0:	430a      	orrs	r2, r1
 80033a2:	609a      	str	r2, [r3, #8]
 80033a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033a6:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033aa:	f383 8810 	msr	PRIMASK, r3
}
 80033ae:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	689a      	ldr	r2, [r3, #8]
 80033b4:	2380      	movs	r3, #128	; 0x80
 80033b6:	015b      	lsls	r3, r3, #5
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d107      	bne.n	80033cc <UART_Start_Receive_IT+0xe0>
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	691b      	ldr	r3, [r3, #16]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d103      	bne.n	80033cc <UART_Start_Receive_IT+0xe0>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	4a22      	ldr	r2, [pc, #136]	; (8003450 <UART_Start_Receive_IT+0x164>)
 80033c8:	669a      	str	r2, [r3, #104]	; 0x68
 80033ca:	e002      	b.n	80033d2 <UART_Start_Receive_IT+0xe6>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	4a21      	ldr	r2, [pc, #132]	; (8003454 <UART_Start_Receive_IT+0x168>)
 80033d0:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	691b      	ldr	r3, [r3, #16]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d019      	beq.n	800340e <UART_Start_Receive_IT+0x122>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033da:	f3ef 8310 	mrs	r3, PRIMASK
 80033de:	61fb      	str	r3, [r7, #28]
  return(result);
 80033e0:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80033e2:	637b      	str	r3, [r7, #52]	; 0x34
 80033e4:	2301      	movs	r3, #1
 80033e6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033e8:	6a3b      	ldr	r3, [r7, #32]
 80033ea:	f383 8810 	msr	PRIMASK, r3
}
 80033ee:	46c0      	nop			; (mov r8, r8)
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	2190      	movs	r1, #144	; 0x90
 80033fc:	0049      	lsls	r1, r1, #1
 80033fe:	430a      	orrs	r2, r1
 8003400:	601a      	str	r2, [r3, #0]
 8003402:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003404:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003408:	f383 8810 	msr	PRIMASK, r3
}
 800340c:	e018      	b.n	8003440 <UART_Start_Receive_IT+0x154>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800340e:	f3ef 8310 	mrs	r3, PRIMASK
 8003412:	613b      	str	r3, [r7, #16]
  return(result);
 8003414:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003416:	63bb      	str	r3, [r7, #56]	; 0x38
 8003418:	2301      	movs	r3, #1
 800341a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	f383 8810 	msr	PRIMASK, r3
}
 8003422:	46c0      	nop			; (mov r8, r8)
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	2120      	movs	r1, #32
 8003430:	430a      	orrs	r2, r1
 8003432:	601a      	str	r2, [r3, #0]
 8003434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003436:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003438:	69bb      	ldr	r3, [r7, #24]
 800343a:	f383 8810 	msr	PRIMASK, r3
}
 800343e:	46c0      	nop			; (mov r8, r8)
  }
  return HAL_OK;
 8003440:	2300      	movs	r3, #0
}
 8003442:	0018      	movs	r0, r3
 8003444:	46bd      	mov	sp, r7
 8003446:	b010      	add	sp, #64	; 0x40
 8003448:	bd80      	pop	{r7, pc}
 800344a:	46c0      	nop			; (mov r8, r8)
 800344c:	000001ff 	.word	0x000001ff
 8003450:	0800375d 	.word	0x0800375d
 8003454:	080035a5 	.word	0x080035a5

08003458 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b08e      	sub	sp, #56	; 0x38
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003460:	f3ef 8310 	mrs	r3, PRIMASK
 8003464:	617b      	str	r3, [r7, #20]
  return(result);
 8003466:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003468:	637b      	str	r3, [r7, #52]	; 0x34
 800346a:	2301      	movs	r3, #1
 800346c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800346e:	69bb      	ldr	r3, [r7, #24]
 8003470:	f383 8810 	msr	PRIMASK, r3
}
 8003474:	46c0      	nop			; (mov r8, r8)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4926      	ldr	r1, [pc, #152]	; (800351c <UART_EndRxTransfer+0xc4>)
 8003482:	400a      	ands	r2, r1
 8003484:	601a      	str	r2, [r3, #0]
 8003486:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003488:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	f383 8810 	msr	PRIMASK, r3
}
 8003490:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003492:	f3ef 8310 	mrs	r3, PRIMASK
 8003496:	623b      	str	r3, [r7, #32]
  return(result);
 8003498:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800349a:	633b      	str	r3, [r7, #48]	; 0x30
 800349c:	2301      	movs	r3, #1
 800349e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a2:	f383 8810 	msr	PRIMASK, r3
}
 80034a6:	46c0      	nop			; (mov r8, r8)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	689a      	ldr	r2, [r3, #8]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	2101      	movs	r1, #1
 80034b4:	438a      	bics	r2, r1
 80034b6:	609a      	str	r2, [r3, #8]
 80034b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ba:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034be:	f383 8810 	msr	PRIMASK, r3
}
 80034c2:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d118      	bne.n	80034fe <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034cc:	f3ef 8310 	mrs	r3, PRIMASK
 80034d0:	60bb      	str	r3, [r7, #8]
  return(result);
 80034d2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034d6:	2301      	movs	r3, #1
 80034d8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	f383 8810 	msr	PRIMASK, r3
}
 80034e0:	46c0      	nop			; (mov r8, r8)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	681a      	ldr	r2, [r3, #0]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	2110      	movs	r1, #16
 80034ee:	438a      	bics	r2, r1
 80034f0:	601a      	str	r2, [r3, #0]
 80034f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034f4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	f383 8810 	msr	PRIMASK, r3
}
 80034fc:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2280      	movs	r2, #128	; 0x80
 8003502:	2120      	movs	r1, #32
 8003504:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2200      	movs	r2, #0
 800350a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2200      	movs	r2, #0
 8003510:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003512:	46c0      	nop			; (mov r8, r8)
 8003514:	46bd      	mov	sp, r7
 8003516:	b00e      	add	sp, #56	; 0x38
 8003518:	bd80      	pop	{r7, pc}
 800351a:	46c0      	nop			; (mov r8, r8)
 800351c:	fffffedf 	.word	0xfffffedf

08003520 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b084      	sub	sp, #16
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800352c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	225a      	movs	r2, #90	; 0x5a
 8003532:	2100      	movs	r1, #0
 8003534:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2252      	movs	r2, #82	; 0x52
 800353a:	2100      	movs	r1, #0
 800353c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	0018      	movs	r0, r3
 8003542:	f7ff fbd1 	bl	8002ce8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003546:	46c0      	nop			; (mov r8, r8)
 8003548:	46bd      	mov	sp, r7
 800354a:	b004      	add	sp, #16
 800354c:	bd80      	pop	{r7, pc}

0800354e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800354e:	b580      	push	{r7, lr}
 8003550:	b086      	sub	sp, #24
 8003552:	af00      	add	r7, sp, #0
 8003554:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003556:	f3ef 8310 	mrs	r3, PRIMASK
 800355a:	60bb      	str	r3, [r7, #8]
  return(result);
 800355c:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800355e:	617b      	str	r3, [r7, #20]
 8003560:	2301      	movs	r3, #1
 8003562:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f383 8810 	msr	PRIMASK, r3
}
 800356a:	46c0      	nop			; (mov r8, r8)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	2140      	movs	r1, #64	; 0x40
 8003578:	438a      	bics	r2, r1
 800357a:	601a      	str	r2, [r3, #0]
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	f383 8810 	msr	PRIMASK, r3
}
 8003586:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2220      	movs	r2, #32
 800358c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2200      	movs	r2, #0
 8003592:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	0018      	movs	r0, r3
 8003598:	f7ff fb9e 	bl	8002cd8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800359c:	46c0      	nop			; (mov r8, r8)
 800359e:	46bd      	mov	sp, r7
 80035a0:	b006      	add	sp, #24
 80035a2:	bd80      	pop	{r7, pc}

080035a4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b094      	sub	sp, #80	; 0x50
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80035ac:	204e      	movs	r0, #78	; 0x4e
 80035ae:	183b      	adds	r3, r7, r0
 80035b0:	687a      	ldr	r2, [r7, #4]
 80035b2:	215c      	movs	r1, #92	; 0x5c
 80035b4:	5a52      	ldrh	r2, [r2, r1]
 80035b6:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2280      	movs	r2, #128	; 0x80
 80035bc:	589b      	ldr	r3, [r3, r2]
 80035be:	2b22      	cmp	r3, #34	; 0x22
 80035c0:	d000      	beq.n	80035c4 <UART_RxISR_8BIT+0x20>
 80035c2:	e0ba      	b.n	800373a <UART_RxISR_8BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	214c      	movs	r1, #76	; 0x4c
 80035ca:	187b      	adds	r3, r7, r1
 80035cc:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 80035ce:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80035d0:	187b      	adds	r3, r7, r1
 80035d2:	881b      	ldrh	r3, [r3, #0]
 80035d4:	b2da      	uxtb	r2, r3
 80035d6:	183b      	adds	r3, r7, r0
 80035d8:	881b      	ldrh	r3, [r3, #0]
 80035da:	b2d9      	uxtb	r1, r3
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035e0:	400a      	ands	r2, r1
 80035e2:	b2d2      	uxtb	r2, r2
 80035e4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035ea:	1c5a      	adds	r2, r3, #1
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	225a      	movs	r2, #90	; 0x5a
 80035f4:	5a9b      	ldrh	r3, [r3, r2]
 80035f6:	b29b      	uxth	r3, r3
 80035f8:	3b01      	subs	r3, #1
 80035fa:	b299      	uxth	r1, r3
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	225a      	movs	r2, #90	; 0x5a
 8003600:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	225a      	movs	r2, #90	; 0x5a
 8003606:	5a9b      	ldrh	r3, [r3, r2]
 8003608:	b29b      	uxth	r3, r3
 800360a:	2b00      	cmp	r3, #0
 800360c:	d000      	beq.n	8003610 <UART_RxISR_8BIT+0x6c>
 800360e:	e09c      	b.n	800374a <UART_RxISR_8BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003610:	f3ef 8310 	mrs	r3, PRIMASK
 8003614:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003618:	64bb      	str	r3, [r7, #72]	; 0x48
 800361a:	2301      	movs	r3, #1
 800361c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800361e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003620:	f383 8810 	msr	PRIMASK, r3
}
 8003624:	46c0      	nop			; (mov r8, r8)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4948      	ldr	r1, [pc, #288]	; (8003754 <UART_RxISR_8BIT+0x1b0>)
 8003632:	400a      	ands	r2, r1
 8003634:	601a      	str	r2, [r3, #0]
 8003636:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003638:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800363a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800363c:	f383 8810 	msr	PRIMASK, r3
}
 8003640:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003642:	f3ef 8310 	mrs	r3, PRIMASK
 8003646:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003648:	6b3b      	ldr	r3, [r7, #48]	; 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800364a:	647b      	str	r3, [r7, #68]	; 0x44
 800364c:	2301      	movs	r3, #1
 800364e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003650:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003652:	f383 8810 	msr	PRIMASK, r3
}
 8003656:	46c0      	nop			; (mov r8, r8)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	689a      	ldr	r2, [r3, #8]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	2101      	movs	r1, #1
 8003664:	438a      	bics	r2, r1
 8003666:	609a      	str	r2, [r3, #8]
 8003668:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800366a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800366c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800366e:	f383 8810 	msr	PRIMASK, r3
}
 8003672:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2280      	movs	r2, #128	; 0x80
 8003678:	2120      	movs	r1, #32
 800367a:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2200      	movs	r2, #0
 8003680:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2200      	movs	r2, #0
 8003686:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	685a      	ldr	r2, [r3, #4]
 800368e:	2380      	movs	r3, #128	; 0x80
 8003690:	041b      	lsls	r3, r3, #16
 8003692:	4013      	ands	r3, r2
 8003694:	d018      	beq.n	80036c8 <UART_RxISR_8BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003696:	f3ef 8310 	mrs	r3, PRIMASK
 800369a:	61bb      	str	r3, [r7, #24]
  return(result);
 800369c:	69bb      	ldr	r3, [r7, #24]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800369e:	643b      	str	r3, [r7, #64]	; 0x40
 80036a0:	2301      	movs	r3, #1
 80036a2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036a4:	69fb      	ldr	r3, [r7, #28]
 80036a6:	f383 8810 	msr	PRIMASK, r3
}
 80036aa:	46c0      	nop			; (mov r8, r8)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4928      	ldr	r1, [pc, #160]	; (8003758 <UART_RxISR_8BIT+0x1b4>)
 80036b8:	400a      	ands	r2, r1
 80036ba:	601a      	str	r2, [r3, #0]
 80036bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036be:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036c0:	6a3b      	ldr	r3, [r7, #32]
 80036c2:	f383 8810 	msr	PRIMASK, r3
}
 80036c6:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d12f      	bne.n	8003730 <UART_RxISR_8BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2200      	movs	r2, #0
 80036d4:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036d6:	f3ef 8310 	mrs	r3, PRIMASK
 80036da:	60fb      	str	r3, [r7, #12]
  return(result);
 80036dc:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036e0:	2301      	movs	r3, #1
 80036e2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	f383 8810 	msr	PRIMASK, r3
}
 80036ea:	46c0      	nop			; (mov r8, r8)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	2110      	movs	r1, #16
 80036f8:	438a      	bics	r2, r1
 80036fa:	601a      	str	r2, [r3, #0]
 80036fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036fe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	f383 8810 	msr	PRIMASK, r3
}
 8003706:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	69db      	ldr	r3, [r3, #28]
 800370e:	2210      	movs	r2, #16
 8003710:	4013      	ands	r3, r2
 8003712:	2b10      	cmp	r3, #16
 8003714:	d103      	bne.n	800371e <UART_RxISR_8BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	2210      	movs	r2, #16
 800371c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2258      	movs	r2, #88	; 0x58
 8003722:	5a9a      	ldrh	r2, [r3, r2]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	0011      	movs	r1, r2
 8003728:	0018      	movs	r0, r3
 800372a:	f7ff fae5 	bl	8002cf8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800372e:	e00c      	b.n	800374a <UART_RxISR_8BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	0018      	movs	r0, r3
 8003734:	f7fd f9ce 	bl	8000ad4 <HAL_UART_RxCpltCallback>
}
 8003738:	e007      	b.n	800374a <UART_RxISR_8BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	699a      	ldr	r2, [r3, #24]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	2108      	movs	r1, #8
 8003746:	430a      	orrs	r2, r1
 8003748:	619a      	str	r2, [r3, #24]
}
 800374a:	46c0      	nop			; (mov r8, r8)
 800374c:	46bd      	mov	sp, r7
 800374e:	b014      	add	sp, #80	; 0x50
 8003750:	bd80      	pop	{r7, pc}
 8003752:	46c0      	nop			; (mov r8, r8)
 8003754:	fffffedf 	.word	0xfffffedf
 8003758:	fbffffff 	.word	0xfbffffff

0800375c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b094      	sub	sp, #80	; 0x50
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003764:	204e      	movs	r0, #78	; 0x4e
 8003766:	183b      	adds	r3, r7, r0
 8003768:	687a      	ldr	r2, [r7, #4]
 800376a:	215c      	movs	r1, #92	; 0x5c
 800376c:	5a52      	ldrh	r2, [r2, r1]
 800376e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2280      	movs	r2, #128	; 0x80
 8003774:	589b      	ldr	r3, [r3, r2]
 8003776:	2b22      	cmp	r3, #34	; 0x22
 8003778:	d000      	beq.n	800377c <UART_RxISR_16BIT+0x20>
 800377a:	e0ba      	b.n	80038f2 <UART_RxISR_16BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	214c      	movs	r1, #76	; 0x4c
 8003782:	187b      	adds	r3, r7, r1
 8003784:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8003786:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800378c:	64bb      	str	r3, [r7, #72]	; 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 800378e:	187b      	adds	r3, r7, r1
 8003790:	183a      	adds	r2, r7, r0
 8003792:	881b      	ldrh	r3, [r3, #0]
 8003794:	8812      	ldrh	r2, [r2, #0]
 8003796:	4013      	ands	r3, r2
 8003798:	b29a      	uxth	r2, r3
 800379a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800379c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037a2:	1c9a      	adds	r2, r3, #2
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	225a      	movs	r2, #90	; 0x5a
 80037ac:	5a9b      	ldrh	r3, [r3, r2]
 80037ae:	b29b      	uxth	r3, r3
 80037b0:	3b01      	subs	r3, #1
 80037b2:	b299      	uxth	r1, r3
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	225a      	movs	r2, #90	; 0x5a
 80037b8:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	225a      	movs	r2, #90	; 0x5a
 80037be:	5a9b      	ldrh	r3, [r3, r2]
 80037c0:	b29b      	uxth	r3, r3
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d000      	beq.n	80037c8 <UART_RxISR_16BIT+0x6c>
 80037c6:	e09c      	b.n	8003902 <UART_RxISR_16BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037c8:	f3ef 8310 	mrs	r3, PRIMASK
 80037cc:	623b      	str	r3, [r7, #32]
  return(result);
 80037ce:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037d0:	647b      	str	r3, [r7, #68]	; 0x44
 80037d2:	2301      	movs	r3, #1
 80037d4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d8:	f383 8810 	msr	PRIMASK, r3
}
 80037dc:	46c0      	nop			; (mov r8, r8)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4948      	ldr	r1, [pc, #288]	; (800390c <UART_RxISR_16BIT+0x1b0>)
 80037ea:	400a      	ands	r2, r1
 80037ec:	601a      	str	r2, [r3, #0]
 80037ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037f0:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037f4:	f383 8810 	msr	PRIMASK, r3
}
 80037f8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037fa:	f3ef 8310 	mrs	r3, PRIMASK
 80037fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8003800:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003802:	643b      	str	r3, [r7, #64]	; 0x40
 8003804:	2301      	movs	r3, #1
 8003806:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800380a:	f383 8810 	msr	PRIMASK, r3
}
 800380e:	46c0      	nop			; (mov r8, r8)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	689a      	ldr	r2, [r3, #8]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	2101      	movs	r1, #1
 800381c:	438a      	bics	r2, r1
 800381e:	609a      	str	r2, [r3, #8]
 8003820:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003822:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003824:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003826:	f383 8810 	msr	PRIMASK, r3
}
 800382a:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2280      	movs	r2, #128	; 0x80
 8003830:	2120      	movs	r1, #32
 8003832:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2200      	movs	r2, #0
 8003838:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2200      	movs	r2, #0
 800383e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	685a      	ldr	r2, [r3, #4]
 8003846:	2380      	movs	r3, #128	; 0x80
 8003848:	041b      	lsls	r3, r3, #16
 800384a:	4013      	ands	r3, r2
 800384c:	d018      	beq.n	8003880 <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800384e:	f3ef 8310 	mrs	r3, PRIMASK
 8003852:	617b      	str	r3, [r7, #20]
  return(result);
 8003854:	697b      	ldr	r3, [r7, #20]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003856:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003858:	2301      	movs	r3, #1
 800385a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800385c:	69bb      	ldr	r3, [r7, #24]
 800385e:	f383 8810 	msr	PRIMASK, r3
}
 8003862:	46c0      	nop			; (mov r8, r8)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4928      	ldr	r1, [pc, #160]	; (8003910 <UART_RxISR_16BIT+0x1b4>)
 8003870:	400a      	ands	r2, r1
 8003872:	601a      	str	r2, [r3, #0]
 8003874:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003876:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003878:	69fb      	ldr	r3, [r7, #28]
 800387a:	f383 8810 	msr	PRIMASK, r3
}
 800387e:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003884:	2b01      	cmp	r3, #1
 8003886:	d12f      	bne.n	80038e8 <UART_RxISR_16BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2200      	movs	r2, #0
 800388c:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800388e:	f3ef 8310 	mrs	r3, PRIMASK
 8003892:	60bb      	str	r3, [r7, #8]
  return(result);
 8003894:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003896:	63bb      	str	r3, [r7, #56]	; 0x38
 8003898:	2301      	movs	r3, #1
 800389a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	f383 8810 	msr	PRIMASK, r3
}
 80038a2:	46c0      	nop			; (mov r8, r8)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	2110      	movs	r1, #16
 80038b0:	438a      	bics	r2, r1
 80038b2:	601a      	str	r2, [r3, #0]
 80038b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038b6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	f383 8810 	msr	PRIMASK, r3
}
 80038be:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	69db      	ldr	r3, [r3, #28]
 80038c6:	2210      	movs	r2, #16
 80038c8:	4013      	ands	r3, r2
 80038ca:	2b10      	cmp	r3, #16
 80038cc:	d103      	bne.n	80038d6 <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	2210      	movs	r2, #16
 80038d4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2258      	movs	r2, #88	; 0x58
 80038da:	5a9a      	ldrh	r2, [r3, r2]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	0011      	movs	r1, r2
 80038e0:	0018      	movs	r0, r3
 80038e2:	f7ff fa09 	bl	8002cf8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80038e6:	e00c      	b.n	8003902 <UART_RxISR_16BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	0018      	movs	r0, r3
 80038ec:	f7fd f8f2 	bl	8000ad4 <HAL_UART_RxCpltCallback>
}
 80038f0:	e007      	b.n	8003902 <UART_RxISR_16BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	699a      	ldr	r2, [r3, #24]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	2108      	movs	r1, #8
 80038fe:	430a      	orrs	r2, r1
 8003900:	619a      	str	r2, [r3, #24]
}
 8003902:	46c0      	nop			; (mov r8, r8)
 8003904:	46bd      	mov	sp, r7
 8003906:	b014      	add	sp, #80	; 0x50
 8003908:	bd80      	pop	{r7, pc}
 800390a:	46c0      	nop			; (mov r8, r8)
 800390c:	fffffedf 	.word	0xfffffedf
 8003910:	fbffffff 	.word	0xfbffffff

08003914 <__libc_init_array>:
 8003914:	b570      	push	{r4, r5, r6, lr}
 8003916:	2600      	movs	r6, #0
 8003918:	4d0c      	ldr	r5, [pc, #48]	; (800394c <__libc_init_array+0x38>)
 800391a:	4c0d      	ldr	r4, [pc, #52]	; (8003950 <__libc_init_array+0x3c>)
 800391c:	1b64      	subs	r4, r4, r5
 800391e:	10a4      	asrs	r4, r4, #2
 8003920:	42a6      	cmp	r6, r4
 8003922:	d109      	bne.n	8003938 <__libc_init_array+0x24>
 8003924:	2600      	movs	r6, #0
 8003926:	f000 f821 	bl	800396c <_init>
 800392a:	4d0a      	ldr	r5, [pc, #40]	; (8003954 <__libc_init_array+0x40>)
 800392c:	4c0a      	ldr	r4, [pc, #40]	; (8003958 <__libc_init_array+0x44>)
 800392e:	1b64      	subs	r4, r4, r5
 8003930:	10a4      	asrs	r4, r4, #2
 8003932:	42a6      	cmp	r6, r4
 8003934:	d105      	bne.n	8003942 <__libc_init_array+0x2e>
 8003936:	bd70      	pop	{r4, r5, r6, pc}
 8003938:	00b3      	lsls	r3, r6, #2
 800393a:	58eb      	ldr	r3, [r5, r3]
 800393c:	4798      	blx	r3
 800393e:	3601      	adds	r6, #1
 8003940:	e7ee      	b.n	8003920 <__libc_init_array+0xc>
 8003942:	00b3      	lsls	r3, r6, #2
 8003944:	58eb      	ldr	r3, [r5, r3]
 8003946:	4798      	blx	r3
 8003948:	3601      	adds	r6, #1
 800394a:	e7f2      	b.n	8003932 <__libc_init_array+0x1e>
 800394c:	080039fc 	.word	0x080039fc
 8003950:	080039fc 	.word	0x080039fc
 8003954:	080039fc 	.word	0x080039fc
 8003958:	08003a00 	.word	0x08003a00

0800395c <memset>:
 800395c:	0003      	movs	r3, r0
 800395e:	1882      	adds	r2, r0, r2
 8003960:	4293      	cmp	r3, r2
 8003962:	d100      	bne.n	8003966 <memset+0xa>
 8003964:	4770      	bx	lr
 8003966:	7019      	strb	r1, [r3, #0]
 8003968:	3301      	adds	r3, #1
 800396a:	e7f9      	b.n	8003960 <memset+0x4>

0800396c <_init>:
 800396c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800396e:	46c0      	nop			; (mov r8, r8)
 8003970:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003972:	bc08      	pop	{r3}
 8003974:	469e      	mov	lr, r3
 8003976:	4770      	bx	lr

08003978 <_fini>:
 8003978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800397a:	46c0      	nop			; (mov r8, r8)
 800397c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800397e:	bc08      	pop	{r3}
 8003980:	469e      	mov	lr, r3
 8003982:	4770      	bx	lr
