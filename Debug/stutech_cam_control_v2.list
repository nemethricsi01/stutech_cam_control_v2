
stutech_cam_control_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000378c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  0800384c  0800384c  0001384c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080038bc  080038bc  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080038bc  080038bc  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080038bc  080038bc  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080038bc  080038bc  000138bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080038c0  080038c0  000138c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080038c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000148  20000010  080038d4  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000158  080038d4  00020158  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d277  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b23  00000000  00000000  0002d2af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bb0  00000000  00000000  0002edd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b08  00000000  00000000  0002f988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000ff9d  00000000  00000000  00030490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dd51  00000000  00000000  0004042d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00063027  00000000  00000000  0004e17e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b11a5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029f4  00000000  00000000  000b11f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003834 	.word	0x08003834

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	08003834 	.word	0x08003834

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <readgomb>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
					void readgomb(void)
					{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
						actgomb[0] = HAL_GPIO_ReadPin(BUTT_1_GPIO_Port,BUTT_1_Pin);
 8000224:	4b1a      	ldr	r3, [pc, #104]	; (8000290 <readgomb+0x70>)
 8000226:	2102      	movs	r1, #2
 8000228:	0018      	movs	r0, r3
 800022a:	f001 f8f7 	bl	800141c <HAL_GPIO_ReadPin>
 800022e:	0003      	movs	r3, r0
 8000230:	001a      	movs	r2, r3
 8000232:	4b18      	ldr	r3, [pc, #96]	; (8000294 <readgomb+0x74>)
 8000234:	601a      	str	r2, [r3, #0]
						actgomb[1] = HAL_GPIO_ReadPin(BUTT_2_GPIO_Port,BUTT_2_Pin);
 8000236:	2390      	movs	r3, #144	; 0x90
 8000238:	05db      	lsls	r3, r3, #23
 800023a:	2120      	movs	r1, #32
 800023c:	0018      	movs	r0, r3
 800023e:	f001 f8ed 	bl	800141c <HAL_GPIO_ReadPin>
 8000242:	0003      	movs	r3, r0
 8000244:	001a      	movs	r2, r3
 8000246:	4b13      	ldr	r3, [pc, #76]	; (8000294 <readgomb+0x74>)
 8000248:	605a      	str	r2, [r3, #4]
						actgomb[2] = HAL_GPIO_ReadPin(BUTT_3_GPIO_Port,BUTT_3_Pin);
 800024a:	2390      	movs	r3, #144	; 0x90
 800024c:	05db      	lsls	r3, r3, #23
 800024e:	2140      	movs	r1, #64	; 0x40
 8000250:	0018      	movs	r0, r3
 8000252:	f001 f8e3 	bl	800141c <HAL_GPIO_ReadPin>
 8000256:	0003      	movs	r3, r0
 8000258:	001a      	movs	r2, r3
 800025a:	4b0e      	ldr	r3, [pc, #56]	; (8000294 <readgomb+0x74>)
 800025c:	609a      	str	r2, [r3, #8]
						actgomb[3] = HAL_GPIO_ReadPin(BUTT_4_GPIO_Port,BUTT_4_Pin);
 800025e:	2390      	movs	r3, #144	; 0x90
 8000260:	05db      	lsls	r3, r3, #23
 8000262:	2180      	movs	r1, #128	; 0x80
 8000264:	0018      	movs	r0, r3
 8000266:	f001 f8d9 	bl	800141c <HAL_GPIO_ReadPin>
 800026a:	0003      	movs	r3, r0
 800026c:	001a      	movs	r2, r3
 800026e:	4b09      	ldr	r3, [pc, #36]	; (8000294 <readgomb+0x74>)
 8000270:	60da      	str	r2, [r3, #12]
						actgomb[4] = HAL_GPIO_ReadPin(BUTT_GEN_GPIO_Port,BUTT_GEN_Pin);
 8000272:	2380      	movs	r3, #128	; 0x80
 8000274:	009a      	lsls	r2, r3, #2
 8000276:	2390      	movs	r3, #144	; 0x90
 8000278:	05db      	lsls	r3, r3, #23
 800027a:	0011      	movs	r1, r2
 800027c:	0018      	movs	r0, r3
 800027e:	f001 f8cd 	bl	800141c <HAL_GPIO_ReadPin>
 8000282:	0003      	movs	r3, r0
 8000284:	001a      	movs	r2, r3
 8000286:	4b03      	ldr	r3, [pc, #12]	; (8000294 <readgomb+0x74>)
 8000288:	611a      	str	r2, [r3, #16]
					}
 800028a:	46c0      	nop			; (mov r8, r8)
 800028c:	46bd      	mov	sp, r7
 800028e:	bd80      	pop	{r7, pc}
 8000290:	48000400 	.word	0x48000400
 8000294:	200000fc 	.word	0x200000fc

08000298 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800029c:	f000 fd6a 	bl	8000d74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002a0:	f000 f962 	bl	8000568 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002a4:	f000 fa18 	bl	80006d8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80002a8:	f000 f9e6 	bl	8000678 <MX_USART1_UART_Init>
  MX_TIM17_Init();
 80002ac:	f000 f9bc 	bl	8000628 <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */
						HAL_TIM_Base_Start_IT(&htim17);
 80002b0:	4b9e      	ldr	r3, [pc, #632]	; (800052c <main+0x294>)
 80002b2:	0018      	movs	r0, r3
 80002b4:	f001 fe68 	bl	8001f88 <HAL_TIM_Base_Start_IT>
						HAL_UART_Receive_IT(&huart1,&uartbuf,1);
 80002b8:	499d      	ldr	r1, [pc, #628]	; (8000530 <main+0x298>)
 80002ba:	4b9e      	ldr	r3, [pc, #632]	; (8000534 <main+0x29c>)
 80002bc:	2201      	movs	r2, #1
 80002be:	0018      	movs	r0, r3
 80002c0:	f002 f94e 	bl	8002560 <HAL_UART_Receive_IT>
						readgomb();
 80002c4:	f7ff ffac 	bl	8000220 <readgomb>
						lastgomb[0] = actgomb[0];
 80002c8:	4b9b      	ldr	r3, [pc, #620]	; (8000538 <main+0x2a0>)
 80002ca:	681a      	ldr	r2, [r3, #0]
 80002cc:	4b9b      	ldr	r3, [pc, #620]	; (800053c <main+0x2a4>)
 80002ce:	601a      	str	r2, [r3, #0]
						lastgomb[1] = actgomb[1];
 80002d0:	4b99      	ldr	r3, [pc, #612]	; (8000538 <main+0x2a0>)
 80002d2:	685a      	ldr	r2, [r3, #4]
 80002d4:	4b99      	ldr	r3, [pc, #612]	; (800053c <main+0x2a4>)
 80002d6:	605a      	str	r2, [r3, #4]
						lastgomb[2] = actgomb[2];
 80002d8:	4b97      	ldr	r3, [pc, #604]	; (8000538 <main+0x2a0>)
 80002da:	689a      	ldr	r2, [r3, #8]
 80002dc:	4b97      	ldr	r3, [pc, #604]	; (800053c <main+0x2a4>)
 80002de:	609a      	str	r2, [r3, #8]
						lastgomb[3] = actgomb[3];
 80002e0:	4b95      	ldr	r3, [pc, #596]	; (8000538 <main+0x2a0>)
 80002e2:	68da      	ldr	r2, [r3, #12]
 80002e4:	4b95      	ldr	r3, [pc, #596]	; (800053c <main+0x2a4>)
 80002e6:	60da      	str	r2, [r3, #12]
						lastgomb[4] = actgomb[4];
 80002e8:	4b93      	ldr	r3, [pc, #588]	; (8000538 <main+0x2a0>)
 80002ea:	691a      	ldr	r2, [r3, #16]
 80002ec:	4b93      	ldr	r3, [pc, #588]	; (800053c <main+0x2a4>)
 80002ee:	611a      	str	r2, [r3, #16]

						//bekapcs villogas
						HAL_GPIO_WritePin(PWR_LED_GPIO_Port,PWR_LED_Pin,GPIO_PIN_SET);
 80002f0:	2380      	movs	r3, #128	; 0x80
 80002f2:	00d9      	lsls	r1, r3, #3
 80002f4:	2390      	movs	r3, #144	; 0x90
 80002f6:	05db      	lsls	r3, r3, #23
 80002f8:	2201      	movs	r2, #1
 80002fa:	0018      	movs	r0, r3
 80002fc:	f001 f8ab 	bl	8001456 <HAL_GPIO_WritePin>
						HAL_Delay(200);
 8000300:	20c8      	movs	r0, #200	; 0xc8
 8000302:	f000 fd9b 	bl	8000e3c <HAL_Delay>
						HAL_GPIO_WritePin(PWR_LED_GPIO_Port,PWR_LED_Pin,GPIO_PIN_RESET);
 8000306:	2380      	movs	r3, #128	; 0x80
 8000308:	00d9      	lsls	r1, r3, #3
 800030a:	2390      	movs	r3, #144	; 0x90
 800030c:	05db      	lsls	r3, r3, #23
 800030e:	2200      	movs	r2, #0
 8000310:	0018      	movs	r0, r3
 8000312:	f001 f8a0 	bl	8001456 <HAL_GPIO_WritePin>
						HAL_Delay(200);
 8000316:	20c8      	movs	r0, #200	; 0xc8
 8000318:	f000 fd90 	bl	8000e3c <HAL_Delay>
						HAL_GPIO_WritePin(PWR_LED_GPIO_Port,PWR_LED_Pin,GPIO_PIN_SET);
 800031c:	2380      	movs	r3, #128	; 0x80
 800031e:	00d9      	lsls	r1, r3, #3
 8000320:	2390      	movs	r3, #144	; 0x90
 8000322:	05db      	lsls	r3, r3, #23
 8000324:	2201      	movs	r2, #1
 8000326:	0018      	movs	r0, r3
 8000328:	f001 f895 	bl	8001456 <HAL_GPIO_WritePin>
						HAL_Delay(200);
 800032c:	20c8      	movs	r0, #200	; 0xc8
 800032e:	f000 fd85 	bl	8000e3c <HAL_Delay>
						HAL_GPIO_WritePin(PWR_LED_GPIO_Port,PWR_LED_Pin,GPIO_PIN_RESET);
 8000332:	2380      	movs	r3, #128	; 0x80
 8000334:	00d9      	lsls	r1, r3, #3
 8000336:	2390      	movs	r3, #144	; 0x90
 8000338:	05db      	lsls	r3, r3, #23
 800033a:	2200      	movs	r2, #0
 800033c:	0018      	movs	r0, r3
 800033e:	f001 f88a 	bl	8001456 <HAL_GPIO_WritePin>
						HAL_Delay(200);
 8000342:	20c8      	movs	r0, #200	; 0xc8
 8000344:	f000 fd7a 	bl	8000e3c <HAL_Delay>
						HAL_GPIO_WritePin(PWR_LED_GPIO_Port,PWR_LED_Pin,GPIO_PIN_SET);
 8000348:	2380      	movs	r3, #128	; 0x80
 800034a:	00d9      	lsls	r1, r3, #3
 800034c:	2390      	movs	r3, #144	; 0x90
 800034e:	05db      	lsls	r3, r3, #23
 8000350:	2201      	movs	r2, #1
 8000352:	0018      	movs	r0, r3
 8000354:	f001 f87f 	bl	8001456 <HAL_GPIO_WritePin>
						HAL_Delay(200);
 8000358:	20c8      	movs	r0, #200	; 0xc8
 800035a:	f000 fd6f 	bl	8000e3c <HAL_Delay>
						HAL_GPIO_WritePin(PWR_LED_GPIO_Port,PWR_LED_Pin,GPIO_PIN_RESET);
 800035e:	2380      	movs	r3, #128	; 0x80
 8000360:	00d9      	lsls	r1, r3, #3
 8000362:	2390      	movs	r3, #144	; 0x90
 8000364:	05db      	lsls	r3, r3, #23
 8000366:	2200      	movs	r2, #0
 8000368:	0018      	movs	r0, r3
 800036a:	f001 f874 	bl	8001456 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
						while (1)
						{
							if((poweronflag == 1)&&(villtimer == 0))
 800036e:	4b74      	ldr	r3, [pc, #464]	; (8000540 <main+0x2a8>)
 8000370:	781b      	ldrb	r3, [r3, #0]
 8000372:	2b01      	cmp	r3, #1
 8000374:	d10b      	bne.n	800038e <main+0xf6>
 8000376:	4b73      	ldr	r3, [pc, #460]	; (8000544 <main+0x2ac>)
 8000378:	781b      	ldrb	r3, [r3, #0]
 800037a:	2b00      	cmp	r3, #0
 800037c:	d107      	bne.n	800038e <main+0xf6>
							{
								HAL_GPIO_WritePin(PWR_LED_GPIO_Port,PWR_LED_Pin,GPIO_PIN_SET);
 800037e:	2380      	movs	r3, #128	; 0x80
 8000380:	00d9      	lsls	r1, r3, #3
 8000382:	2390      	movs	r3, #144	; 0x90
 8000384:	05db      	lsls	r3, r3, #23
 8000386:	2201      	movs	r2, #1
 8000388:	0018      	movs	r0, r3
 800038a:	f001 f864 	bl	8001456 <HAL_GPIO_WritePin>
							}
							if((poweroffflag == 1)&&(villtimer == 0))
 800038e:	4b6e      	ldr	r3, [pc, #440]	; (8000548 <main+0x2b0>)
 8000390:	781b      	ldrb	r3, [r3, #0]
 8000392:	2b01      	cmp	r3, #1
 8000394:	d10b      	bne.n	80003ae <main+0x116>
 8000396:	4b6b      	ldr	r3, [pc, #428]	; (8000544 <main+0x2ac>)
 8000398:	781b      	ldrb	r3, [r3, #0]
 800039a:	2b00      	cmp	r3, #0
 800039c:	d107      	bne.n	80003ae <main+0x116>
							{
							HAL_GPIO_WritePin(PWR_LED_GPIO_Port,PWR_LED_Pin,GPIO_PIN_RESET);
 800039e:	2380      	movs	r3, #128	; 0x80
 80003a0:	00d9      	lsls	r1, r3, #3
 80003a2:	2390      	movs	r3, #144	; 0x90
 80003a4:	05db      	lsls	r3, r3, #23
 80003a6:	2200      	movs	r2, #0
 80003a8:	0018      	movs	r0, r3
 80003aa:	f001 f854 	bl	8001456 <HAL_GPIO_WritePin>
							}


							readgomb();
 80003ae:	f7ff ff37 	bl	8000220 <readgomb>
							if((lastgomb[0] != actgomb[0])||
 80003b2:	4b62      	ldr	r3, [pc, #392]	; (800053c <main+0x2a4>)
 80003b4:	681a      	ldr	r2, [r3, #0]
 80003b6:	4b60      	ldr	r3, [pc, #384]	; (8000538 <main+0x2a0>)
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d117      	bne.n	80003ee <main+0x156>
								 (lastgomb[1] != actgomb[1])||
 80003be:	4b5f      	ldr	r3, [pc, #380]	; (800053c <main+0x2a4>)
 80003c0:	685a      	ldr	r2, [r3, #4]
 80003c2:	4b5d      	ldr	r3, [pc, #372]	; (8000538 <main+0x2a0>)
 80003c4:	685b      	ldr	r3, [r3, #4]
							if((lastgomb[0] != actgomb[0])||
 80003c6:	429a      	cmp	r2, r3
 80003c8:	d111      	bne.n	80003ee <main+0x156>
								 (lastgomb[2] != actgomb[2])||
 80003ca:	4b5c      	ldr	r3, [pc, #368]	; (800053c <main+0x2a4>)
 80003cc:	689a      	ldr	r2, [r3, #8]
 80003ce:	4b5a      	ldr	r3, [pc, #360]	; (8000538 <main+0x2a0>)
 80003d0:	689b      	ldr	r3, [r3, #8]
								 (lastgomb[1] != actgomb[1])||
 80003d2:	429a      	cmp	r2, r3
 80003d4:	d10b      	bne.n	80003ee <main+0x156>
								 (lastgomb[3] != actgomb[3])||
 80003d6:	4b59      	ldr	r3, [pc, #356]	; (800053c <main+0x2a4>)
 80003d8:	68da      	ldr	r2, [r3, #12]
 80003da:	4b57      	ldr	r3, [pc, #348]	; (8000538 <main+0x2a0>)
 80003dc:	68db      	ldr	r3, [r3, #12]
								 (lastgomb[2] != actgomb[2])||
 80003de:	429a      	cmp	r2, r3
 80003e0:	d105      	bne.n	80003ee <main+0x156>
								 (lastgomb[4] != actgomb[4]))
 80003e2:	4b56      	ldr	r3, [pc, #344]	; (800053c <main+0x2a4>)
 80003e4:	691a      	ldr	r2, [r3, #16]
 80003e6:	4b54      	ldr	r3, [pc, #336]	; (8000538 <main+0x2a0>)
 80003e8:	691b      	ldr	r3, [r3, #16]
								 (lastgomb[3] != actgomb[3])||
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d0bf      	beq.n	800036e <main+0xd6>
									{
										prelltimer = prelltime;
 80003ee:	4b57      	ldr	r3, [pc, #348]	; (800054c <main+0x2b4>)
 80003f0:	681a      	ldr	r2, [r3, #0]
 80003f2:	4b57      	ldr	r3, [pc, #348]	; (8000550 <main+0x2b8>)
 80003f4:	601a      	str	r2, [r3, #0]
										while(prelltimer >0)
 80003f6:	e047      	b.n	8000488 <main+0x1f0>
										{
											readgomb();
 80003f8:	f7ff ff12 	bl	8000220 <readgomb>
											if(lastgomb[0] != actgomb[0])
 80003fc:	4b4f      	ldr	r3, [pc, #316]	; (800053c <main+0x2a4>)
 80003fe:	681a      	ldr	r2, [r3, #0]
 8000400:	4b4d      	ldr	r3, [pc, #308]	; (8000538 <main+0x2a0>)
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	429a      	cmp	r2, r3
 8000406:	d007      	beq.n	8000418 <main+0x180>
											{
												prelltimer = prelltime;
 8000408:	4b50      	ldr	r3, [pc, #320]	; (800054c <main+0x2b4>)
 800040a:	681a      	ldr	r2, [r3, #0]
 800040c:	4b50      	ldr	r3, [pc, #320]	; (8000550 <main+0x2b8>)
 800040e:	601a      	str	r2, [r3, #0]
												lastgomb[0] = actgomb[0];
 8000410:	4b49      	ldr	r3, [pc, #292]	; (8000538 <main+0x2a0>)
 8000412:	681a      	ldr	r2, [r3, #0]
 8000414:	4b49      	ldr	r3, [pc, #292]	; (800053c <main+0x2a4>)
 8000416:	601a      	str	r2, [r3, #0]
											}
											if(lastgomb[1] != actgomb[1])
 8000418:	4b48      	ldr	r3, [pc, #288]	; (800053c <main+0x2a4>)
 800041a:	685a      	ldr	r2, [r3, #4]
 800041c:	4b46      	ldr	r3, [pc, #280]	; (8000538 <main+0x2a0>)
 800041e:	685b      	ldr	r3, [r3, #4]
 8000420:	429a      	cmp	r2, r3
 8000422:	d007      	beq.n	8000434 <main+0x19c>
											{
												prelltimer = prelltime;
 8000424:	4b49      	ldr	r3, [pc, #292]	; (800054c <main+0x2b4>)
 8000426:	681a      	ldr	r2, [r3, #0]
 8000428:	4b49      	ldr	r3, [pc, #292]	; (8000550 <main+0x2b8>)
 800042a:	601a      	str	r2, [r3, #0]
												lastgomb[1] = actgomb[1];
 800042c:	4b42      	ldr	r3, [pc, #264]	; (8000538 <main+0x2a0>)
 800042e:	685a      	ldr	r2, [r3, #4]
 8000430:	4b42      	ldr	r3, [pc, #264]	; (800053c <main+0x2a4>)
 8000432:	605a      	str	r2, [r3, #4]
											}
											if(lastgomb[2] != actgomb[2])
 8000434:	4b41      	ldr	r3, [pc, #260]	; (800053c <main+0x2a4>)
 8000436:	689a      	ldr	r2, [r3, #8]
 8000438:	4b3f      	ldr	r3, [pc, #252]	; (8000538 <main+0x2a0>)
 800043a:	689b      	ldr	r3, [r3, #8]
 800043c:	429a      	cmp	r2, r3
 800043e:	d007      	beq.n	8000450 <main+0x1b8>
											{
												prelltimer = prelltime;
 8000440:	4b42      	ldr	r3, [pc, #264]	; (800054c <main+0x2b4>)
 8000442:	681a      	ldr	r2, [r3, #0]
 8000444:	4b42      	ldr	r3, [pc, #264]	; (8000550 <main+0x2b8>)
 8000446:	601a      	str	r2, [r3, #0]
												lastgomb[2] = actgomb[2];
 8000448:	4b3b      	ldr	r3, [pc, #236]	; (8000538 <main+0x2a0>)
 800044a:	689a      	ldr	r2, [r3, #8]
 800044c:	4b3b      	ldr	r3, [pc, #236]	; (800053c <main+0x2a4>)
 800044e:	609a      	str	r2, [r3, #8]
											}
											if(lastgomb[3] != actgomb[3])
 8000450:	4b3a      	ldr	r3, [pc, #232]	; (800053c <main+0x2a4>)
 8000452:	68da      	ldr	r2, [r3, #12]
 8000454:	4b38      	ldr	r3, [pc, #224]	; (8000538 <main+0x2a0>)
 8000456:	68db      	ldr	r3, [r3, #12]
 8000458:	429a      	cmp	r2, r3
 800045a:	d007      	beq.n	800046c <main+0x1d4>
											{
												prelltimer = prelltime;
 800045c:	4b3b      	ldr	r3, [pc, #236]	; (800054c <main+0x2b4>)
 800045e:	681a      	ldr	r2, [r3, #0]
 8000460:	4b3b      	ldr	r3, [pc, #236]	; (8000550 <main+0x2b8>)
 8000462:	601a      	str	r2, [r3, #0]
												lastgomb[3] = actgomb[3];
 8000464:	4b34      	ldr	r3, [pc, #208]	; (8000538 <main+0x2a0>)
 8000466:	68da      	ldr	r2, [r3, #12]
 8000468:	4b34      	ldr	r3, [pc, #208]	; (800053c <main+0x2a4>)
 800046a:	60da      	str	r2, [r3, #12]
											}
											if(lastgomb[4] != actgomb[4])
 800046c:	4b33      	ldr	r3, [pc, #204]	; (800053c <main+0x2a4>)
 800046e:	691a      	ldr	r2, [r3, #16]
 8000470:	4b31      	ldr	r3, [pc, #196]	; (8000538 <main+0x2a0>)
 8000472:	691b      	ldr	r3, [r3, #16]
 8000474:	429a      	cmp	r2, r3
 8000476:	d007      	beq.n	8000488 <main+0x1f0>
											{
												prelltimer = prelltime;
 8000478:	4b34      	ldr	r3, [pc, #208]	; (800054c <main+0x2b4>)
 800047a:	681a      	ldr	r2, [r3, #0]
 800047c:	4b34      	ldr	r3, [pc, #208]	; (8000550 <main+0x2b8>)
 800047e:	601a      	str	r2, [r3, #0]
												lastgomb[4] = actgomb[4];
 8000480:	4b2d      	ldr	r3, [pc, #180]	; (8000538 <main+0x2a0>)
 8000482:	691a      	ldr	r2, [r3, #16]
 8000484:	4b2d      	ldr	r3, [pc, #180]	; (800053c <main+0x2a4>)
 8000486:	611a      	str	r2, [r3, #16]
										while(prelltimer >0)
 8000488:	4b31      	ldr	r3, [pc, #196]	; (8000550 <main+0x2b8>)
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	2b00      	cmp	r3, #0
 800048e:	dcb3      	bgt.n	80003f8 <main+0x160>
											}

										}
											if(lastgomb[0] == 0)//gomb1
 8000490:	4b2a      	ldr	r3, [pc, #168]	; (800053c <main+0x2a4>)
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	2b00      	cmp	r3, #0
 8000496:	d10e      	bne.n	80004b6 <main+0x21e>
											{
												HAL_UART_Transmit(&huart1,cam1preset,7,100);
 8000498:	492e      	ldr	r1, [pc, #184]	; (8000554 <main+0x2bc>)
 800049a:	4826      	ldr	r0, [pc, #152]	; (8000534 <main+0x29c>)
 800049c:	2364      	movs	r3, #100	; 0x64
 800049e:	2207      	movs	r2, #7
 80004a0:	f001 ffbe 	bl	8002420 <HAL_UART_Transmit>
												HAL_UART_Transmit(&huart1,powerinquiry,5,100);
 80004a4:	492c      	ldr	r1, [pc, #176]	; (8000558 <main+0x2c0>)
 80004a6:	4823      	ldr	r0, [pc, #140]	; (8000534 <main+0x29c>)
 80004a8:	2364      	movs	r3, #100	; 0x64
 80004aa:	2205      	movs	r2, #5
 80004ac:	f001 ffb8 	bl	8002420 <HAL_UART_Transmit>
												villtimer = 200;
 80004b0:	4b24      	ldr	r3, [pc, #144]	; (8000544 <main+0x2ac>)
 80004b2:	22c8      	movs	r2, #200	; 0xc8
 80004b4:	701a      	strb	r2, [r3, #0]
											}
											if(lastgomb[1] == 0)//gomb2
 80004b6:	4b21      	ldr	r3, [pc, #132]	; (800053c <main+0x2a4>)
 80004b8:	685b      	ldr	r3, [r3, #4]
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d10e      	bne.n	80004dc <main+0x244>
											{
												HAL_UART_Transmit(&huart1,cam2preset,7,100);
 80004be:	4927      	ldr	r1, [pc, #156]	; (800055c <main+0x2c4>)
 80004c0:	481c      	ldr	r0, [pc, #112]	; (8000534 <main+0x29c>)
 80004c2:	2364      	movs	r3, #100	; 0x64
 80004c4:	2207      	movs	r2, #7
 80004c6:	f001 ffab 	bl	8002420 <HAL_UART_Transmit>
												HAL_UART_Transmit(&huart1,powerinquiry,5,100);
 80004ca:	4923      	ldr	r1, [pc, #140]	; (8000558 <main+0x2c0>)
 80004cc:	4819      	ldr	r0, [pc, #100]	; (8000534 <main+0x29c>)
 80004ce:	2364      	movs	r3, #100	; 0x64
 80004d0:	2205      	movs	r2, #5
 80004d2:	f001 ffa5 	bl	8002420 <HAL_UART_Transmit>
												villtimer = 200;
 80004d6:	4b1b      	ldr	r3, [pc, #108]	; (8000544 <main+0x2ac>)
 80004d8:	22c8      	movs	r2, #200	; 0xc8
 80004da:	701a      	strb	r2, [r3, #0]
											}
											if(lastgomb[2] == 0)//gomb3
 80004dc:	4b17      	ldr	r3, [pc, #92]	; (800053c <main+0x2a4>)
 80004de:	689b      	ldr	r3, [r3, #8]
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d10e      	bne.n	8000502 <main+0x26a>
											{
												HAL_UART_Transmit(&huart1,cam3preset,7,100);
 80004e4:	491e      	ldr	r1, [pc, #120]	; (8000560 <main+0x2c8>)
 80004e6:	4813      	ldr	r0, [pc, #76]	; (8000534 <main+0x29c>)
 80004e8:	2364      	movs	r3, #100	; 0x64
 80004ea:	2207      	movs	r2, #7
 80004ec:	f001 ff98 	bl	8002420 <HAL_UART_Transmit>
												HAL_UART_Transmit(&huart1,powerinquiry,5,100);
 80004f0:	4919      	ldr	r1, [pc, #100]	; (8000558 <main+0x2c0>)
 80004f2:	4810      	ldr	r0, [pc, #64]	; (8000534 <main+0x29c>)
 80004f4:	2364      	movs	r3, #100	; 0x64
 80004f6:	2205      	movs	r2, #5
 80004f8:	f001 ff92 	bl	8002420 <HAL_UART_Transmit>
												villtimer = 200;
 80004fc:	4b11      	ldr	r3, [pc, #68]	; (8000544 <main+0x2ac>)
 80004fe:	22c8      	movs	r2, #200	; 0xc8
 8000500:	701a      	strb	r2, [r3, #0]
											}
											if(lastgomb[3] == 0)//gomb4
 8000502:	4b0e      	ldr	r3, [pc, #56]	; (800053c <main+0x2a4>)
 8000504:	68db      	ldr	r3, [r3, #12]
 8000506:	2b00      	cmp	r3, #0
 8000508:	d000      	beq.n	800050c <main+0x274>
 800050a:	e730      	b.n	800036e <main+0xd6>
											{
												HAL_UART_Transmit(&huart1,cam4preset,7,100);
 800050c:	4915      	ldr	r1, [pc, #84]	; (8000564 <main+0x2cc>)
 800050e:	4809      	ldr	r0, [pc, #36]	; (8000534 <main+0x29c>)
 8000510:	2364      	movs	r3, #100	; 0x64
 8000512:	2207      	movs	r2, #7
 8000514:	f001 ff84 	bl	8002420 <HAL_UART_Transmit>
												HAL_UART_Transmit(&huart1,powerinquiry,5,100);
 8000518:	490f      	ldr	r1, [pc, #60]	; (8000558 <main+0x2c0>)
 800051a:	4806      	ldr	r0, [pc, #24]	; (8000534 <main+0x29c>)
 800051c:	2364      	movs	r3, #100	; 0x64
 800051e:	2205      	movs	r2, #5
 8000520:	f001 ff7e 	bl	8002420 <HAL_UART_Transmit>
												villtimer = 200;
 8000524:	4b07      	ldr	r3, [pc, #28]	; (8000544 <main+0x2ac>)
 8000526:	22c8      	movs	r2, #200	; 0xc8
 8000528:	701a      	strb	r2, [r3, #0]
							if((poweronflag == 1)&&(villtimer == 0))
 800052a:	e720      	b.n	800036e <main+0xd6>
 800052c:	2000002c 	.word	0x2000002c
 8000530:	20000140 	.word	0x20000140
 8000534:	20000074 	.word	0x20000074
 8000538:	200000fc 	.word	0x200000fc
 800053c:	20000110 	.word	0x20000110
 8000540:	20000144 	.word	0x20000144
 8000544:	20000146 	.word	0x20000146
 8000548:	20000145 	.word	0x20000145
 800054c:	20000000 	.word	0x20000000
 8000550:	20000124 	.word	0x20000124
 8000554:	0800385c 	.word	0x0800385c
 8000558:	0800387c 	.word	0x0800387c
 800055c:	08003864 	.word	0x08003864
 8000560:	0800386c 	.word	0x0800386c
 8000564:	08003874 	.word	0x08003874

08000568 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000568:	b590      	push	{r4, r7, lr}
 800056a:	b095      	sub	sp, #84	; 0x54
 800056c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800056e:	2420      	movs	r4, #32
 8000570:	193b      	adds	r3, r7, r4
 8000572:	0018      	movs	r0, r3
 8000574:	2330      	movs	r3, #48	; 0x30
 8000576:	001a      	movs	r2, r3
 8000578:	2100      	movs	r1, #0
 800057a:	f003 f953 	bl	8003824 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800057e:	2310      	movs	r3, #16
 8000580:	18fb      	adds	r3, r7, r3
 8000582:	0018      	movs	r0, r3
 8000584:	2310      	movs	r3, #16
 8000586:	001a      	movs	r2, r3
 8000588:	2100      	movs	r1, #0
 800058a:	f003 f94b 	bl	8003824 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800058e:	003b      	movs	r3, r7
 8000590:	0018      	movs	r0, r3
 8000592:	2310      	movs	r3, #16
 8000594:	001a      	movs	r2, r3
 8000596:	2100      	movs	r1, #0
 8000598:	f003 f944 	bl	8003824 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800059c:	0021      	movs	r1, r4
 800059e:	187b      	adds	r3, r7, r1
 80005a0:	2201      	movs	r2, #1
 80005a2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005a4:	187b      	adds	r3, r7, r1
 80005a6:	2201      	movs	r2, #1
 80005a8:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005aa:	187b      	adds	r3, r7, r1
 80005ac:	2202      	movs	r2, #2
 80005ae:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005b0:	187b      	adds	r3, r7, r1
 80005b2:	2280      	movs	r2, #128	; 0x80
 80005b4:	0252      	lsls	r2, r2, #9
 80005b6:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80005b8:	187b      	adds	r3, r7, r1
 80005ba:	2280      	movs	r2, #128	; 0x80
 80005bc:	0352      	lsls	r2, r2, #13
 80005be:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80005c0:	187b      	adds	r3, r7, r1
 80005c2:	2200      	movs	r2, #0
 80005c4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c6:	187b      	adds	r3, r7, r1
 80005c8:	0018      	movs	r0, r3
 80005ca:	f000 ff61 	bl	8001490 <HAL_RCC_OscConfig>
 80005ce:	1e03      	subs	r3, r0, #0
 80005d0:	d001      	beq.n	80005d6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80005d2:	f000 fac9 	bl	8000b68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d6:	2110      	movs	r1, #16
 80005d8:	187b      	adds	r3, r7, r1
 80005da:	2207      	movs	r2, #7
 80005dc:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005de:	187b      	adds	r3, r7, r1
 80005e0:	2202      	movs	r2, #2
 80005e2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e4:	187b      	adds	r3, r7, r1
 80005e6:	2200      	movs	r2, #0
 80005e8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005ea:	187b      	adds	r3, r7, r1
 80005ec:	2200      	movs	r2, #0
 80005ee:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005f0:	187b      	adds	r3, r7, r1
 80005f2:	2101      	movs	r1, #1
 80005f4:	0018      	movs	r0, r3
 80005f6:	f001 fa65 	bl	8001ac4 <HAL_RCC_ClockConfig>
 80005fa:	1e03      	subs	r3, r0, #0
 80005fc:	d001      	beq.n	8000602 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80005fe:	f000 fab3 	bl	8000b68 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000602:	003b      	movs	r3, r7
 8000604:	2201      	movs	r2, #1
 8000606:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000608:	003b      	movs	r3, r7
 800060a:	2200      	movs	r2, #0
 800060c:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800060e:	003b      	movs	r3, r7
 8000610:	0018      	movs	r0, r3
 8000612:	f001 fb9b 	bl	8001d4c <HAL_RCCEx_PeriphCLKConfig>
 8000616:	1e03      	subs	r3, r0, #0
 8000618:	d001      	beq.n	800061e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800061a:	f000 faa5 	bl	8000b68 <Error_Handler>
  }
}
 800061e:	46c0      	nop			; (mov r8, r8)
 8000620:	46bd      	mov	sp, r7
 8000622:	b015      	add	sp, #84	; 0x54
 8000624:	bd90      	pop	{r4, r7, pc}
	...

08000628 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 800062c:	4b0f      	ldr	r3, [pc, #60]	; (800066c <MX_TIM17_Init+0x44>)
 800062e:	4a10      	ldr	r2, [pc, #64]	; (8000670 <MX_TIM17_Init+0x48>)
 8000630:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 10;
 8000632:	4b0e      	ldr	r3, [pc, #56]	; (800066c <MX_TIM17_Init+0x44>)
 8000634:	220a      	movs	r2, #10
 8000636:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000638:	4b0c      	ldr	r3, [pc, #48]	; (800066c <MX_TIM17_Init+0x44>)
 800063a:	2200      	movs	r2, #0
 800063c:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 4469;
 800063e:	4b0b      	ldr	r3, [pc, #44]	; (800066c <MX_TIM17_Init+0x44>)
 8000640:	4a0c      	ldr	r2, [pc, #48]	; (8000674 <MX_TIM17_Init+0x4c>)
 8000642:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000644:	4b09      	ldr	r3, [pc, #36]	; (800066c <MX_TIM17_Init+0x44>)
 8000646:	2200      	movs	r2, #0
 8000648:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 800064a:	4b08      	ldr	r3, [pc, #32]	; (800066c <MX_TIM17_Init+0x44>)
 800064c:	2200      	movs	r2, #0
 800064e:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000650:	4b06      	ldr	r3, [pc, #24]	; (800066c <MX_TIM17_Init+0x44>)
 8000652:	2280      	movs	r2, #128	; 0x80
 8000654:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000656:	4b05      	ldr	r3, [pc, #20]	; (800066c <MX_TIM17_Init+0x44>)
 8000658:	0018      	movs	r0, r3
 800065a:	f001 fc45 	bl	8001ee8 <HAL_TIM_Base_Init>
 800065e:	1e03      	subs	r3, r0, #0
 8000660:	d001      	beq.n	8000666 <MX_TIM17_Init+0x3e>
  {
    Error_Handler();
 8000662:	f000 fa81 	bl	8000b68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8000666:	46c0      	nop			; (mov r8, r8)
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}
 800066c:	2000002c 	.word	0x2000002c
 8000670:	40014800 	.word	0x40014800
 8000674:	00001175 	.word	0x00001175

08000678 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800067c:	4b14      	ldr	r3, [pc, #80]	; (80006d0 <MX_USART1_UART_Init+0x58>)
 800067e:	4a15      	ldr	r2, [pc, #84]	; (80006d4 <MX_USART1_UART_Init+0x5c>)
 8000680:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000682:	4b13      	ldr	r3, [pc, #76]	; (80006d0 <MX_USART1_UART_Init+0x58>)
 8000684:	2296      	movs	r2, #150	; 0x96
 8000686:	0192      	lsls	r2, r2, #6
 8000688:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800068a:	4b11      	ldr	r3, [pc, #68]	; (80006d0 <MX_USART1_UART_Init+0x58>)
 800068c:	2200      	movs	r2, #0
 800068e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000690:	4b0f      	ldr	r3, [pc, #60]	; (80006d0 <MX_USART1_UART_Init+0x58>)
 8000692:	2200      	movs	r2, #0
 8000694:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000696:	4b0e      	ldr	r3, [pc, #56]	; (80006d0 <MX_USART1_UART_Init+0x58>)
 8000698:	2200      	movs	r2, #0
 800069a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800069c:	4b0c      	ldr	r3, [pc, #48]	; (80006d0 <MX_USART1_UART_Init+0x58>)
 800069e:	220c      	movs	r2, #12
 80006a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006a2:	4b0b      	ldr	r3, [pc, #44]	; (80006d0 <MX_USART1_UART_Init+0x58>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006a8:	4b09      	ldr	r3, [pc, #36]	; (80006d0 <MX_USART1_UART_Init+0x58>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006ae:	4b08      	ldr	r3, [pc, #32]	; (80006d0 <MX_USART1_UART_Init+0x58>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006b4:	4b06      	ldr	r3, [pc, #24]	; (80006d0 <MX_USART1_UART_Init+0x58>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006ba:	4b05      	ldr	r3, [pc, #20]	; (80006d0 <MX_USART1_UART_Init+0x58>)
 80006bc:	0018      	movs	r0, r3
 80006be:	f001 fe5b 	bl	8002378 <HAL_UART_Init>
 80006c2:	1e03      	subs	r3, r0, #0
 80006c4:	d001      	beq.n	80006ca <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80006c6:	f000 fa4f 	bl	8000b68 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006ca:	46c0      	nop			; (mov r8, r8)
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	20000074 	.word	0x20000074
 80006d4:	40013800 	.word	0x40013800

080006d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006d8:	b590      	push	{r4, r7, lr}
 80006da:	b089      	sub	sp, #36	; 0x24
 80006dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006de:	240c      	movs	r4, #12
 80006e0:	193b      	adds	r3, r7, r4
 80006e2:	0018      	movs	r0, r3
 80006e4:	2314      	movs	r3, #20
 80006e6:	001a      	movs	r2, r3
 80006e8:	2100      	movs	r1, #0
 80006ea:	f003 f89b 	bl	8003824 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006ee:	4b35      	ldr	r3, [pc, #212]	; (80007c4 <MX_GPIO_Init+0xec>)
 80006f0:	695a      	ldr	r2, [r3, #20]
 80006f2:	4b34      	ldr	r3, [pc, #208]	; (80007c4 <MX_GPIO_Init+0xec>)
 80006f4:	2180      	movs	r1, #128	; 0x80
 80006f6:	03c9      	lsls	r1, r1, #15
 80006f8:	430a      	orrs	r2, r1
 80006fa:	615a      	str	r2, [r3, #20]
 80006fc:	4b31      	ldr	r3, [pc, #196]	; (80007c4 <MX_GPIO_Init+0xec>)
 80006fe:	695a      	ldr	r2, [r3, #20]
 8000700:	2380      	movs	r3, #128	; 0x80
 8000702:	03db      	lsls	r3, r3, #15
 8000704:	4013      	ands	r3, r2
 8000706:	60bb      	str	r3, [r7, #8]
 8000708:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800070a:	4b2e      	ldr	r3, [pc, #184]	; (80007c4 <MX_GPIO_Init+0xec>)
 800070c:	695a      	ldr	r2, [r3, #20]
 800070e:	4b2d      	ldr	r3, [pc, #180]	; (80007c4 <MX_GPIO_Init+0xec>)
 8000710:	2180      	movs	r1, #128	; 0x80
 8000712:	0289      	lsls	r1, r1, #10
 8000714:	430a      	orrs	r2, r1
 8000716:	615a      	str	r2, [r3, #20]
 8000718:	4b2a      	ldr	r3, [pc, #168]	; (80007c4 <MX_GPIO_Init+0xec>)
 800071a:	695a      	ldr	r2, [r3, #20]
 800071c:	2380      	movs	r3, #128	; 0x80
 800071e:	029b      	lsls	r3, r3, #10
 8000720:	4013      	ands	r3, r2
 8000722:	607b      	str	r3, [r7, #4]
 8000724:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000726:	4b27      	ldr	r3, [pc, #156]	; (80007c4 <MX_GPIO_Init+0xec>)
 8000728:	695a      	ldr	r2, [r3, #20]
 800072a:	4b26      	ldr	r3, [pc, #152]	; (80007c4 <MX_GPIO_Init+0xec>)
 800072c:	2180      	movs	r1, #128	; 0x80
 800072e:	02c9      	lsls	r1, r1, #11
 8000730:	430a      	orrs	r2, r1
 8000732:	615a      	str	r2, [r3, #20]
 8000734:	4b23      	ldr	r3, [pc, #140]	; (80007c4 <MX_GPIO_Init+0xec>)
 8000736:	695a      	ldr	r2, [r3, #20]
 8000738:	2380      	movs	r3, #128	; 0x80
 800073a:	02db      	lsls	r3, r3, #11
 800073c:	4013      	ands	r3, r2
 800073e:	603b      	str	r3, [r7, #0]
 8000740:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PWR_LED_GPIO_Port, PWR_LED_Pin, GPIO_PIN_RESET);
 8000742:	2380      	movs	r3, #128	; 0x80
 8000744:	00d9      	lsls	r1, r3, #3
 8000746:	2390      	movs	r3, #144	; 0x90
 8000748:	05db      	lsls	r3, r3, #23
 800074a:	2200      	movs	r2, #0
 800074c:	0018      	movs	r0, r3
 800074e:	f000 fe82 	bl	8001456 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BUTT_2_Pin BUTT_3_Pin BUTT_4_Pin BUTT_GEN_Pin */
  GPIO_InitStruct.Pin = BUTT_2_Pin|BUTT_3_Pin|BUTT_4_Pin|BUTT_GEN_Pin;
 8000752:	193b      	adds	r3, r7, r4
 8000754:	22b8      	movs	r2, #184	; 0xb8
 8000756:	0092      	lsls	r2, r2, #2
 8000758:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800075a:	193b      	adds	r3, r7, r4
 800075c:	2200      	movs	r2, #0
 800075e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000760:	193b      	adds	r3, r7, r4
 8000762:	2201      	movs	r2, #1
 8000764:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000766:	193a      	adds	r2, r7, r4
 8000768:	2390      	movs	r3, #144	; 0x90
 800076a:	05db      	lsls	r3, r3, #23
 800076c:	0011      	movs	r1, r2
 800076e:	0018      	movs	r0, r3
 8000770:	f000 fce4 	bl	800113c <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTT_1_Pin */
  GPIO_InitStruct.Pin = BUTT_1_Pin;
 8000774:	193b      	adds	r3, r7, r4
 8000776:	2202      	movs	r2, #2
 8000778:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800077a:	193b      	adds	r3, r7, r4
 800077c:	2200      	movs	r2, #0
 800077e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000780:	193b      	adds	r3, r7, r4
 8000782:	2201      	movs	r2, #1
 8000784:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BUTT_1_GPIO_Port, &GPIO_InitStruct);
 8000786:	193b      	adds	r3, r7, r4
 8000788:	4a0f      	ldr	r2, [pc, #60]	; (80007c8 <MX_GPIO_Init+0xf0>)
 800078a:	0019      	movs	r1, r3
 800078c:	0010      	movs	r0, r2
 800078e:	f000 fcd5 	bl	800113c <HAL_GPIO_Init>

  /*Configure GPIO pin : PWR_LED_Pin */
  GPIO_InitStruct.Pin = PWR_LED_Pin;
 8000792:	0021      	movs	r1, r4
 8000794:	187b      	adds	r3, r7, r1
 8000796:	2280      	movs	r2, #128	; 0x80
 8000798:	00d2      	lsls	r2, r2, #3
 800079a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800079c:	187b      	adds	r3, r7, r1
 800079e:	2201      	movs	r2, #1
 80007a0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a2:	187b      	adds	r3, r7, r1
 80007a4:	2200      	movs	r2, #0
 80007a6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a8:	187b      	adds	r3, r7, r1
 80007aa:	2200      	movs	r2, #0
 80007ac:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(PWR_LED_GPIO_Port, &GPIO_InitStruct);
 80007ae:	187a      	adds	r2, r7, r1
 80007b0:	2390      	movs	r3, #144	; 0x90
 80007b2:	05db      	lsls	r3, r3, #23
 80007b4:	0011      	movs	r1, r2
 80007b6:	0018      	movs	r0, r3
 80007b8:	f000 fcc0 	bl	800113c <HAL_GPIO_Init>

}
 80007bc:	46c0      	nop			; (mov r8, r8)
 80007be:	46bd      	mov	sp, r7
 80007c0:	b009      	add	sp, #36	; 0x24
 80007c2:	bd90      	pop	{r4, r7, pc}
 80007c4:	40021000 	.word	0x40021000
 80007c8:	48000400 	.word	0x48000400

080007cc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
					void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
					{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]

					if(prelltimer >0)
 80007d4:	4b79      	ldr	r3, [pc, #484]	; (80009bc <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	dd04      	ble.n	80007e6 <HAL_TIM_PeriodElapsedCallback+0x1a>
					{
						prelltimer--;
 80007dc:	4b77      	ldr	r3, [pc, #476]	; (80009bc <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	1e5a      	subs	r2, r3, #1
 80007e2:	4b76      	ldr	r3, [pc, #472]	; (80009bc <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 80007e4:	601a      	str	r2, [r3, #0]
					}
					if(villtimer >0)
 80007e6:	4b76      	ldr	r3, [pc, #472]	; (80009c0 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d035      	beq.n	800085a <HAL_TIM_PeriodElapsedCallback+0x8e>
					{
						villtimer--;
 80007ee:	4b74      	ldr	r3, [pc, #464]	; (80009c0 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	3b01      	subs	r3, #1
 80007f4:	b2da      	uxtb	r2, r3
 80007f6:	4b72      	ldr	r3, [pc, #456]	; (80009c0 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 80007f8:	701a      	strb	r2, [r3, #0]
						if(poweronflag == 1)
 80007fa:	4b72      	ldr	r3, [pc, #456]	; (80009c4 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	2b01      	cmp	r3, #1
 8000800:	d113      	bne.n	800082a <HAL_TIM_PeriodElapsedCallback+0x5e>
						{
							HAL_GPIO_WritePin(PWR_LED_GPIO_Port,PWR_LED_Pin,GPIO_PIN_RESET);//led off
 8000802:	2380      	movs	r3, #128	; 0x80
 8000804:	00d9      	lsls	r1, r3, #3
 8000806:	2390      	movs	r3, #144	; 0x90
 8000808:	05db      	lsls	r3, r3, #23
 800080a:	2200      	movs	r2, #0
 800080c:	0018      	movs	r0, r3
 800080e:	f000 fe22 	bl	8001456 <HAL_GPIO_WritePin>
							if(villtimer == 0)
 8000812:	4b6b      	ldr	r3, [pc, #428]	; (80009c0 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	2b00      	cmp	r3, #0
 8000818:	d107      	bne.n	800082a <HAL_TIM_PeriodElapsedCallback+0x5e>
							{
								HAL_GPIO_WritePin(PWR_LED_GPIO_Port,PWR_LED_Pin,GPIO_PIN_SET);//led on
 800081a:	2380      	movs	r3, #128	; 0x80
 800081c:	00d9      	lsls	r1, r3, #3
 800081e:	2390      	movs	r3, #144	; 0x90
 8000820:	05db      	lsls	r3, r3, #23
 8000822:	2201      	movs	r2, #1
 8000824:	0018      	movs	r0, r3
 8000826:	f000 fe16 	bl	8001456 <HAL_GPIO_WritePin>
							}
						}
						if(poweroffflag == 1)
 800082a:	4b67      	ldr	r3, [pc, #412]	; (80009c8 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 800082c:	781b      	ldrb	r3, [r3, #0]
 800082e:	2b01      	cmp	r3, #1
 8000830:	d113      	bne.n	800085a <HAL_TIM_PeriodElapsedCallback+0x8e>
						{
							HAL_GPIO_WritePin(PWR_LED_GPIO_Port,PWR_LED_Pin,GPIO_PIN_SET);//led on
 8000832:	2380      	movs	r3, #128	; 0x80
 8000834:	00d9      	lsls	r1, r3, #3
 8000836:	2390      	movs	r3, #144	; 0x90
 8000838:	05db      	lsls	r3, r3, #23
 800083a:	2201      	movs	r2, #1
 800083c:	0018      	movs	r0, r3
 800083e:	f000 fe0a 	bl	8001456 <HAL_GPIO_WritePin>
							if(villtimer == 0)
 8000842:	4b5f      	ldr	r3, [pc, #380]	; (80009c0 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	2b00      	cmp	r3, #0
 8000848:	d107      	bne.n	800085a <HAL_TIM_PeriodElapsedCallback+0x8e>
							{
								HAL_GPIO_WritePin(PWR_LED_GPIO_Port,PWR_LED_Pin,GPIO_PIN_RESET);//led off
 800084a:	2380      	movs	r3, #128	; 0x80
 800084c:	00d9      	lsls	r1, r3, #3
 800084e:	2390      	movs	r3, #144	; 0x90
 8000850:	05db      	lsls	r3, r3, #23
 8000852:	2200      	movs	r2, #0
 8000854:	0018      	movs	r0, r3
 8000856:	f000 fdfe 	bl	8001456 <HAL_GPIO_WritePin>
							}
						}
					}
					if(actgomb[0] == 0)
 800085a:	4b5c      	ldr	r3, [pc, #368]	; (80009cc <HAL_TIM_PeriodElapsedCallback+0x200>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	2b00      	cmp	r3, #0
 8000860:	d129      	bne.n	80008b6 <HAL_TIM_PeriodElapsedCallback+0xea>
					{
						gomb0hosszutime++;
 8000862:	4b5b      	ldr	r3, [pc, #364]	; (80009d0 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	1c5a      	adds	r2, r3, #1
 8000868:	4b59      	ldr	r3, [pc, #356]	; (80009d0 <HAL_TIM_PeriodElapsedCallback+0x204>)
 800086a:	601a      	str	r2, [r3, #0]
						if(gomb0hosszutime > 3000)
 800086c:	4b58      	ldr	r3, [pc, #352]	; (80009d0 <HAL_TIM_PeriodElapsedCallback+0x204>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4a58      	ldr	r2, [pc, #352]	; (80009d4 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8000872:	4293      	cmp	r3, r2
 8000874:	dd18      	ble.n	80008a8 <HAL_TIM_PeriodElapsedCallback+0xdc>
						{
							HAL_UART_Transmit(&huart1,pwron,6,100);
 8000876:	4958      	ldr	r1, [pc, #352]	; (80009d8 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8000878:	4858      	ldr	r0, [pc, #352]	; (80009dc <HAL_TIM_PeriodElapsedCallback+0x210>)
 800087a:	2364      	movs	r3, #100	; 0x64
 800087c:	2206      	movs	r2, #6
 800087e:	f001 fdcf 	bl	8002420 <HAL_UART_Transmit>
							pwrtime = 100;
 8000882:	4b57      	ldr	r3, [pc, #348]	; (80009e0 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8000884:	2264      	movs	r2, #100	; 0x64
 8000886:	601a      	str	r2, [r3, #0]
							poweronflag = 1;
 8000888:	4b4e      	ldr	r3, [pc, #312]	; (80009c4 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 800088a:	2201      	movs	r2, #1
 800088c:	701a      	strb	r2, [r3, #0]
							poweroffflag = 0;
 800088e:	4b4e      	ldr	r3, [pc, #312]	; (80009c8 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8000890:	2200      	movs	r2, #0
 8000892:	701a      	strb	r2, [r3, #0]
							gomb0hosszutime = 0;
 8000894:	4b4e      	ldr	r3, [pc, #312]	; (80009d0 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8000896:	2200      	movs	r2, #0
 8000898:	601a      	str	r2, [r3, #0]
							HAL_UART_Transmit(&huart1,powerinquiry,5,100);
 800089a:	4952      	ldr	r1, [pc, #328]	; (80009e4 <HAL_TIM_PeriodElapsedCallback+0x218>)
 800089c:	484f      	ldr	r0, [pc, #316]	; (80009dc <HAL_TIM_PeriodElapsedCallback+0x210>)
 800089e:	2364      	movs	r3, #100	; 0x64
 80008a0:	2205      	movs	r2, #5
 80008a2:	f001 fdbd 	bl	8002420 <HAL_UART_Transmit>
 80008a6:	e006      	b.n	80008b6 <HAL_TIM_PeriodElapsedCallback+0xea>
						}
						else if(actgomb[0] == 1)
 80008a8:	4b48      	ldr	r3, [pc, #288]	; (80009cc <HAL_TIM_PeriodElapsedCallback+0x200>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	2b01      	cmp	r3, #1
 80008ae:	d102      	bne.n	80008b6 <HAL_TIM_PeriodElapsedCallback+0xea>
						{
							gomb0hosszutime = 0;
 80008b0:	4b47      	ldr	r3, [pc, #284]	; (80009d0 <HAL_TIM_PeriodElapsedCallback+0x204>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	601a      	str	r2, [r3, #0]
						}
					}

					if(actgomb[0] == 1)
 80008b6:	4b45      	ldr	r3, [pc, #276]	; (80009cc <HAL_TIM_PeriodElapsedCallback+0x200>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	2b01      	cmp	r3, #1
 80008bc:	d113      	bne.n	80008e6 <HAL_TIM_PeriodElapsedCallback+0x11a>
					{
						if(gomb0hosszutime >0)
 80008be:	4b44      	ldr	r3, [pc, #272]	; (80009d0 <HAL_TIM_PeriodElapsedCallback+0x204>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	dd05      	ble.n	80008d2 <HAL_TIM_PeriodElapsedCallback+0x106>
						{
							gomb0prell++;
 80008c6:	4b48      	ldr	r3, [pc, #288]	; (80009e8 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	3301      	adds	r3, #1
 80008cc:	b2da      	uxtb	r2, r3
 80008ce:	4b46      	ldr	r3, [pc, #280]	; (80009e8 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 80008d0:	701a      	strb	r2, [r3, #0]
						}
						if(gomb0prell >50)
 80008d2:	4b45      	ldr	r3, [pc, #276]	; (80009e8 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 80008d4:	781b      	ldrb	r3, [r3, #0]
 80008d6:	2b32      	cmp	r3, #50	; 0x32
 80008d8:	d905      	bls.n	80008e6 <HAL_TIM_PeriodElapsedCallback+0x11a>
						{
							gomb0hosszutime = 0;
 80008da:	4b3d      	ldr	r3, [pc, #244]	; (80009d0 <HAL_TIM_PeriodElapsedCallback+0x204>)
 80008dc:	2200      	movs	r2, #0
 80008de:	601a      	str	r2, [r3, #0]
							gomb0prell = 0;
 80008e0:	4b41      	ldr	r3, [pc, #260]	; (80009e8 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	701a      	strb	r2, [r3, #0]
						}

					}
					if(actgomb[3] == 0)
 80008e6:	4b39      	ldr	r3, [pc, #228]	; (80009cc <HAL_TIM_PeriodElapsedCallback+0x200>)
 80008e8:	68db      	ldr	r3, [r3, #12]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d12a      	bne.n	8000944 <HAL_TIM_PeriodElapsedCallback+0x178>
					{
						gomb4hosszutime++;
 80008ee:	4b3f      	ldr	r3, [pc, #252]	; (80009ec <HAL_TIM_PeriodElapsedCallback+0x220>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	1c5a      	adds	r2, r3, #1
 80008f4:	4b3d      	ldr	r3, [pc, #244]	; (80009ec <HAL_TIM_PeriodElapsedCallback+0x220>)
 80008f6:	601a      	str	r2, [r3, #0]
						if(gomb4hosszutime > 3000)
 80008f8:	4b3c      	ldr	r3, [pc, #240]	; (80009ec <HAL_TIM_PeriodElapsedCallback+0x220>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4a35      	ldr	r2, [pc, #212]	; (80009d4 <HAL_TIM_PeriodElapsedCallback+0x208>)
 80008fe:	4293      	cmp	r3, r2
 8000900:	dd19      	ble.n	8000936 <HAL_TIM_PeriodElapsedCallback+0x16a>
						{
							HAL_UART_Transmit(&huart1,pwroff,6,100);
 8000902:	493b      	ldr	r1, [pc, #236]	; (80009f0 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8000904:	4835      	ldr	r0, [pc, #212]	; (80009dc <HAL_TIM_PeriodElapsedCallback+0x210>)
 8000906:	2364      	movs	r3, #100	; 0x64
 8000908:	2206      	movs	r2, #6
 800090a:	f001 fd89 	bl	8002420 <HAL_UART_Transmit>
							pwrtime = 300;
 800090e:	4b34      	ldr	r3, [pc, #208]	; (80009e0 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8000910:	2296      	movs	r2, #150	; 0x96
 8000912:	0052      	lsls	r2, r2, #1
 8000914:	601a      	str	r2, [r3, #0]
							poweronflag = 0;
 8000916:	4b2b      	ldr	r3, [pc, #172]	; (80009c4 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8000918:	2200      	movs	r2, #0
 800091a:	701a      	strb	r2, [r3, #0]
							poweroffflag = 1;
 800091c:	4b2a      	ldr	r3, [pc, #168]	; (80009c8 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 800091e:	2201      	movs	r2, #1
 8000920:	701a      	strb	r2, [r3, #0]
							gomb4hosszutime = 0;
 8000922:	4b32      	ldr	r3, [pc, #200]	; (80009ec <HAL_TIM_PeriodElapsedCallback+0x220>)
 8000924:	2200      	movs	r2, #0
 8000926:	601a      	str	r2, [r3, #0]
							HAL_UART_Transmit(&huart1,powerinquiry,5,100);
 8000928:	492e      	ldr	r1, [pc, #184]	; (80009e4 <HAL_TIM_PeriodElapsedCallback+0x218>)
 800092a:	482c      	ldr	r0, [pc, #176]	; (80009dc <HAL_TIM_PeriodElapsedCallback+0x210>)
 800092c:	2364      	movs	r3, #100	; 0x64
 800092e:	2205      	movs	r2, #5
 8000930:	f001 fd76 	bl	8002420 <HAL_UART_Transmit>
 8000934:	e006      	b.n	8000944 <HAL_TIM_PeriodElapsedCallback+0x178>
						}
						else if(actgomb[3] == 1)
 8000936:	4b25      	ldr	r3, [pc, #148]	; (80009cc <HAL_TIM_PeriodElapsedCallback+0x200>)
 8000938:	68db      	ldr	r3, [r3, #12]
 800093a:	2b01      	cmp	r3, #1
 800093c:	d102      	bne.n	8000944 <HAL_TIM_PeriodElapsedCallback+0x178>
						{
							gomb4hosszutime = 0;
 800093e:	4b2b      	ldr	r3, [pc, #172]	; (80009ec <HAL_TIM_PeriodElapsedCallback+0x220>)
 8000940:	2200      	movs	r2, #0
 8000942:	601a      	str	r2, [r3, #0]
						}
					}
					if(actgomb[3] == 1)
 8000944:	4b21      	ldr	r3, [pc, #132]	; (80009cc <HAL_TIM_PeriodElapsedCallback+0x200>)
 8000946:	68db      	ldr	r3, [r3, #12]
 8000948:	2b01      	cmp	r3, #1
 800094a:	d113      	bne.n	8000974 <HAL_TIM_PeriodElapsedCallback+0x1a8>
					{
							if(gomb4hosszutime >0)
 800094c:	4b27      	ldr	r3, [pc, #156]	; (80009ec <HAL_TIM_PeriodElapsedCallback+0x220>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	2b00      	cmp	r3, #0
 8000952:	dd05      	ble.n	8000960 <HAL_TIM_PeriodElapsedCallback+0x194>
						{
							gomb3prell++;
 8000954:	4b27      	ldr	r3, [pc, #156]	; (80009f4 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	3301      	adds	r3, #1
 800095a:	b2da      	uxtb	r2, r3
 800095c:	4b25      	ldr	r3, [pc, #148]	; (80009f4 <HAL_TIM_PeriodElapsedCallback+0x228>)
 800095e:	701a      	strb	r2, [r3, #0]
						}
						if(gomb3prell >50)
 8000960:	4b24      	ldr	r3, [pc, #144]	; (80009f4 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	2b32      	cmp	r3, #50	; 0x32
 8000966:	d905      	bls.n	8000974 <HAL_TIM_PeriodElapsedCallback+0x1a8>
						{
							gomb4hosszutime = 0;
 8000968:	4b20      	ldr	r3, [pc, #128]	; (80009ec <HAL_TIM_PeriodElapsedCallback+0x220>)
 800096a:	2200      	movs	r2, #0
 800096c:	601a      	str	r2, [r3, #0]
							gomb3prell = 0;
 800096e:	4b21      	ldr	r3, [pc, #132]	; (80009f4 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8000970:	2200      	movs	r2, #0
 8000972:	701a      	strb	r2, [r3, #0]
						}
					}

					if(pwrtime >0)
 8000974:	4b1a      	ldr	r3, [pc, #104]	; (80009e0 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	2b00      	cmp	r3, #0
 800097a:	dd1a      	ble.n	80009b2 <HAL_TIM_PeriodElapsedCallback+0x1e6>
					{
						pwrtime--;
 800097c:	4b18      	ldr	r3, [pc, #96]	; (80009e0 <HAL_TIM_PeriodElapsedCallback+0x214>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	1e5a      	subs	r2, r3, #1
 8000982:	4b17      	ldr	r3, [pc, #92]	; (80009e0 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8000984:	601a      	str	r2, [r3, #0]
						if((pwrtime == 0)||(pwrtime == 99)||(pwrtime == 150)||(pwrtime == 250))
 8000986:	4b16      	ldr	r3, [pc, #88]	; (80009e0 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	2b00      	cmp	r3, #0
 800098c:	d00b      	beq.n	80009a6 <HAL_TIM_PeriodElapsedCallback+0x1da>
 800098e:	4b14      	ldr	r3, [pc, #80]	; (80009e0 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	2b63      	cmp	r3, #99	; 0x63
 8000994:	d007      	beq.n	80009a6 <HAL_TIM_PeriodElapsedCallback+0x1da>
 8000996:	4b12      	ldr	r3, [pc, #72]	; (80009e0 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	2b96      	cmp	r3, #150	; 0x96
 800099c:	d003      	beq.n	80009a6 <HAL_TIM_PeriodElapsedCallback+0x1da>
 800099e:	4b10      	ldr	r3, [pc, #64]	; (80009e0 <HAL_TIM_PeriodElapsedCallback+0x214>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	2bfa      	cmp	r3, #250	; 0xfa
 80009a4:	d105      	bne.n	80009b2 <HAL_TIM_PeriodElapsedCallback+0x1e6>
						{
							HAL_UART_Transmit(&huart1,powerinquiry,5,100);
 80009a6:	490f      	ldr	r1, [pc, #60]	; (80009e4 <HAL_TIM_PeriodElapsedCallback+0x218>)
 80009a8:	480c      	ldr	r0, [pc, #48]	; (80009dc <HAL_TIM_PeriodElapsedCallback+0x210>)
 80009aa:	2364      	movs	r3, #100	; 0x64
 80009ac:	2205      	movs	r2, #5
 80009ae:	f001 fd37 	bl	8002420 <HAL_UART_Transmit>
						}
					}

					}
 80009b2:	46c0      	nop			; (mov r8, r8)
 80009b4:	46bd      	mov	sp, r7
 80009b6:	b002      	add	sp, #8
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	46c0      	nop			; (mov r8, r8)
 80009bc:	20000124 	.word	0x20000124
 80009c0:	20000146 	.word	0x20000146
 80009c4:	20000144 	.word	0x20000144
 80009c8:	20000145 	.word	0x20000145
 80009cc:	200000fc 	.word	0x200000fc
 80009d0:	20000148 	.word	0x20000148
 80009d4:	00000bb8 	.word	0x00000bb8
 80009d8:	0800384c 	.word	0x0800384c
 80009dc:	20000074 	.word	0x20000074
 80009e0:	20000150 	.word	0x20000150
 80009e4:	0800387c 	.word	0x0800387c
 80009e8:	20000128 	.word	0x20000128
 80009ec:	2000014c 	.word	0x2000014c
 80009f0:	08003854 	.word	0x08003854
 80009f4:	20000129 	.word	0x20000129

080009f8 <HAL_UART_RxCpltCallback>:

					void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
					{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
						uartbuff[uartcount] = uartbuf;
 8000a00:	4b50      	ldr	r3, [pc, #320]	; (8000b44 <HAL_UART_RxCpltCallback+0x14c>)
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	001a      	movs	r2, r3
 8000a06:	4b50      	ldr	r3, [pc, #320]	; (8000b48 <HAL_UART_RxCpltCallback+0x150>)
 8000a08:	7819      	ldrb	r1, [r3, #0]
 8000a0a:	4b50      	ldr	r3, [pc, #320]	; (8000b4c <HAL_UART_RxCpltCallback+0x154>)
 8000a0c:	5499      	strb	r1, [r3, r2]
						uartcount++;
 8000a0e:	4b4d      	ldr	r3, [pc, #308]	; (8000b44 <HAL_UART_RxCpltCallback+0x14c>)
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	3301      	adds	r3, #1
 8000a14:	b2da      	uxtb	r2, r3
 8000a16:	4b4b      	ldr	r3, [pc, #300]	; (8000b44 <HAL_UART_RxCpltCallback+0x14c>)
 8000a18:	701a      	strb	r2, [r3, #0]
						if(uartcount > 5)
 8000a1a:	4b4a      	ldr	r3, [pc, #296]	; (8000b44 <HAL_UART_RxCpltCallback+0x14c>)
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	2b05      	cmp	r3, #5
 8000a20:	d908      	bls.n	8000a34 <HAL_UART_RxCpltCallback+0x3c>
						{
							uartcount = 0;
 8000a22:	4b48      	ldr	r3, [pc, #288]	; (8000b44 <HAL_UART_RxCpltCallback+0x14c>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	701a      	strb	r2, [r3, #0]
							memset(uartbuff,0,10);
 8000a28:	4b48      	ldr	r3, [pc, #288]	; (8000b4c <HAL_UART_RxCpltCallback+0x154>)
 8000a2a:	220a      	movs	r2, #10
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	0018      	movs	r0, r3
 8000a30:	f002 fef8 	bl	8003824 <memset>
						}

						if((uartbuff[0] == 0x90)&&(uartbuff[1] == 0x41)&&(uartbuff[2] == 0xFF))
 8000a34:	4b45      	ldr	r3, [pc, #276]	; (8000b4c <HAL_UART_RxCpltCallback+0x154>)
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	2b90      	cmp	r3, #144	; 0x90
 8000a3a:	d117      	bne.n	8000a6c <HAL_UART_RxCpltCallback+0x74>
 8000a3c:	4b43      	ldr	r3, [pc, #268]	; (8000b4c <HAL_UART_RxCpltCallback+0x154>)
 8000a3e:	785b      	ldrb	r3, [r3, #1]
 8000a40:	2b41      	cmp	r3, #65	; 0x41
 8000a42:	d113      	bne.n	8000a6c <HAL_UART_RxCpltCallback+0x74>
 8000a44:	4b41      	ldr	r3, [pc, #260]	; (8000b4c <HAL_UART_RxCpltCallback+0x154>)
 8000a46:	789b      	ldrb	r3, [r3, #2]
 8000a48:	2bff      	cmp	r3, #255	; 0xff
 8000a4a:	d10f      	bne.n	8000a6c <HAL_UART_RxCpltCallback+0x74>
						{
							villtimer = 200;
 8000a4c:	4b40      	ldr	r3, [pc, #256]	; (8000b50 <HAL_UART_RxCpltCallback+0x158>)
 8000a4e:	22c8      	movs	r2, #200	; 0xc8
 8000a50:	701a      	strb	r2, [r3, #0]
							uartcount = 0;
 8000a52:	4b3c      	ldr	r3, [pc, #240]	; (8000b44 <HAL_UART_RxCpltCallback+0x14c>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	701a      	strb	r2, [r3, #0]
							ackflag = 1;
 8000a58:	4b3e      	ldr	r3, [pc, #248]	; (8000b54 <HAL_UART_RxCpltCallback+0x15c>)
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	701a      	strb	r2, [r3, #0]
							memset(uartbuff,0,10);
 8000a5e:	4b3b      	ldr	r3, [pc, #236]	; (8000b4c <HAL_UART_RxCpltCallback+0x154>)
 8000a60:	220a      	movs	r2, #10
 8000a62:	2100      	movs	r1, #0
 8000a64:	0018      	movs	r0, r3
 8000a66:	f002 fedd 	bl	8003824 <memset>
 8000a6a:	e060      	b.n	8000b2e <HAL_UART_RxCpltCallback+0x136>
						}else if((uartbuff[0] == 0x90)&&(uartbuff[1] == 0x51)&&(uartbuff[2] == 0xFF))
 8000a6c:	4b37      	ldr	r3, [pc, #220]	; (8000b4c <HAL_UART_RxCpltCallback+0x154>)
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	2b90      	cmp	r3, #144	; 0x90
 8000a72:	d117      	bne.n	8000aa4 <HAL_UART_RxCpltCallback+0xac>
 8000a74:	4b35      	ldr	r3, [pc, #212]	; (8000b4c <HAL_UART_RxCpltCallback+0x154>)
 8000a76:	785b      	ldrb	r3, [r3, #1]
 8000a78:	2b51      	cmp	r3, #81	; 0x51
 8000a7a:	d113      	bne.n	8000aa4 <HAL_UART_RxCpltCallback+0xac>
 8000a7c:	4b33      	ldr	r3, [pc, #204]	; (8000b4c <HAL_UART_RxCpltCallback+0x154>)
 8000a7e:	789b      	ldrb	r3, [r3, #2]
 8000a80:	2bff      	cmp	r3, #255	; 0xff
 8000a82:	d10f      	bne.n	8000aa4 <HAL_UART_RxCpltCallback+0xac>
						{
							villtimer = 200;
 8000a84:	4b32      	ldr	r3, [pc, #200]	; (8000b50 <HAL_UART_RxCpltCallback+0x158>)
 8000a86:	22c8      	movs	r2, #200	; 0xc8
 8000a88:	701a      	strb	r2, [r3, #0]
							uartcount = 0;
 8000a8a:	4b2e      	ldr	r3, [pc, #184]	; (8000b44 <HAL_UART_RxCpltCallback+0x14c>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	701a      	strb	r2, [r3, #0]
							cpltflag = 1;
 8000a90:	4b31      	ldr	r3, [pc, #196]	; (8000b58 <HAL_UART_RxCpltCallback+0x160>)
 8000a92:	2201      	movs	r2, #1
 8000a94:	701a      	strb	r2, [r3, #0]
							memset(uartbuff,0,10);
 8000a96:	4b2d      	ldr	r3, [pc, #180]	; (8000b4c <HAL_UART_RxCpltCallback+0x154>)
 8000a98:	220a      	movs	r2, #10
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	0018      	movs	r0, r3
 8000a9e:	f002 fec1 	bl	8003824 <memset>
 8000aa2:	e044      	b.n	8000b2e <HAL_UART_RxCpltCallback+0x136>
						}
						else if((uartbuff[0] == 0x90)&&(uartbuff[1] == 0x50)&&(uartbuff[2] == 0x02)&&(uartbuff[3] == 0xFF))//pwr on
 8000aa4:	4b29      	ldr	r3, [pc, #164]	; (8000b4c <HAL_UART_RxCpltCallback+0x154>)
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	2b90      	cmp	r3, #144	; 0x90
 8000aaa:	d11e      	bne.n	8000aea <HAL_UART_RxCpltCallback+0xf2>
 8000aac:	4b27      	ldr	r3, [pc, #156]	; (8000b4c <HAL_UART_RxCpltCallback+0x154>)
 8000aae:	785b      	ldrb	r3, [r3, #1]
 8000ab0:	2b50      	cmp	r3, #80	; 0x50
 8000ab2:	d11a      	bne.n	8000aea <HAL_UART_RxCpltCallback+0xf2>
 8000ab4:	4b25      	ldr	r3, [pc, #148]	; (8000b4c <HAL_UART_RxCpltCallback+0x154>)
 8000ab6:	789b      	ldrb	r3, [r3, #2]
 8000ab8:	2b02      	cmp	r3, #2
 8000aba:	d116      	bne.n	8000aea <HAL_UART_RxCpltCallback+0xf2>
 8000abc:	4b23      	ldr	r3, [pc, #140]	; (8000b4c <HAL_UART_RxCpltCallback+0x154>)
 8000abe:	78db      	ldrb	r3, [r3, #3]
 8000ac0:	2bff      	cmp	r3, #255	; 0xff
 8000ac2:	d112      	bne.n	8000aea <HAL_UART_RxCpltCallback+0xf2>
						{
							villtimer = 200;
 8000ac4:	4b22      	ldr	r3, [pc, #136]	; (8000b50 <HAL_UART_RxCpltCallback+0x158>)
 8000ac6:	22c8      	movs	r2, #200	; 0xc8
 8000ac8:	701a      	strb	r2, [r3, #0]
							uartcount = 0;
 8000aca:	4b1e      	ldr	r3, [pc, #120]	; (8000b44 <HAL_UART_RxCpltCallback+0x14c>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	701a      	strb	r2, [r3, #0]
							poweronflag = 1;
 8000ad0:	4b22      	ldr	r3, [pc, #136]	; (8000b5c <HAL_UART_RxCpltCallback+0x164>)
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	701a      	strb	r2, [r3, #0]
							poweroffflag = 0;
 8000ad6:	4b22      	ldr	r3, [pc, #136]	; (8000b60 <HAL_UART_RxCpltCallback+0x168>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	701a      	strb	r2, [r3, #0]
							memset(uartbuff,0,10);
 8000adc:	4b1b      	ldr	r3, [pc, #108]	; (8000b4c <HAL_UART_RxCpltCallback+0x154>)
 8000ade:	220a      	movs	r2, #10
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	0018      	movs	r0, r3
 8000ae4:	f002 fe9e 	bl	8003824 <memset>
 8000ae8:	e021      	b.n	8000b2e <HAL_UART_RxCpltCallback+0x136>
						}else if((uartbuff[0] == 0x90)&&(uartbuff[1] == 0x50)&&(uartbuff[2] == 0x03)&&(uartbuff[3] == 0xFF))//pwr off
 8000aea:	4b18      	ldr	r3, [pc, #96]	; (8000b4c <HAL_UART_RxCpltCallback+0x154>)
 8000aec:	781b      	ldrb	r3, [r3, #0]
 8000aee:	2b90      	cmp	r3, #144	; 0x90
 8000af0:	d11d      	bne.n	8000b2e <HAL_UART_RxCpltCallback+0x136>
 8000af2:	4b16      	ldr	r3, [pc, #88]	; (8000b4c <HAL_UART_RxCpltCallback+0x154>)
 8000af4:	785b      	ldrb	r3, [r3, #1]
 8000af6:	2b50      	cmp	r3, #80	; 0x50
 8000af8:	d119      	bne.n	8000b2e <HAL_UART_RxCpltCallback+0x136>
 8000afa:	4b14      	ldr	r3, [pc, #80]	; (8000b4c <HAL_UART_RxCpltCallback+0x154>)
 8000afc:	789b      	ldrb	r3, [r3, #2]
 8000afe:	2b03      	cmp	r3, #3
 8000b00:	d115      	bne.n	8000b2e <HAL_UART_RxCpltCallback+0x136>
 8000b02:	4b12      	ldr	r3, [pc, #72]	; (8000b4c <HAL_UART_RxCpltCallback+0x154>)
 8000b04:	78db      	ldrb	r3, [r3, #3]
 8000b06:	2bff      	cmp	r3, #255	; 0xff
 8000b08:	d111      	bne.n	8000b2e <HAL_UART_RxCpltCallback+0x136>
						{
							villtimer = 200;
 8000b0a:	4b11      	ldr	r3, [pc, #68]	; (8000b50 <HAL_UART_RxCpltCallback+0x158>)
 8000b0c:	22c8      	movs	r2, #200	; 0xc8
 8000b0e:	701a      	strb	r2, [r3, #0]
							uartcount = 0;
 8000b10:	4b0c      	ldr	r3, [pc, #48]	; (8000b44 <HAL_UART_RxCpltCallback+0x14c>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	701a      	strb	r2, [r3, #0]
							poweroffflag = 1;
 8000b16:	4b12      	ldr	r3, [pc, #72]	; (8000b60 <HAL_UART_RxCpltCallback+0x168>)
 8000b18:	2201      	movs	r2, #1
 8000b1a:	701a      	strb	r2, [r3, #0]
							poweronflag = 0;
 8000b1c:	4b0f      	ldr	r3, [pc, #60]	; (8000b5c <HAL_UART_RxCpltCallback+0x164>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	701a      	strb	r2, [r3, #0]
							memset(uartbuff,0,10);
 8000b22:	4b0a      	ldr	r3, [pc, #40]	; (8000b4c <HAL_UART_RxCpltCallback+0x154>)
 8000b24:	220a      	movs	r2, #10
 8000b26:	2100      	movs	r1, #0
 8000b28:	0018      	movs	r0, r3
 8000b2a:	f002 fe7b 	bl	8003824 <memset>
						}
						HAL_UART_Receive_IT(&huart1,&uartbuf,1);
 8000b2e:	4906      	ldr	r1, [pc, #24]	; (8000b48 <HAL_UART_RxCpltCallback+0x150>)
 8000b30:	4b0c      	ldr	r3, [pc, #48]	; (8000b64 <HAL_UART_RxCpltCallback+0x16c>)
 8000b32:	2201      	movs	r2, #1
 8000b34:	0018      	movs	r0, r3
 8000b36:	f001 fd13 	bl	8002560 <HAL_UART_Receive_IT>
					}
 8000b3a:	46c0      	nop			; (mov r8, r8)
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	b002      	add	sp, #8
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	46c0      	nop			; (mov r8, r8)
 8000b44:	20000141 	.word	0x20000141
 8000b48:	20000140 	.word	0x20000140
 8000b4c:	2000012c 	.word	0x2000012c
 8000b50:	20000146 	.word	0x20000146
 8000b54:	20000142 	.word	0x20000142
 8000b58:	20000143 	.word	0x20000143
 8000b5c:	20000144 	.word	0x20000144
 8000b60:	20000145 	.word	0x20000145
 8000b64:	20000074 	.word	0x20000074

08000b68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
						/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000b6c:	46c0      	nop			; (mov r8, r8)
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
	...

08000b74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b7a:	4b0f      	ldr	r3, [pc, #60]	; (8000bb8 <HAL_MspInit+0x44>)
 8000b7c:	699a      	ldr	r2, [r3, #24]
 8000b7e:	4b0e      	ldr	r3, [pc, #56]	; (8000bb8 <HAL_MspInit+0x44>)
 8000b80:	2101      	movs	r1, #1
 8000b82:	430a      	orrs	r2, r1
 8000b84:	619a      	str	r2, [r3, #24]
 8000b86:	4b0c      	ldr	r3, [pc, #48]	; (8000bb8 <HAL_MspInit+0x44>)
 8000b88:	699b      	ldr	r3, [r3, #24]
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	4013      	ands	r3, r2
 8000b8e:	607b      	str	r3, [r7, #4]
 8000b90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b92:	4b09      	ldr	r3, [pc, #36]	; (8000bb8 <HAL_MspInit+0x44>)
 8000b94:	69da      	ldr	r2, [r3, #28]
 8000b96:	4b08      	ldr	r3, [pc, #32]	; (8000bb8 <HAL_MspInit+0x44>)
 8000b98:	2180      	movs	r1, #128	; 0x80
 8000b9a:	0549      	lsls	r1, r1, #21
 8000b9c:	430a      	orrs	r2, r1
 8000b9e:	61da      	str	r2, [r3, #28]
 8000ba0:	4b05      	ldr	r3, [pc, #20]	; (8000bb8 <HAL_MspInit+0x44>)
 8000ba2:	69da      	ldr	r2, [r3, #28]
 8000ba4:	2380      	movs	r3, #128	; 0x80
 8000ba6:	055b      	lsls	r3, r3, #21
 8000ba8:	4013      	ands	r3, r2
 8000baa:	603b      	str	r3, [r7, #0]
 8000bac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bae:	46c0      	nop			; (mov r8, r8)
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	b002      	add	sp, #8
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	46c0      	nop			; (mov r8, r8)
 8000bb8:	40021000 	.word	0x40021000

08000bbc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b084      	sub	sp, #16
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a0e      	ldr	r2, [pc, #56]	; (8000c04 <HAL_TIM_Base_MspInit+0x48>)
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	d115      	bne.n	8000bfa <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 8000bce:	4b0e      	ldr	r3, [pc, #56]	; (8000c08 <HAL_TIM_Base_MspInit+0x4c>)
 8000bd0:	699a      	ldr	r2, [r3, #24]
 8000bd2:	4b0d      	ldr	r3, [pc, #52]	; (8000c08 <HAL_TIM_Base_MspInit+0x4c>)
 8000bd4:	2180      	movs	r1, #128	; 0x80
 8000bd6:	02c9      	lsls	r1, r1, #11
 8000bd8:	430a      	orrs	r2, r1
 8000bda:	619a      	str	r2, [r3, #24]
 8000bdc:	4b0a      	ldr	r3, [pc, #40]	; (8000c08 <HAL_TIM_Base_MspInit+0x4c>)
 8000bde:	699a      	ldr	r2, [r3, #24]
 8000be0:	2380      	movs	r3, #128	; 0x80
 8000be2:	02db      	lsls	r3, r3, #11
 8000be4:	4013      	ands	r3, r2
 8000be6:	60fb      	str	r3, [r7, #12]
 8000be8:	68fb      	ldr	r3, [r7, #12]
    /* TIM17 interrupt Init */
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8000bea:	2200      	movs	r2, #0
 8000bec:	2100      	movs	r1, #0
 8000bee:	2016      	movs	r0, #22
 8000bf0:	f000 f9f4 	bl	8000fdc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8000bf4:	2016      	movs	r0, #22
 8000bf6:	f000 fa06 	bl	8001006 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8000bfa:	46c0      	nop			; (mov r8, r8)
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	b004      	add	sp, #16
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	46c0      	nop			; (mov r8, r8)
 8000c04:	40014800 	.word	0x40014800
 8000c08:	40021000 	.word	0x40021000

08000c0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c0c:	b590      	push	{r4, r7, lr}
 8000c0e:	b08b      	sub	sp, #44	; 0x2c
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c14:	2414      	movs	r4, #20
 8000c16:	193b      	adds	r3, r7, r4
 8000c18:	0018      	movs	r0, r3
 8000c1a:	2314      	movs	r3, #20
 8000c1c:	001a      	movs	r2, r3
 8000c1e:	2100      	movs	r1, #0
 8000c20:	f002 fe00 	bl	8003824 <memset>
  if(huart->Instance==USART1)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a20      	ldr	r2, [pc, #128]	; (8000cac <HAL_UART_MspInit+0xa0>)
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	d13a      	bne.n	8000ca4 <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c2e:	4b20      	ldr	r3, [pc, #128]	; (8000cb0 <HAL_UART_MspInit+0xa4>)
 8000c30:	699a      	ldr	r2, [r3, #24]
 8000c32:	4b1f      	ldr	r3, [pc, #124]	; (8000cb0 <HAL_UART_MspInit+0xa4>)
 8000c34:	2180      	movs	r1, #128	; 0x80
 8000c36:	01c9      	lsls	r1, r1, #7
 8000c38:	430a      	orrs	r2, r1
 8000c3a:	619a      	str	r2, [r3, #24]
 8000c3c:	4b1c      	ldr	r3, [pc, #112]	; (8000cb0 <HAL_UART_MspInit+0xa4>)
 8000c3e:	699a      	ldr	r2, [r3, #24]
 8000c40:	2380      	movs	r3, #128	; 0x80
 8000c42:	01db      	lsls	r3, r3, #7
 8000c44:	4013      	ands	r3, r2
 8000c46:	613b      	str	r3, [r7, #16]
 8000c48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c4a:	4b19      	ldr	r3, [pc, #100]	; (8000cb0 <HAL_UART_MspInit+0xa4>)
 8000c4c:	695a      	ldr	r2, [r3, #20]
 8000c4e:	4b18      	ldr	r3, [pc, #96]	; (8000cb0 <HAL_UART_MspInit+0xa4>)
 8000c50:	2180      	movs	r1, #128	; 0x80
 8000c52:	0289      	lsls	r1, r1, #10
 8000c54:	430a      	orrs	r2, r1
 8000c56:	615a      	str	r2, [r3, #20]
 8000c58:	4b15      	ldr	r3, [pc, #84]	; (8000cb0 <HAL_UART_MspInit+0xa4>)
 8000c5a:	695a      	ldr	r2, [r3, #20]
 8000c5c:	2380      	movs	r3, #128	; 0x80
 8000c5e:	029b      	lsls	r3, r3, #10
 8000c60:	4013      	ands	r3, r2
 8000c62:	60fb      	str	r3, [r7, #12]
 8000c64:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA2     ------> USART1_TX
    PA3     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c66:	0021      	movs	r1, r4
 8000c68:	187b      	adds	r3, r7, r1
 8000c6a:	220c      	movs	r2, #12
 8000c6c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c6e:	187b      	adds	r3, r7, r1
 8000c70:	2202      	movs	r2, #2
 8000c72:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c74:	187b      	adds	r3, r7, r1
 8000c76:	2200      	movs	r2, #0
 8000c78:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c7a:	187b      	adds	r3, r7, r1
 8000c7c:	2203      	movs	r2, #3
 8000c7e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000c80:	187b      	adds	r3, r7, r1
 8000c82:	2201      	movs	r2, #1
 8000c84:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c86:	187a      	adds	r2, r7, r1
 8000c88:	2390      	movs	r3, #144	; 0x90
 8000c8a:	05db      	lsls	r3, r3, #23
 8000c8c:	0011      	movs	r1, r2
 8000c8e:	0018      	movs	r0, r3
 8000c90:	f000 fa54 	bl	800113c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000c94:	2200      	movs	r2, #0
 8000c96:	2100      	movs	r1, #0
 8000c98:	201b      	movs	r0, #27
 8000c9a:	f000 f99f 	bl	8000fdc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000c9e:	201b      	movs	r0, #27
 8000ca0:	f000 f9b1 	bl	8001006 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000ca4:	46c0      	nop			; (mov r8, r8)
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	b00b      	add	sp, #44	; 0x2c
 8000caa:	bd90      	pop	{r4, r7, pc}
 8000cac:	40013800 	.word	0x40013800
 8000cb0:	40021000 	.word	0x40021000

08000cb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cb8:	e7fe      	b.n	8000cb8 <NMI_Handler+0x4>

08000cba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cba:	b580      	push	{r7, lr}
 8000cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cbe:	e7fe      	b.n	8000cbe <HardFault_Handler+0x4>

08000cc0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000cc4:	46c0      	nop			; (mov r8, r8)
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}

08000cca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cca:	b580      	push	{r7, lr}
 8000ccc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cce:	46c0      	nop			; (mov r8, r8)
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}

08000cd4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cd8:	f000 f894 	bl	8000e04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cdc:	46c0      	nop			; (mov r8, r8)
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
	...

08000ce4 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8000ce8:	4b03      	ldr	r3, [pc, #12]	; (8000cf8 <TIM17_IRQHandler+0x14>)
 8000cea:	0018      	movs	r0, r3
 8000cec:	f001 f992 	bl	8002014 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8000cf0:	46c0      	nop			; (mov r8, r8)
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	46c0      	nop			; (mov r8, r8)
 8000cf8:	2000002c 	.word	0x2000002c

08000cfc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000d00:	4b03      	ldr	r3, [pc, #12]	; (8000d10 <USART1_IRQHandler+0x14>)
 8000d02:	0018      	movs	r0, r3
 8000d04:	f001 fc84 	bl	8002610 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000d08:	46c0      	nop			; (mov r8, r8)
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	46c0      	nop			; (mov r8, r8)
 8000d10:	20000074 	.word	0x20000074

08000d14 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000d18:	46c0      	nop			; (mov r8, r8)
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
	...

08000d20 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d20:	480d      	ldr	r0, [pc, #52]	; (8000d58 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d22:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d24:	f7ff fff6 	bl	8000d14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d28:	480c      	ldr	r0, [pc, #48]	; (8000d5c <LoopForever+0x6>)
  ldr r1, =_edata
 8000d2a:	490d      	ldr	r1, [pc, #52]	; (8000d60 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d2c:	4a0d      	ldr	r2, [pc, #52]	; (8000d64 <LoopForever+0xe>)
  movs r3, #0
 8000d2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d30:	e002      	b.n	8000d38 <LoopCopyDataInit>

08000d32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d36:	3304      	adds	r3, #4

08000d38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d3c:	d3f9      	bcc.n	8000d32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d3e:	4a0a      	ldr	r2, [pc, #40]	; (8000d68 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d40:	4c0a      	ldr	r4, [pc, #40]	; (8000d6c <LoopForever+0x16>)
  movs r3, #0
 8000d42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d44:	e001      	b.n	8000d4a <LoopFillZerobss>

08000d46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d48:	3204      	adds	r2, #4

08000d4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d4c:	d3fb      	bcc.n	8000d46 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000d4e:	f002 fd45 	bl	80037dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d52:	f7ff faa1 	bl	8000298 <main>

08000d56 <LoopForever>:

LoopForever:
    b LoopForever
 8000d56:	e7fe      	b.n	8000d56 <LoopForever>
  ldr   r0, =_estack
 8000d58:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8000d5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d60:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000d64:	080038c4 	.word	0x080038c4
  ldr r2, =_sbss
 8000d68:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000d6c:	20000158 	.word	0x20000158

08000d70 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d70:	e7fe      	b.n	8000d70 <ADC1_IRQHandler>
	...

08000d74 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d78:	4b07      	ldr	r3, [pc, #28]	; (8000d98 <HAL_Init+0x24>)
 8000d7a:	681a      	ldr	r2, [r3, #0]
 8000d7c:	4b06      	ldr	r3, [pc, #24]	; (8000d98 <HAL_Init+0x24>)
 8000d7e:	2110      	movs	r1, #16
 8000d80:	430a      	orrs	r2, r1
 8000d82:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000d84:	2000      	movs	r0, #0
 8000d86:	f000 f809 	bl	8000d9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d8a:	f7ff fef3 	bl	8000b74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d8e:	2300      	movs	r3, #0
}
 8000d90:	0018      	movs	r0, r3
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	46c0      	nop			; (mov r8, r8)
 8000d98:	40022000 	.word	0x40022000

08000d9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d9c:	b590      	push	{r4, r7, lr}
 8000d9e:	b083      	sub	sp, #12
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000da4:	4b14      	ldr	r3, [pc, #80]	; (8000df8 <HAL_InitTick+0x5c>)
 8000da6:	681c      	ldr	r4, [r3, #0]
 8000da8:	4b14      	ldr	r3, [pc, #80]	; (8000dfc <HAL_InitTick+0x60>)
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	0019      	movs	r1, r3
 8000dae:	23fa      	movs	r3, #250	; 0xfa
 8000db0:	0098      	lsls	r0, r3, #2
 8000db2:	f7ff f9a9 	bl	8000108 <__udivsi3>
 8000db6:	0003      	movs	r3, r0
 8000db8:	0019      	movs	r1, r3
 8000dba:	0020      	movs	r0, r4
 8000dbc:	f7ff f9a4 	bl	8000108 <__udivsi3>
 8000dc0:	0003      	movs	r3, r0
 8000dc2:	0018      	movs	r0, r3
 8000dc4:	f000 f92f 	bl	8001026 <HAL_SYSTICK_Config>
 8000dc8:	1e03      	subs	r3, r0, #0
 8000dca:	d001      	beq.n	8000dd0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000dcc:	2301      	movs	r3, #1
 8000dce:	e00f      	b.n	8000df0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	2b03      	cmp	r3, #3
 8000dd4:	d80b      	bhi.n	8000dee <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dd6:	6879      	ldr	r1, [r7, #4]
 8000dd8:	2301      	movs	r3, #1
 8000dda:	425b      	negs	r3, r3
 8000ddc:	2200      	movs	r2, #0
 8000dde:	0018      	movs	r0, r3
 8000de0:	f000 f8fc 	bl	8000fdc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000de4:	4b06      	ldr	r3, [pc, #24]	; (8000e00 <HAL_InitTick+0x64>)
 8000de6:	687a      	ldr	r2, [r7, #4]
 8000de8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000dea:	2300      	movs	r3, #0
 8000dec:	e000      	b.n	8000df0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000dee:	2301      	movs	r3, #1
}
 8000df0:	0018      	movs	r0, r3
 8000df2:	46bd      	mov	sp, r7
 8000df4:	b003      	add	sp, #12
 8000df6:	bd90      	pop	{r4, r7, pc}
 8000df8:	20000004 	.word	0x20000004
 8000dfc:	2000000c 	.word	0x2000000c
 8000e00:	20000008 	.word	0x20000008

08000e04 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e08:	4b05      	ldr	r3, [pc, #20]	; (8000e20 <HAL_IncTick+0x1c>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	001a      	movs	r2, r3
 8000e0e:	4b05      	ldr	r3, [pc, #20]	; (8000e24 <HAL_IncTick+0x20>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	18d2      	adds	r2, r2, r3
 8000e14:	4b03      	ldr	r3, [pc, #12]	; (8000e24 <HAL_IncTick+0x20>)
 8000e16:	601a      	str	r2, [r3, #0]
}
 8000e18:	46c0      	nop			; (mov r8, r8)
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	46c0      	nop			; (mov r8, r8)
 8000e20:	2000000c 	.word	0x2000000c
 8000e24:	20000154 	.word	0x20000154

08000e28 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e2c:	4b02      	ldr	r3, [pc, #8]	; (8000e38 <HAL_GetTick+0x10>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
}
 8000e30:	0018      	movs	r0, r3
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	46c0      	nop			; (mov r8, r8)
 8000e38:	20000154 	.word	0x20000154

08000e3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b084      	sub	sp, #16
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e44:	f7ff fff0 	bl	8000e28 <HAL_GetTick>
 8000e48:	0003      	movs	r3, r0
 8000e4a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	3301      	adds	r3, #1
 8000e54:	d005      	beq.n	8000e62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e56:	4b0a      	ldr	r3, [pc, #40]	; (8000e80 <HAL_Delay+0x44>)
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	001a      	movs	r2, r3
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	189b      	adds	r3, r3, r2
 8000e60:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000e62:	46c0      	nop			; (mov r8, r8)
 8000e64:	f7ff ffe0 	bl	8000e28 <HAL_GetTick>
 8000e68:	0002      	movs	r2, r0
 8000e6a:	68bb      	ldr	r3, [r7, #8]
 8000e6c:	1ad3      	subs	r3, r2, r3
 8000e6e:	68fa      	ldr	r2, [r7, #12]
 8000e70:	429a      	cmp	r2, r3
 8000e72:	d8f7      	bhi.n	8000e64 <HAL_Delay+0x28>
  {
  }
}
 8000e74:	46c0      	nop			; (mov r8, r8)
 8000e76:	46c0      	nop			; (mov r8, r8)
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	b004      	add	sp, #16
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	46c0      	nop			; (mov r8, r8)
 8000e80:	2000000c 	.word	0x2000000c

08000e84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	0002      	movs	r2, r0
 8000e8c:	1dfb      	adds	r3, r7, #7
 8000e8e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000e90:	1dfb      	adds	r3, r7, #7
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	2b7f      	cmp	r3, #127	; 0x7f
 8000e96:	d809      	bhi.n	8000eac <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e98:	1dfb      	adds	r3, r7, #7
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	001a      	movs	r2, r3
 8000e9e:	231f      	movs	r3, #31
 8000ea0:	401a      	ands	r2, r3
 8000ea2:	4b04      	ldr	r3, [pc, #16]	; (8000eb4 <__NVIC_EnableIRQ+0x30>)
 8000ea4:	2101      	movs	r1, #1
 8000ea6:	4091      	lsls	r1, r2
 8000ea8:	000a      	movs	r2, r1
 8000eaa:	601a      	str	r2, [r3, #0]
  }
}
 8000eac:	46c0      	nop			; (mov r8, r8)
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	b002      	add	sp, #8
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	e000e100 	.word	0xe000e100

08000eb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000eb8:	b590      	push	{r4, r7, lr}
 8000eba:	b083      	sub	sp, #12
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	0002      	movs	r2, r0
 8000ec0:	6039      	str	r1, [r7, #0]
 8000ec2:	1dfb      	adds	r3, r7, #7
 8000ec4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000ec6:	1dfb      	adds	r3, r7, #7
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	2b7f      	cmp	r3, #127	; 0x7f
 8000ecc:	d828      	bhi.n	8000f20 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ece:	4a2f      	ldr	r2, [pc, #188]	; (8000f8c <__NVIC_SetPriority+0xd4>)
 8000ed0:	1dfb      	adds	r3, r7, #7
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	b25b      	sxtb	r3, r3
 8000ed6:	089b      	lsrs	r3, r3, #2
 8000ed8:	33c0      	adds	r3, #192	; 0xc0
 8000eda:	009b      	lsls	r3, r3, #2
 8000edc:	589b      	ldr	r3, [r3, r2]
 8000ede:	1dfa      	adds	r2, r7, #7
 8000ee0:	7812      	ldrb	r2, [r2, #0]
 8000ee2:	0011      	movs	r1, r2
 8000ee4:	2203      	movs	r2, #3
 8000ee6:	400a      	ands	r2, r1
 8000ee8:	00d2      	lsls	r2, r2, #3
 8000eea:	21ff      	movs	r1, #255	; 0xff
 8000eec:	4091      	lsls	r1, r2
 8000eee:	000a      	movs	r2, r1
 8000ef0:	43d2      	mvns	r2, r2
 8000ef2:	401a      	ands	r2, r3
 8000ef4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	019b      	lsls	r3, r3, #6
 8000efa:	22ff      	movs	r2, #255	; 0xff
 8000efc:	401a      	ands	r2, r3
 8000efe:	1dfb      	adds	r3, r7, #7
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	0018      	movs	r0, r3
 8000f04:	2303      	movs	r3, #3
 8000f06:	4003      	ands	r3, r0
 8000f08:	00db      	lsls	r3, r3, #3
 8000f0a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f0c:	481f      	ldr	r0, [pc, #124]	; (8000f8c <__NVIC_SetPriority+0xd4>)
 8000f0e:	1dfb      	adds	r3, r7, #7
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	b25b      	sxtb	r3, r3
 8000f14:	089b      	lsrs	r3, r3, #2
 8000f16:	430a      	orrs	r2, r1
 8000f18:	33c0      	adds	r3, #192	; 0xc0
 8000f1a:	009b      	lsls	r3, r3, #2
 8000f1c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000f1e:	e031      	b.n	8000f84 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f20:	4a1b      	ldr	r2, [pc, #108]	; (8000f90 <__NVIC_SetPriority+0xd8>)
 8000f22:	1dfb      	adds	r3, r7, #7
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	0019      	movs	r1, r3
 8000f28:	230f      	movs	r3, #15
 8000f2a:	400b      	ands	r3, r1
 8000f2c:	3b08      	subs	r3, #8
 8000f2e:	089b      	lsrs	r3, r3, #2
 8000f30:	3306      	adds	r3, #6
 8000f32:	009b      	lsls	r3, r3, #2
 8000f34:	18d3      	adds	r3, r2, r3
 8000f36:	3304      	adds	r3, #4
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	1dfa      	adds	r2, r7, #7
 8000f3c:	7812      	ldrb	r2, [r2, #0]
 8000f3e:	0011      	movs	r1, r2
 8000f40:	2203      	movs	r2, #3
 8000f42:	400a      	ands	r2, r1
 8000f44:	00d2      	lsls	r2, r2, #3
 8000f46:	21ff      	movs	r1, #255	; 0xff
 8000f48:	4091      	lsls	r1, r2
 8000f4a:	000a      	movs	r2, r1
 8000f4c:	43d2      	mvns	r2, r2
 8000f4e:	401a      	ands	r2, r3
 8000f50:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	019b      	lsls	r3, r3, #6
 8000f56:	22ff      	movs	r2, #255	; 0xff
 8000f58:	401a      	ands	r2, r3
 8000f5a:	1dfb      	adds	r3, r7, #7
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	0018      	movs	r0, r3
 8000f60:	2303      	movs	r3, #3
 8000f62:	4003      	ands	r3, r0
 8000f64:	00db      	lsls	r3, r3, #3
 8000f66:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f68:	4809      	ldr	r0, [pc, #36]	; (8000f90 <__NVIC_SetPriority+0xd8>)
 8000f6a:	1dfb      	adds	r3, r7, #7
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	001c      	movs	r4, r3
 8000f70:	230f      	movs	r3, #15
 8000f72:	4023      	ands	r3, r4
 8000f74:	3b08      	subs	r3, #8
 8000f76:	089b      	lsrs	r3, r3, #2
 8000f78:	430a      	orrs	r2, r1
 8000f7a:	3306      	adds	r3, #6
 8000f7c:	009b      	lsls	r3, r3, #2
 8000f7e:	18c3      	adds	r3, r0, r3
 8000f80:	3304      	adds	r3, #4
 8000f82:	601a      	str	r2, [r3, #0]
}
 8000f84:	46c0      	nop			; (mov r8, r8)
 8000f86:	46bd      	mov	sp, r7
 8000f88:	b003      	add	sp, #12
 8000f8a:	bd90      	pop	{r4, r7, pc}
 8000f8c:	e000e100 	.word	0xe000e100
 8000f90:	e000ed00 	.word	0xe000ed00

08000f94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	1e5a      	subs	r2, r3, #1
 8000fa0:	2380      	movs	r3, #128	; 0x80
 8000fa2:	045b      	lsls	r3, r3, #17
 8000fa4:	429a      	cmp	r2, r3
 8000fa6:	d301      	bcc.n	8000fac <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fa8:	2301      	movs	r3, #1
 8000faa:	e010      	b.n	8000fce <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fac:	4b0a      	ldr	r3, [pc, #40]	; (8000fd8 <SysTick_Config+0x44>)
 8000fae:	687a      	ldr	r2, [r7, #4]
 8000fb0:	3a01      	subs	r2, #1
 8000fb2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	425b      	negs	r3, r3
 8000fb8:	2103      	movs	r1, #3
 8000fba:	0018      	movs	r0, r3
 8000fbc:	f7ff ff7c 	bl	8000eb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fc0:	4b05      	ldr	r3, [pc, #20]	; (8000fd8 <SysTick_Config+0x44>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fc6:	4b04      	ldr	r3, [pc, #16]	; (8000fd8 <SysTick_Config+0x44>)
 8000fc8:	2207      	movs	r2, #7
 8000fca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fcc:	2300      	movs	r3, #0
}
 8000fce:	0018      	movs	r0, r3
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	b002      	add	sp, #8
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	46c0      	nop			; (mov r8, r8)
 8000fd8:	e000e010 	.word	0xe000e010

08000fdc <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b084      	sub	sp, #16
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	60b9      	str	r1, [r7, #8]
 8000fe4:	607a      	str	r2, [r7, #4]
 8000fe6:	210f      	movs	r1, #15
 8000fe8:	187b      	adds	r3, r7, r1
 8000fea:	1c02      	adds	r2, r0, #0
 8000fec:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000fee:	68ba      	ldr	r2, [r7, #8]
 8000ff0:	187b      	adds	r3, r7, r1
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	b25b      	sxtb	r3, r3
 8000ff6:	0011      	movs	r1, r2
 8000ff8:	0018      	movs	r0, r3
 8000ffa:	f7ff ff5d 	bl	8000eb8 <__NVIC_SetPriority>
}
 8000ffe:	46c0      	nop			; (mov r8, r8)
 8001000:	46bd      	mov	sp, r7
 8001002:	b004      	add	sp, #16
 8001004:	bd80      	pop	{r7, pc}

08001006 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001006:	b580      	push	{r7, lr}
 8001008:	b082      	sub	sp, #8
 800100a:	af00      	add	r7, sp, #0
 800100c:	0002      	movs	r2, r0
 800100e:	1dfb      	adds	r3, r7, #7
 8001010:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001012:	1dfb      	adds	r3, r7, #7
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	b25b      	sxtb	r3, r3
 8001018:	0018      	movs	r0, r3
 800101a:	f7ff ff33 	bl	8000e84 <__NVIC_EnableIRQ>
}
 800101e:	46c0      	nop			; (mov r8, r8)
 8001020:	46bd      	mov	sp, r7
 8001022:	b002      	add	sp, #8
 8001024:	bd80      	pop	{r7, pc}

08001026 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001026:	b580      	push	{r7, lr}
 8001028:	b082      	sub	sp, #8
 800102a:	af00      	add	r7, sp, #0
 800102c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	0018      	movs	r0, r3
 8001032:	f7ff ffaf 	bl	8000f94 <SysTick_Config>
 8001036:	0003      	movs	r3, r0
}
 8001038:	0018      	movs	r0, r3
 800103a:	46bd      	mov	sp, r7
 800103c:	b002      	add	sp, #8
 800103e:	bd80      	pop	{r7, pc}

08001040 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2221      	movs	r2, #33	; 0x21
 800104c:	5c9b      	ldrb	r3, [r3, r2]
 800104e:	b2db      	uxtb	r3, r3
 8001050:	2b02      	cmp	r3, #2
 8001052:	d008      	beq.n	8001066 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2204      	movs	r2, #4
 8001058:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2220      	movs	r2, #32
 800105e:	2100      	movs	r1, #0
 8001060:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001062:	2301      	movs	r3, #1
 8001064:	e020      	b.n	80010a8 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	210e      	movs	r1, #14
 8001072:	438a      	bics	r2, r1
 8001074:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	681a      	ldr	r2, [r3, #0]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	2101      	movs	r1, #1
 8001082:	438a      	bics	r2, r1
 8001084:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800108e:	2101      	movs	r1, #1
 8001090:	4091      	lsls	r1, r2
 8001092:	000a      	movs	r2, r1
 8001094:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2221      	movs	r2, #33	; 0x21
 800109a:	2101      	movs	r1, #1
 800109c:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2220      	movs	r2, #32
 80010a2:	2100      	movs	r1, #0
 80010a4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80010a6:	2300      	movs	r3, #0
}
 80010a8:	0018      	movs	r0, r3
 80010aa:	46bd      	mov	sp, r7
 80010ac:	b002      	add	sp, #8
 80010ae:	bd80      	pop	{r7, pc}

080010b0 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b084      	sub	sp, #16
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80010b8:	210f      	movs	r1, #15
 80010ba:	187b      	adds	r3, r7, r1
 80010bc:	2200      	movs	r2, #0
 80010be:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2221      	movs	r2, #33	; 0x21
 80010c4:	5c9b      	ldrb	r3, [r3, r2]
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	2b02      	cmp	r3, #2
 80010ca:	d006      	beq.n	80010da <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2204      	movs	r2, #4
 80010d0:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 80010d2:	187b      	adds	r3, r7, r1
 80010d4:	2201      	movs	r2, #1
 80010d6:	701a      	strb	r2, [r3, #0]
 80010d8:	e028      	b.n	800112c <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	210e      	movs	r1, #14
 80010e6:	438a      	bics	r2, r1
 80010e8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	2101      	movs	r1, #1
 80010f6:	438a      	bics	r2, r1
 80010f8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001102:	2101      	movs	r1, #1
 8001104:	4091      	lsls	r1, r2
 8001106:	000a      	movs	r2, r1
 8001108:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	2221      	movs	r2, #33	; 0x21
 800110e:	2101      	movs	r1, #1
 8001110:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2220      	movs	r2, #32
 8001116:	2100      	movs	r1, #0
 8001118:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800111e:	2b00      	cmp	r3, #0
 8001120:	d004      	beq.n	800112c <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001126:	687a      	ldr	r2, [r7, #4]
 8001128:	0010      	movs	r0, r2
 800112a:	4798      	blx	r3
    }
  }
  return status;
 800112c:	230f      	movs	r3, #15
 800112e:	18fb      	adds	r3, r7, r3
 8001130:	781b      	ldrb	r3, [r3, #0]
}
 8001132:	0018      	movs	r0, r3
 8001134:	46bd      	mov	sp, r7
 8001136:	b004      	add	sp, #16
 8001138:	bd80      	pop	{r7, pc}
	...

0800113c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b086      	sub	sp, #24
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001146:	2300      	movs	r3, #0
 8001148:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800114a:	e14f      	b.n	80013ec <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	2101      	movs	r1, #1
 8001152:	697a      	ldr	r2, [r7, #20]
 8001154:	4091      	lsls	r1, r2
 8001156:	000a      	movs	r2, r1
 8001158:	4013      	ands	r3, r2
 800115a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d100      	bne.n	8001164 <HAL_GPIO_Init+0x28>
 8001162:	e140      	b.n	80013e6 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	2203      	movs	r2, #3
 800116a:	4013      	ands	r3, r2
 800116c:	2b01      	cmp	r3, #1
 800116e:	d005      	beq.n	800117c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	2203      	movs	r2, #3
 8001176:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001178:	2b02      	cmp	r3, #2
 800117a:	d130      	bne.n	80011de <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	689b      	ldr	r3, [r3, #8]
 8001180:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	005b      	lsls	r3, r3, #1
 8001186:	2203      	movs	r2, #3
 8001188:	409a      	lsls	r2, r3
 800118a:	0013      	movs	r3, r2
 800118c:	43da      	mvns	r2, r3
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	4013      	ands	r3, r2
 8001192:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	68da      	ldr	r2, [r3, #12]
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	005b      	lsls	r3, r3, #1
 800119c:	409a      	lsls	r2, r3
 800119e:	0013      	movs	r3, r2
 80011a0:	693a      	ldr	r2, [r7, #16]
 80011a2:	4313      	orrs	r3, r2
 80011a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	693a      	ldr	r2, [r7, #16]
 80011aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011b2:	2201      	movs	r2, #1
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	409a      	lsls	r2, r3
 80011b8:	0013      	movs	r3, r2
 80011ba:	43da      	mvns	r2, r3
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	4013      	ands	r3, r2
 80011c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	091b      	lsrs	r3, r3, #4
 80011c8:	2201      	movs	r2, #1
 80011ca:	401a      	ands	r2, r3
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	409a      	lsls	r2, r3
 80011d0:	0013      	movs	r3, r2
 80011d2:	693a      	ldr	r2, [r7, #16]
 80011d4:	4313      	orrs	r3, r2
 80011d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	693a      	ldr	r2, [r7, #16]
 80011dc:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	2203      	movs	r2, #3
 80011e4:	4013      	ands	r3, r2
 80011e6:	2b03      	cmp	r3, #3
 80011e8:	d017      	beq.n	800121a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	68db      	ldr	r3, [r3, #12]
 80011ee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	005b      	lsls	r3, r3, #1
 80011f4:	2203      	movs	r2, #3
 80011f6:	409a      	lsls	r2, r3
 80011f8:	0013      	movs	r3, r2
 80011fa:	43da      	mvns	r2, r3
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	4013      	ands	r3, r2
 8001200:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	689a      	ldr	r2, [r3, #8]
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	005b      	lsls	r3, r3, #1
 800120a:	409a      	lsls	r2, r3
 800120c:	0013      	movs	r3, r2
 800120e:	693a      	ldr	r2, [r7, #16]
 8001210:	4313      	orrs	r3, r2
 8001212:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	693a      	ldr	r2, [r7, #16]
 8001218:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	2203      	movs	r2, #3
 8001220:	4013      	ands	r3, r2
 8001222:	2b02      	cmp	r3, #2
 8001224:	d123      	bne.n	800126e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	08da      	lsrs	r2, r3, #3
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	3208      	adds	r2, #8
 800122e:	0092      	lsls	r2, r2, #2
 8001230:	58d3      	ldr	r3, [r2, r3]
 8001232:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	2207      	movs	r2, #7
 8001238:	4013      	ands	r3, r2
 800123a:	009b      	lsls	r3, r3, #2
 800123c:	220f      	movs	r2, #15
 800123e:	409a      	lsls	r2, r3
 8001240:	0013      	movs	r3, r2
 8001242:	43da      	mvns	r2, r3
 8001244:	693b      	ldr	r3, [r7, #16]
 8001246:	4013      	ands	r3, r2
 8001248:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	691a      	ldr	r2, [r3, #16]
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	2107      	movs	r1, #7
 8001252:	400b      	ands	r3, r1
 8001254:	009b      	lsls	r3, r3, #2
 8001256:	409a      	lsls	r2, r3
 8001258:	0013      	movs	r3, r2
 800125a:	693a      	ldr	r2, [r7, #16]
 800125c:	4313      	orrs	r3, r2
 800125e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	08da      	lsrs	r2, r3, #3
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	3208      	adds	r2, #8
 8001268:	0092      	lsls	r2, r2, #2
 800126a:	6939      	ldr	r1, [r7, #16]
 800126c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	005b      	lsls	r3, r3, #1
 8001278:	2203      	movs	r2, #3
 800127a:	409a      	lsls	r2, r3
 800127c:	0013      	movs	r3, r2
 800127e:	43da      	mvns	r2, r3
 8001280:	693b      	ldr	r3, [r7, #16]
 8001282:	4013      	ands	r3, r2
 8001284:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	2203      	movs	r2, #3
 800128c:	401a      	ands	r2, r3
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	005b      	lsls	r3, r3, #1
 8001292:	409a      	lsls	r2, r3
 8001294:	0013      	movs	r3, r2
 8001296:	693a      	ldr	r2, [r7, #16]
 8001298:	4313      	orrs	r3, r2
 800129a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	693a      	ldr	r2, [r7, #16]
 80012a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	685a      	ldr	r2, [r3, #4]
 80012a6:	23c0      	movs	r3, #192	; 0xc0
 80012a8:	029b      	lsls	r3, r3, #10
 80012aa:	4013      	ands	r3, r2
 80012ac:	d100      	bne.n	80012b0 <HAL_GPIO_Init+0x174>
 80012ae:	e09a      	b.n	80013e6 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012b0:	4b54      	ldr	r3, [pc, #336]	; (8001404 <HAL_GPIO_Init+0x2c8>)
 80012b2:	699a      	ldr	r2, [r3, #24]
 80012b4:	4b53      	ldr	r3, [pc, #332]	; (8001404 <HAL_GPIO_Init+0x2c8>)
 80012b6:	2101      	movs	r1, #1
 80012b8:	430a      	orrs	r2, r1
 80012ba:	619a      	str	r2, [r3, #24]
 80012bc:	4b51      	ldr	r3, [pc, #324]	; (8001404 <HAL_GPIO_Init+0x2c8>)
 80012be:	699b      	ldr	r3, [r3, #24]
 80012c0:	2201      	movs	r2, #1
 80012c2:	4013      	ands	r3, r2
 80012c4:	60bb      	str	r3, [r7, #8]
 80012c6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80012c8:	4a4f      	ldr	r2, [pc, #316]	; (8001408 <HAL_GPIO_Init+0x2cc>)
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	089b      	lsrs	r3, r3, #2
 80012ce:	3302      	adds	r3, #2
 80012d0:	009b      	lsls	r3, r3, #2
 80012d2:	589b      	ldr	r3, [r3, r2]
 80012d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	2203      	movs	r2, #3
 80012da:	4013      	ands	r3, r2
 80012dc:	009b      	lsls	r3, r3, #2
 80012de:	220f      	movs	r2, #15
 80012e0:	409a      	lsls	r2, r3
 80012e2:	0013      	movs	r3, r2
 80012e4:	43da      	mvns	r2, r3
 80012e6:	693b      	ldr	r3, [r7, #16]
 80012e8:	4013      	ands	r3, r2
 80012ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80012ec:	687a      	ldr	r2, [r7, #4]
 80012ee:	2390      	movs	r3, #144	; 0x90
 80012f0:	05db      	lsls	r3, r3, #23
 80012f2:	429a      	cmp	r2, r3
 80012f4:	d013      	beq.n	800131e <HAL_GPIO_Init+0x1e2>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4a44      	ldr	r2, [pc, #272]	; (800140c <HAL_GPIO_Init+0x2d0>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d00d      	beq.n	800131a <HAL_GPIO_Init+0x1de>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4a43      	ldr	r2, [pc, #268]	; (8001410 <HAL_GPIO_Init+0x2d4>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d007      	beq.n	8001316 <HAL_GPIO_Init+0x1da>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4a42      	ldr	r2, [pc, #264]	; (8001414 <HAL_GPIO_Init+0x2d8>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d101      	bne.n	8001312 <HAL_GPIO_Init+0x1d6>
 800130e:	2303      	movs	r3, #3
 8001310:	e006      	b.n	8001320 <HAL_GPIO_Init+0x1e4>
 8001312:	2305      	movs	r3, #5
 8001314:	e004      	b.n	8001320 <HAL_GPIO_Init+0x1e4>
 8001316:	2302      	movs	r3, #2
 8001318:	e002      	b.n	8001320 <HAL_GPIO_Init+0x1e4>
 800131a:	2301      	movs	r3, #1
 800131c:	e000      	b.n	8001320 <HAL_GPIO_Init+0x1e4>
 800131e:	2300      	movs	r3, #0
 8001320:	697a      	ldr	r2, [r7, #20]
 8001322:	2103      	movs	r1, #3
 8001324:	400a      	ands	r2, r1
 8001326:	0092      	lsls	r2, r2, #2
 8001328:	4093      	lsls	r3, r2
 800132a:	693a      	ldr	r2, [r7, #16]
 800132c:	4313      	orrs	r3, r2
 800132e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001330:	4935      	ldr	r1, [pc, #212]	; (8001408 <HAL_GPIO_Init+0x2cc>)
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	089b      	lsrs	r3, r3, #2
 8001336:	3302      	adds	r3, #2
 8001338:	009b      	lsls	r3, r3, #2
 800133a:	693a      	ldr	r2, [r7, #16]
 800133c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800133e:	4b36      	ldr	r3, [pc, #216]	; (8001418 <HAL_GPIO_Init+0x2dc>)
 8001340:	689b      	ldr	r3, [r3, #8]
 8001342:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	43da      	mvns	r2, r3
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	4013      	ands	r3, r2
 800134c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	685a      	ldr	r2, [r3, #4]
 8001352:	2380      	movs	r3, #128	; 0x80
 8001354:	035b      	lsls	r3, r3, #13
 8001356:	4013      	ands	r3, r2
 8001358:	d003      	beq.n	8001362 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 800135a:	693a      	ldr	r2, [r7, #16]
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	4313      	orrs	r3, r2
 8001360:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001362:	4b2d      	ldr	r3, [pc, #180]	; (8001418 <HAL_GPIO_Init+0x2dc>)
 8001364:	693a      	ldr	r2, [r7, #16]
 8001366:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001368:	4b2b      	ldr	r3, [pc, #172]	; (8001418 <HAL_GPIO_Init+0x2dc>)
 800136a:	68db      	ldr	r3, [r3, #12]
 800136c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	43da      	mvns	r2, r3
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	4013      	ands	r3, r2
 8001376:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	685a      	ldr	r2, [r3, #4]
 800137c:	2380      	movs	r3, #128	; 0x80
 800137e:	039b      	lsls	r3, r3, #14
 8001380:	4013      	ands	r3, r2
 8001382:	d003      	beq.n	800138c <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001384:	693a      	ldr	r2, [r7, #16]
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	4313      	orrs	r3, r2
 800138a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800138c:	4b22      	ldr	r3, [pc, #136]	; (8001418 <HAL_GPIO_Init+0x2dc>)
 800138e:	693a      	ldr	r2, [r7, #16]
 8001390:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001392:	4b21      	ldr	r3, [pc, #132]	; (8001418 <HAL_GPIO_Init+0x2dc>)
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	43da      	mvns	r2, r3
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	4013      	ands	r3, r2
 80013a0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	685a      	ldr	r2, [r3, #4]
 80013a6:	2380      	movs	r3, #128	; 0x80
 80013a8:	029b      	lsls	r3, r3, #10
 80013aa:	4013      	ands	r3, r2
 80013ac:	d003      	beq.n	80013b6 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80013ae:	693a      	ldr	r2, [r7, #16]
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	4313      	orrs	r3, r2
 80013b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80013b6:	4b18      	ldr	r3, [pc, #96]	; (8001418 <HAL_GPIO_Init+0x2dc>)
 80013b8:	693a      	ldr	r2, [r7, #16]
 80013ba:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80013bc:	4b16      	ldr	r3, [pc, #88]	; (8001418 <HAL_GPIO_Init+0x2dc>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	43da      	mvns	r2, r3
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	4013      	ands	r3, r2
 80013ca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	685a      	ldr	r2, [r3, #4]
 80013d0:	2380      	movs	r3, #128	; 0x80
 80013d2:	025b      	lsls	r3, r3, #9
 80013d4:	4013      	ands	r3, r2
 80013d6:	d003      	beq.n	80013e0 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80013d8:	693a      	ldr	r2, [r7, #16]
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	4313      	orrs	r3, r2
 80013de:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80013e0:	4b0d      	ldr	r3, [pc, #52]	; (8001418 <HAL_GPIO_Init+0x2dc>)
 80013e2:	693a      	ldr	r2, [r7, #16]
 80013e4:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	3301      	adds	r3, #1
 80013ea:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	40da      	lsrs	r2, r3
 80013f4:	1e13      	subs	r3, r2, #0
 80013f6:	d000      	beq.n	80013fa <HAL_GPIO_Init+0x2be>
 80013f8:	e6a8      	b.n	800114c <HAL_GPIO_Init+0x10>
  } 
}
 80013fa:	46c0      	nop			; (mov r8, r8)
 80013fc:	46c0      	nop			; (mov r8, r8)
 80013fe:	46bd      	mov	sp, r7
 8001400:	b006      	add	sp, #24
 8001402:	bd80      	pop	{r7, pc}
 8001404:	40021000 	.word	0x40021000
 8001408:	40010000 	.word	0x40010000
 800140c:	48000400 	.word	0x48000400
 8001410:	48000800 	.word	0x48000800
 8001414:	48000c00 	.word	0x48000c00
 8001418:	40010400 	.word	0x40010400

0800141c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b084      	sub	sp, #16
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
 8001424:	000a      	movs	r2, r1
 8001426:	1cbb      	adds	r3, r7, #2
 8001428:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	691b      	ldr	r3, [r3, #16]
 800142e:	1cba      	adds	r2, r7, #2
 8001430:	8812      	ldrh	r2, [r2, #0]
 8001432:	4013      	ands	r3, r2
 8001434:	d004      	beq.n	8001440 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001436:	230f      	movs	r3, #15
 8001438:	18fb      	adds	r3, r7, r3
 800143a:	2201      	movs	r2, #1
 800143c:	701a      	strb	r2, [r3, #0]
 800143e:	e003      	b.n	8001448 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001440:	230f      	movs	r3, #15
 8001442:	18fb      	adds	r3, r7, r3
 8001444:	2200      	movs	r2, #0
 8001446:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001448:	230f      	movs	r3, #15
 800144a:	18fb      	adds	r3, r7, r3
 800144c:	781b      	ldrb	r3, [r3, #0]
  }
 800144e:	0018      	movs	r0, r3
 8001450:	46bd      	mov	sp, r7
 8001452:	b004      	add	sp, #16
 8001454:	bd80      	pop	{r7, pc}

08001456 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001456:	b580      	push	{r7, lr}
 8001458:	b082      	sub	sp, #8
 800145a:	af00      	add	r7, sp, #0
 800145c:	6078      	str	r0, [r7, #4]
 800145e:	0008      	movs	r0, r1
 8001460:	0011      	movs	r1, r2
 8001462:	1cbb      	adds	r3, r7, #2
 8001464:	1c02      	adds	r2, r0, #0
 8001466:	801a      	strh	r2, [r3, #0]
 8001468:	1c7b      	adds	r3, r7, #1
 800146a:	1c0a      	adds	r2, r1, #0
 800146c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800146e:	1c7b      	adds	r3, r7, #1
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d004      	beq.n	8001480 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001476:	1cbb      	adds	r3, r7, #2
 8001478:	881a      	ldrh	r2, [r3, #0]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800147e:	e003      	b.n	8001488 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001480:	1cbb      	adds	r3, r7, #2
 8001482:	881a      	ldrh	r2, [r3, #0]
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001488:	46c0      	nop			; (mov r8, r8)
 800148a:	46bd      	mov	sp, r7
 800148c:	b002      	add	sp, #8
 800148e:	bd80      	pop	{r7, pc}

08001490 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b088      	sub	sp, #32
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d101      	bne.n	80014a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800149e:	2301      	movs	r3, #1
 80014a0:	e301      	b.n	8001aa6 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	2201      	movs	r2, #1
 80014a8:	4013      	ands	r3, r2
 80014aa:	d100      	bne.n	80014ae <HAL_RCC_OscConfig+0x1e>
 80014ac:	e08d      	b.n	80015ca <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80014ae:	4bc3      	ldr	r3, [pc, #780]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	220c      	movs	r2, #12
 80014b4:	4013      	ands	r3, r2
 80014b6:	2b04      	cmp	r3, #4
 80014b8:	d00e      	beq.n	80014d8 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80014ba:	4bc0      	ldr	r3, [pc, #768]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	220c      	movs	r2, #12
 80014c0:	4013      	ands	r3, r2
 80014c2:	2b08      	cmp	r3, #8
 80014c4:	d116      	bne.n	80014f4 <HAL_RCC_OscConfig+0x64>
 80014c6:	4bbd      	ldr	r3, [pc, #756]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 80014c8:	685a      	ldr	r2, [r3, #4]
 80014ca:	2380      	movs	r3, #128	; 0x80
 80014cc:	025b      	lsls	r3, r3, #9
 80014ce:	401a      	ands	r2, r3
 80014d0:	2380      	movs	r3, #128	; 0x80
 80014d2:	025b      	lsls	r3, r3, #9
 80014d4:	429a      	cmp	r2, r3
 80014d6:	d10d      	bne.n	80014f4 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014d8:	4bb8      	ldr	r3, [pc, #736]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 80014da:	681a      	ldr	r2, [r3, #0]
 80014dc:	2380      	movs	r3, #128	; 0x80
 80014de:	029b      	lsls	r3, r3, #10
 80014e0:	4013      	ands	r3, r2
 80014e2:	d100      	bne.n	80014e6 <HAL_RCC_OscConfig+0x56>
 80014e4:	e070      	b.n	80015c8 <HAL_RCC_OscConfig+0x138>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d000      	beq.n	80014f0 <HAL_RCC_OscConfig+0x60>
 80014ee:	e06b      	b.n	80015c8 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80014f0:	2301      	movs	r3, #1
 80014f2:	e2d8      	b.n	8001aa6 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	2b01      	cmp	r3, #1
 80014fa:	d107      	bne.n	800150c <HAL_RCC_OscConfig+0x7c>
 80014fc:	4baf      	ldr	r3, [pc, #700]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	4bae      	ldr	r3, [pc, #696]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 8001502:	2180      	movs	r1, #128	; 0x80
 8001504:	0249      	lsls	r1, r1, #9
 8001506:	430a      	orrs	r2, r1
 8001508:	601a      	str	r2, [r3, #0]
 800150a:	e02f      	b.n	800156c <HAL_RCC_OscConfig+0xdc>
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d10c      	bne.n	800152e <HAL_RCC_OscConfig+0x9e>
 8001514:	4ba9      	ldr	r3, [pc, #676]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	4ba8      	ldr	r3, [pc, #672]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 800151a:	49a9      	ldr	r1, [pc, #676]	; (80017c0 <HAL_RCC_OscConfig+0x330>)
 800151c:	400a      	ands	r2, r1
 800151e:	601a      	str	r2, [r3, #0]
 8001520:	4ba6      	ldr	r3, [pc, #664]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	4ba5      	ldr	r3, [pc, #660]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 8001526:	49a7      	ldr	r1, [pc, #668]	; (80017c4 <HAL_RCC_OscConfig+0x334>)
 8001528:	400a      	ands	r2, r1
 800152a:	601a      	str	r2, [r3, #0]
 800152c:	e01e      	b.n	800156c <HAL_RCC_OscConfig+0xdc>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	2b05      	cmp	r3, #5
 8001534:	d10e      	bne.n	8001554 <HAL_RCC_OscConfig+0xc4>
 8001536:	4ba1      	ldr	r3, [pc, #644]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	4ba0      	ldr	r3, [pc, #640]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 800153c:	2180      	movs	r1, #128	; 0x80
 800153e:	02c9      	lsls	r1, r1, #11
 8001540:	430a      	orrs	r2, r1
 8001542:	601a      	str	r2, [r3, #0]
 8001544:	4b9d      	ldr	r3, [pc, #628]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	4b9c      	ldr	r3, [pc, #624]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 800154a:	2180      	movs	r1, #128	; 0x80
 800154c:	0249      	lsls	r1, r1, #9
 800154e:	430a      	orrs	r2, r1
 8001550:	601a      	str	r2, [r3, #0]
 8001552:	e00b      	b.n	800156c <HAL_RCC_OscConfig+0xdc>
 8001554:	4b99      	ldr	r3, [pc, #612]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	4b98      	ldr	r3, [pc, #608]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 800155a:	4999      	ldr	r1, [pc, #612]	; (80017c0 <HAL_RCC_OscConfig+0x330>)
 800155c:	400a      	ands	r2, r1
 800155e:	601a      	str	r2, [r3, #0]
 8001560:	4b96      	ldr	r3, [pc, #600]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	4b95      	ldr	r3, [pc, #596]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 8001566:	4997      	ldr	r1, [pc, #604]	; (80017c4 <HAL_RCC_OscConfig+0x334>)
 8001568:	400a      	ands	r2, r1
 800156a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d014      	beq.n	800159e <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001574:	f7ff fc58 	bl	8000e28 <HAL_GetTick>
 8001578:	0003      	movs	r3, r0
 800157a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800157c:	e008      	b.n	8001590 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800157e:	f7ff fc53 	bl	8000e28 <HAL_GetTick>
 8001582:	0002      	movs	r2, r0
 8001584:	69bb      	ldr	r3, [r7, #24]
 8001586:	1ad3      	subs	r3, r2, r3
 8001588:	2b64      	cmp	r3, #100	; 0x64
 800158a:	d901      	bls.n	8001590 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 800158c:	2303      	movs	r3, #3
 800158e:	e28a      	b.n	8001aa6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001590:	4b8a      	ldr	r3, [pc, #552]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	2380      	movs	r3, #128	; 0x80
 8001596:	029b      	lsls	r3, r3, #10
 8001598:	4013      	ands	r3, r2
 800159a:	d0f0      	beq.n	800157e <HAL_RCC_OscConfig+0xee>
 800159c:	e015      	b.n	80015ca <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800159e:	f7ff fc43 	bl	8000e28 <HAL_GetTick>
 80015a2:	0003      	movs	r3, r0
 80015a4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015a6:	e008      	b.n	80015ba <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015a8:	f7ff fc3e 	bl	8000e28 <HAL_GetTick>
 80015ac:	0002      	movs	r2, r0
 80015ae:	69bb      	ldr	r3, [r7, #24]
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	2b64      	cmp	r3, #100	; 0x64
 80015b4:	d901      	bls.n	80015ba <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80015b6:	2303      	movs	r3, #3
 80015b8:	e275      	b.n	8001aa6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015ba:	4b80      	ldr	r3, [pc, #512]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	2380      	movs	r3, #128	; 0x80
 80015c0:	029b      	lsls	r3, r3, #10
 80015c2:	4013      	ands	r3, r2
 80015c4:	d1f0      	bne.n	80015a8 <HAL_RCC_OscConfig+0x118>
 80015c6:	e000      	b.n	80015ca <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015c8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	2202      	movs	r2, #2
 80015d0:	4013      	ands	r3, r2
 80015d2:	d100      	bne.n	80015d6 <HAL_RCC_OscConfig+0x146>
 80015d4:	e069      	b.n	80016aa <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80015d6:	4b79      	ldr	r3, [pc, #484]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	220c      	movs	r2, #12
 80015dc:	4013      	ands	r3, r2
 80015de:	d00b      	beq.n	80015f8 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80015e0:	4b76      	ldr	r3, [pc, #472]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	220c      	movs	r2, #12
 80015e6:	4013      	ands	r3, r2
 80015e8:	2b08      	cmp	r3, #8
 80015ea:	d11c      	bne.n	8001626 <HAL_RCC_OscConfig+0x196>
 80015ec:	4b73      	ldr	r3, [pc, #460]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 80015ee:	685a      	ldr	r2, [r3, #4]
 80015f0:	2380      	movs	r3, #128	; 0x80
 80015f2:	025b      	lsls	r3, r3, #9
 80015f4:	4013      	ands	r3, r2
 80015f6:	d116      	bne.n	8001626 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015f8:	4b70      	ldr	r3, [pc, #448]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	2202      	movs	r2, #2
 80015fe:	4013      	ands	r3, r2
 8001600:	d005      	beq.n	800160e <HAL_RCC_OscConfig+0x17e>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	68db      	ldr	r3, [r3, #12]
 8001606:	2b01      	cmp	r3, #1
 8001608:	d001      	beq.n	800160e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	e24b      	b.n	8001aa6 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800160e:	4b6b      	ldr	r3, [pc, #428]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	22f8      	movs	r2, #248	; 0xf8
 8001614:	4393      	bics	r3, r2
 8001616:	0019      	movs	r1, r3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	691b      	ldr	r3, [r3, #16]
 800161c:	00da      	lsls	r2, r3, #3
 800161e:	4b67      	ldr	r3, [pc, #412]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 8001620:	430a      	orrs	r2, r1
 8001622:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001624:	e041      	b.n	80016aa <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	68db      	ldr	r3, [r3, #12]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d024      	beq.n	8001678 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800162e:	4b63      	ldr	r3, [pc, #396]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	4b62      	ldr	r3, [pc, #392]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 8001634:	2101      	movs	r1, #1
 8001636:	430a      	orrs	r2, r1
 8001638:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800163a:	f7ff fbf5 	bl	8000e28 <HAL_GetTick>
 800163e:	0003      	movs	r3, r0
 8001640:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001642:	e008      	b.n	8001656 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001644:	f7ff fbf0 	bl	8000e28 <HAL_GetTick>
 8001648:	0002      	movs	r2, r0
 800164a:	69bb      	ldr	r3, [r7, #24]
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	2b02      	cmp	r3, #2
 8001650:	d901      	bls.n	8001656 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001652:	2303      	movs	r3, #3
 8001654:	e227      	b.n	8001aa6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001656:	4b59      	ldr	r3, [pc, #356]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	2202      	movs	r2, #2
 800165c:	4013      	ands	r3, r2
 800165e:	d0f1      	beq.n	8001644 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001660:	4b56      	ldr	r3, [pc, #344]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	22f8      	movs	r2, #248	; 0xf8
 8001666:	4393      	bics	r3, r2
 8001668:	0019      	movs	r1, r3
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	691b      	ldr	r3, [r3, #16]
 800166e:	00da      	lsls	r2, r3, #3
 8001670:	4b52      	ldr	r3, [pc, #328]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 8001672:	430a      	orrs	r2, r1
 8001674:	601a      	str	r2, [r3, #0]
 8001676:	e018      	b.n	80016aa <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001678:	4b50      	ldr	r3, [pc, #320]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	4b4f      	ldr	r3, [pc, #316]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 800167e:	2101      	movs	r1, #1
 8001680:	438a      	bics	r2, r1
 8001682:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001684:	f7ff fbd0 	bl	8000e28 <HAL_GetTick>
 8001688:	0003      	movs	r3, r0
 800168a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800168c:	e008      	b.n	80016a0 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800168e:	f7ff fbcb 	bl	8000e28 <HAL_GetTick>
 8001692:	0002      	movs	r2, r0
 8001694:	69bb      	ldr	r3, [r7, #24]
 8001696:	1ad3      	subs	r3, r2, r3
 8001698:	2b02      	cmp	r3, #2
 800169a:	d901      	bls.n	80016a0 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 800169c:	2303      	movs	r3, #3
 800169e:	e202      	b.n	8001aa6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016a0:	4b46      	ldr	r3, [pc, #280]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	2202      	movs	r2, #2
 80016a6:	4013      	ands	r3, r2
 80016a8:	d1f1      	bne.n	800168e <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	2208      	movs	r2, #8
 80016b0:	4013      	ands	r3, r2
 80016b2:	d036      	beq.n	8001722 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	69db      	ldr	r3, [r3, #28]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d019      	beq.n	80016f0 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016bc:	4b3f      	ldr	r3, [pc, #252]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 80016be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016c0:	4b3e      	ldr	r3, [pc, #248]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 80016c2:	2101      	movs	r1, #1
 80016c4:	430a      	orrs	r2, r1
 80016c6:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016c8:	f7ff fbae 	bl	8000e28 <HAL_GetTick>
 80016cc:	0003      	movs	r3, r0
 80016ce:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016d0:	e008      	b.n	80016e4 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016d2:	f7ff fba9 	bl	8000e28 <HAL_GetTick>
 80016d6:	0002      	movs	r2, r0
 80016d8:	69bb      	ldr	r3, [r7, #24]
 80016da:	1ad3      	subs	r3, r2, r3
 80016dc:	2b02      	cmp	r3, #2
 80016de:	d901      	bls.n	80016e4 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80016e0:	2303      	movs	r3, #3
 80016e2:	e1e0      	b.n	8001aa6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016e4:	4b35      	ldr	r3, [pc, #212]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 80016e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e8:	2202      	movs	r2, #2
 80016ea:	4013      	ands	r3, r2
 80016ec:	d0f1      	beq.n	80016d2 <HAL_RCC_OscConfig+0x242>
 80016ee:	e018      	b.n	8001722 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016f0:	4b32      	ldr	r3, [pc, #200]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 80016f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016f4:	4b31      	ldr	r3, [pc, #196]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 80016f6:	2101      	movs	r1, #1
 80016f8:	438a      	bics	r2, r1
 80016fa:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016fc:	f7ff fb94 	bl	8000e28 <HAL_GetTick>
 8001700:	0003      	movs	r3, r0
 8001702:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001704:	e008      	b.n	8001718 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001706:	f7ff fb8f 	bl	8000e28 <HAL_GetTick>
 800170a:	0002      	movs	r2, r0
 800170c:	69bb      	ldr	r3, [r7, #24]
 800170e:	1ad3      	subs	r3, r2, r3
 8001710:	2b02      	cmp	r3, #2
 8001712:	d901      	bls.n	8001718 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001714:	2303      	movs	r3, #3
 8001716:	e1c6      	b.n	8001aa6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001718:	4b28      	ldr	r3, [pc, #160]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 800171a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800171c:	2202      	movs	r2, #2
 800171e:	4013      	ands	r3, r2
 8001720:	d1f1      	bne.n	8001706 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	2204      	movs	r2, #4
 8001728:	4013      	ands	r3, r2
 800172a:	d100      	bne.n	800172e <HAL_RCC_OscConfig+0x29e>
 800172c:	e0b4      	b.n	8001898 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 800172e:	201f      	movs	r0, #31
 8001730:	183b      	adds	r3, r7, r0
 8001732:	2200      	movs	r2, #0
 8001734:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001736:	4b21      	ldr	r3, [pc, #132]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 8001738:	69da      	ldr	r2, [r3, #28]
 800173a:	2380      	movs	r3, #128	; 0x80
 800173c:	055b      	lsls	r3, r3, #21
 800173e:	4013      	ands	r3, r2
 8001740:	d110      	bne.n	8001764 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001742:	4b1e      	ldr	r3, [pc, #120]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 8001744:	69da      	ldr	r2, [r3, #28]
 8001746:	4b1d      	ldr	r3, [pc, #116]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 8001748:	2180      	movs	r1, #128	; 0x80
 800174a:	0549      	lsls	r1, r1, #21
 800174c:	430a      	orrs	r2, r1
 800174e:	61da      	str	r2, [r3, #28]
 8001750:	4b1a      	ldr	r3, [pc, #104]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 8001752:	69da      	ldr	r2, [r3, #28]
 8001754:	2380      	movs	r3, #128	; 0x80
 8001756:	055b      	lsls	r3, r3, #21
 8001758:	4013      	ands	r3, r2
 800175a:	60fb      	str	r3, [r7, #12]
 800175c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800175e:	183b      	adds	r3, r7, r0
 8001760:	2201      	movs	r2, #1
 8001762:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001764:	4b18      	ldr	r3, [pc, #96]	; (80017c8 <HAL_RCC_OscConfig+0x338>)
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	2380      	movs	r3, #128	; 0x80
 800176a:	005b      	lsls	r3, r3, #1
 800176c:	4013      	ands	r3, r2
 800176e:	d11a      	bne.n	80017a6 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001770:	4b15      	ldr	r3, [pc, #84]	; (80017c8 <HAL_RCC_OscConfig+0x338>)
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	4b14      	ldr	r3, [pc, #80]	; (80017c8 <HAL_RCC_OscConfig+0x338>)
 8001776:	2180      	movs	r1, #128	; 0x80
 8001778:	0049      	lsls	r1, r1, #1
 800177a:	430a      	orrs	r2, r1
 800177c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800177e:	f7ff fb53 	bl	8000e28 <HAL_GetTick>
 8001782:	0003      	movs	r3, r0
 8001784:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001786:	e008      	b.n	800179a <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001788:	f7ff fb4e 	bl	8000e28 <HAL_GetTick>
 800178c:	0002      	movs	r2, r0
 800178e:	69bb      	ldr	r3, [r7, #24]
 8001790:	1ad3      	subs	r3, r2, r3
 8001792:	2b64      	cmp	r3, #100	; 0x64
 8001794:	d901      	bls.n	800179a <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8001796:	2303      	movs	r3, #3
 8001798:	e185      	b.n	8001aa6 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800179a:	4b0b      	ldr	r3, [pc, #44]	; (80017c8 <HAL_RCC_OscConfig+0x338>)
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	2380      	movs	r3, #128	; 0x80
 80017a0:	005b      	lsls	r3, r3, #1
 80017a2:	4013      	ands	r3, r2
 80017a4:	d0f0      	beq.n	8001788 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	689b      	ldr	r3, [r3, #8]
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d10e      	bne.n	80017cc <HAL_RCC_OscConfig+0x33c>
 80017ae:	4b03      	ldr	r3, [pc, #12]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 80017b0:	6a1a      	ldr	r2, [r3, #32]
 80017b2:	4b02      	ldr	r3, [pc, #8]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 80017b4:	2101      	movs	r1, #1
 80017b6:	430a      	orrs	r2, r1
 80017b8:	621a      	str	r2, [r3, #32]
 80017ba:	e035      	b.n	8001828 <HAL_RCC_OscConfig+0x398>
 80017bc:	40021000 	.word	0x40021000
 80017c0:	fffeffff 	.word	0xfffeffff
 80017c4:	fffbffff 	.word	0xfffbffff
 80017c8:	40007000 	.word	0x40007000
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d10c      	bne.n	80017ee <HAL_RCC_OscConfig+0x35e>
 80017d4:	4bb6      	ldr	r3, [pc, #728]	; (8001ab0 <HAL_RCC_OscConfig+0x620>)
 80017d6:	6a1a      	ldr	r2, [r3, #32]
 80017d8:	4bb5      	ldr	r3, [pc, #724]	; (8001ab0 <HAL_RCC_OscConfig+0x620>)
 80017da:	2101      	movs	r1, #1
 80017dc:	438a      	bics	r2, r1
 80017de:	621a      	str	r2, [r3, #32]
 80017e0:	4bb3      	ldr	r3, [pc, #716]	; (8001ab0 <HAL_RCC_OscConfig+0x620>)
 80017e2:	6a1a      	ldr	r2, [r3, #32]
 80017e4:	4bb2      	ldr	r3, [pc, #712]	; (8001ab0 <HAL_RCC_OscConfig+0x620>)
 80017e6:	2104      	movs	r1, #4
 80017e8:	438a      	bics	r2, r1
 80017ea:	621a      	str	r2, [r3, #32]
 80017ec:	e01c      	b.n	8001828 <HAL_RCC_OscConfig+0x398>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	2b05      	cmp	r3, #5
 80017f4:	d10c      	bne.n	8001810 <HAL_RCC_OscConfig+0x380>
 80017f6:	4bae      	ldr	r3, [pc, #696]	; (8001ab0 <HAL_RCC_OscConfig+0x620>)
 80017f8:	6a1a      	ldr	r2, [r3, #32]
 80017fa:	4bad      	ldr	r3, [pc, #692]	; (8001ab0 <HAL_RCC_OscConfig+0x620>)
 80017fc:	2104      	movs	r1, #4
 80017fe:	430a      	orrs	r2, r1
 8001800:	621a      	str	r2, [r3, #32]
 8001802:	4bab      	ldr	r3, [pc, #684]	; (8001ab0 <HAL_RCC_OscConfig+0x620>)
 8001804:	6a1a      	ldr	r2, [r3, #32]
 8001806:	4baa      	ldr	r3, [pc, #680]	; (8001ab0 <HAL_RCC_OscConfig+0x620>)
 8001808:	2101      	movs	r1, #1
 800180a:	430a      	orrs	r2, r1
 800180c:	621a      	str	r2, [r3, #32]
 800180e:	e00b      	b.n	8001828 <HAL_RCC_OscConfig+0x398>
 8001810:	4ba7      	ldr	r3, [pc, #668]	; (8001ab0 <HAL_RCC_OscConfig+0x620>)
 8001812:	6a1a      	ldr	r2, [r3, #32]
 8001814:	4ba6      	ldr	r3, [pc, #664]	; (8001ab0 <HAL_RCC_OscConfig+0x620>)
 8001816:	2101      	movs	r1, #1
 8001818:	438a      	bics	r2, r1
 800181a:	621a      	str	r2, [r3, #32]
 800181c:	4ba4      	ldr	r3, [pc, #656]	; (8001ab0 <HAL_RCC_OscConfig+0x620>)
 800181e:	6a1a      	ldr	r2, [r3, #32]
 8001820:	4ba3      	ldr	r3, [pc, #652]	; (8001ab0 <HAL_RCC_OscConfig+0x620>)
 8001822:	2104      	movs	r1, #4
 8001824:	438a      	bics	r2, r1
 8001826:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d014      	beq.n	800185a <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001830:	f7ff fafa 	bl	8000e28 <HAL_GetTick>
 8001834:	0003      	movs	r3, r0
 8001836:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001838:	e009      	b.n	800184e <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800183a:	f7ff faf5 	bl	8000e28 <HAL_GetTick>
 800183e:	0002      	movs	r2, r0
 8001840:	69bb      	ldr	r3, [r7, #24]
 8001842:	1ad3      	subs	r3, r2, r3
 8001844:	4a9b      	ldr	r2, [pc, #620]	; (8001ab4 <HAL_RCC_OscConfig+0x624>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d901      	bls.n	800184e <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 800184a:	2303      	movs	r3, #3
 800184c:	e12b      	b.n	8001aa6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800184e:	4b98      	ldr	r3, [pc, #608]	; (8001ab0 <HAL_RCC_OscConfig+0x620>)
 8001850:	6a1b      	ldr	r3, [r3, #32]
 8001852:	2202      	movs	r2, #2
 8001854:	4013      	ands	r3, r2
 8001856:	d0f0      	beq.n	800183a <HAL_RCC_OscConfig+0x3aa>
 8001858:	e013      	b.n	8001882 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800185a:	f7ff fae5 	bl	8000e28 <HAL_GetTick>
 800185e:	0003      	movs	r3, r0
 8001860:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001862:	e009      	b.n	8001878 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001864:	f7ff fae0 	bl	8000e28 <HAL_GetTick>
 8001868:	0002      	movs	r2, r0
 800186a:	69bb      	ldr	r3, [r7, #24]
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	4a91      	ldr	r2, [pc, #580]	; (8001ab4 <HAL_RCC_OscConfig+0x624>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d901      	bls.n	8001878 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001874:	2303      	movs	r3, #3
 8001876:	e116      	b.n	8001aa6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001878:	4b8d      	ldr	r3, [pc, #564]	; (8001ab0 <HAL_RCC_OscConfig+0x620>)
 800187a:	6a1b      	ldr	r3, [r3, #32]
 800187c:	2202      	movs	r2, #2
 800187e:	4013      	ands	r3, r2
 8001880:	d1f0      	bne.n	8001864 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001882:	231f      	movs	r3, #31
 8001884:	18fb      	adds	r3, r7, r3
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	2b01      	cmp	r3, #1
 800188a:	d105      	bne.n	8001898 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800188c:	4b88      	ldr	r3, [pc, #544]	; (8001ab0 <HAL_RCC_OscConfig+0x620>)
 800188e:	69da      	ldr	r2, [r3, #28]
 8001890:	4b87      	ldr	r3, [pc, #540]	; (8001ab0 <HAL_RCC_OscConfig+0x620>)
 8001892:	4989      	ldr	r1, [pc, #548]	; (8001ab8 <HAL_RCC_OscConfig+0x628>)
 8001894:	400a      	ands	r2, r1
 8001896:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	2210      	movs	r2, #16
 800189e:	4013      	ands	r3, r2
 80018a0:	d063      	beq.n	800196a <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	695b      	ldr	r3, [r3, #20]
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d12a      	bne.n	8001900 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80018aa:	4b81      	ldr	r3, [pc, #516]	; (8001ab0 <HAL_RCC_OscConfig+0x620>)
 80018ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018ae:	4b80      	ldr	r3, [pc, #512]	; (8001ab0 <HAL_RCC_OscConfig+0x620>)
 80018b0:	2104      	movs	r1, #4
 80018b2:	430a      	orrs	r2, r1
 80018b4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80018b6:	4b7e      	ldr	r3, [pc, #504]	; (8001ab0 <HAL_RCC_OscConfig+0x620>)
 80018b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018ba:	4b7d      	ldr	r3, [pc, #500]	; (8001ab0 <HAL_RCC_OscConfig+0x620>)
 80018bc:	2101      	movs	r1, #1
 80018be:	430a      	orrs	r2, r1
 80018c0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018c2:	f7ff fab1 	bl	8000e28 <HAL_GetTick>
 80018c6:	0003      	movs	r3, r0
 80018c8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80018ca:	e008      	b.n	80018de <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80018cc:	f7ff faac 	bl	8000e28 <HAL_GetTick>
 80018d0:	0002      	movs	r2, r0
 80018d2:	69bb      	ldr	r3, [r7, #24]
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	2b02      	cmp	r3, #2
 80018d8:	d901      	bls.n	80018de <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80018da:	2303      	movs	r3, #3
 80018dc:	e0e3      	b.n	8001aa6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80018de:	4b74      	ldr	r3, [pc, #464]	; (8001ab0 <HAL_RCC_OscConfig+0x620>)
 80018e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018e2:	2202      	movs	r2, #2
 80018e4:	4013      	ands	r3, r2
 80018e6:	d0f1      	beq.n	80018cc <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80018e8:	4b71      	ldr	r3, [pc, #452]	; (8001ab0 <HAL_RCC_OscConfig+0x620>)
 80018ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018ec:	22f8      	movs	r2, #248	; 0xf8
 80018ee:	4393      	bics	r3, r2
 80018f0:	0019      	movs	r1, r3
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	699b      	ldr	r3, [r3, #24]
 80018f6:	00da      	lsls	r2, r3, #3
 80018f8:	4b6d      	ldr	r3, [pc, #436]	; (8001ab0 <HAL_RCC_OscConfig+0x620>)
 80018fa:	430a      	orrs	r2, r1
 80018fc:	635a      	str	r2, [r3, #52]	; 0x34
 80018fe:	e034      	b.n	800196a <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	695b      	ldr	r3, [r3, #20]
 8001904:	3305      	adds	r3, #5
 8001906:	d111      	bne.n	800192c <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001908:	4b69      	ldr	r3, [pc, #420]	; (8001ab0 <HAL_RCC_OscConfig+0x620>)
 800190a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800190c:	4b68      	ldr	r3, [pc, #416]	; (8001ab0 <HAL_RCC_OscConfig+0x620>)
 800190e:	2104      	movs	r1, #4
 8001910:	438a      	bics	r2, r1
 8001912:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001914:	4b66      	ldr	r3, [pc, #408]	; (8001ab0 <HAL_RCC_OscConfig+0x620>)
 8001916:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001918:	22f8      	movs	r2, #248	; 0xf8
 800191a:	4393      	bics	r3, r2
 800191c:	0019      	movs	r1, r3
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	699b      	ldr	r3, [r3, #24]
 8001922:	00da      	lsls	r2, r3, #3
 8001924:	4b62      	ldr	r3, [pc, #392]	; (8001ab0 <HAL_RCC_OscConfig+0x620>)
 8001926:	430a      	orrs	r2, r1
 8001928:	635a      	str	r2, [r3, #52]	; 0x34
 800192a:	e01e      	b.n	800196a <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800192c:	4b60      	ldr	r3, [pc, #384]	; (8001ab0 <HAL_RCC_OscConfig+0x620>)
 800192e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001930:	4b5f      	ldr	r3, [pc, #380]	; (8001ab0 <HAL_RCC_OscConfig+0x620>)
 8001932:	2104      	movs	r1, #4
 8001934:	430a      	orrs	r2, r1
 8001936:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001938:	4b5d      	ldr	r3, [pc, #372]	; (8001ab0 <HAL_RCC_OscConfig+0x620>)
 800193a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800193c:	4b5c      	ldr	r3, [pc, #368]	; (8001ab0 <HAL_RCC_OscConfig+0x620>)
 800193e:	2101      	movs	r1, #1
 8001940:	438a      	bics	r2, r1
 8001942:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001944:	f7ff fa70 	bl	8000e28 <HAL_GetTick>
 8001948:	0003      	movs	r3, r0
 800194a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800194c:	e008      	b.n	8001960 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800194e:	f7ff fa6b 	bl	8000e28 <HAL_GetTick>
 8001952:	0002      	movs	r2, r0
 8001954:	69bb      	ldr	r3, [r7, #24]
 8001956:	1ad3      	subs	r3, r2, r3
 8001958:	2b02      	cmp	r3, #2
 800195a:	d901      	bls.n	8001960 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 800195c:	2303      	movs	r3, #3
 800195e:	e0a2      	b.n	8001aa6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001960:	4b53      	ldr	r3, [pc, #332]	; (8001ab0 <HAL_RCC_OscConfig+0x620>)
 8001962:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001964:	2202      	movs	r2, #2
 8001966:	4013      	ands	r3, r2
 8001968:	d1f1      	bne.n	800194e <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6a1b      	ldr	r3, [r3, #32]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d100      	bne.n	8001974 <HAL_RCC_OscConfig+0x4e4>
 8001972:	e097      	b.n	8001aa4 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001974:	4b4e      	ldr	r3, [pc, #312]	; (8001ab0 <HAL_RCC_OscConfig+0x620>)
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	220c      	movs	r2, #12
 800197a:	4013      	ands	r3, r2
 800197c:	2b08      	cmp	r3, #8
 800197e:	d100      	bne.n	8001982 <HAL_RCC_OscConfig+0x4f2>
 8001980:	e06b      	b.n	8001a5a <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6a1b      	ldr	r3, [r3, #32]
 8001986:	2b02      	cmp	r3, #2
 8001988:	d14c      	bne.n	8001a24 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800198a:	4b49      	ldr	r3, [pc, #292]	; (8001ab0 <HAL_RCC_OscConfig+0x620>)
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	4b48      	ldr	r3, [pc, #288]	; (8001ab0 <HAL_RCC_OscConfig+0x620>)
 8001990:	494a      	ldr	r1, [pc, #296]	; (8001abc <HAL_RCC_OscConfig+0x62c>)
 8001992:	400a      	ands	r2, r1
 8001994:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001996:	f7ff fa47 	bl	8000e28 <HAL_GetTick>
 800199a:	0003      	movs	r3, r0
 800199c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800199e:	e008      	b.n	80019b2 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019a0:	f7ff fa42 	bl	8000e28 <HAL_GetTick>
 80019a4:	0002      	movs	r2, r0
 80019a6:	69bb      	ldr	r3, [r7, #24]
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	2b02      	cmp	r3, #2
 80019ac:	d901      	bls.n	80019b2 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 80019ae:	2303      	movs	r3, #3
 80019b0:	e079      	b.n	8001aa6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019b2:	4b3f      	ldr	r3, [pc, #252]	; (8001ab0 <HAL_RCC_OscConfig+0x620>)
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	2380      	movs	r3, #128	; 0x80
 80019b8:	049b      	lsls	r3, r3, #18
 80019ba:	4013      	ands	r3, r2
 80019bc:	d1f0      	bne.n	80019a0 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019be:	4b3c      	ldr	r3, [pc, #240]	; (8001ab0 <HAL_RCC_OscConfig+0x620>)
 80019c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019c2:	220f      	movs	r2, #15
 80019c4:	4393      	bics	r3, r2
 80019c6:	0019      	movs	r1, r3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019cc:	4b38      	ldr	r3, [pc, #224]	; (8001ab0 <HAL_RCC_OscConfig+0x620>)
 80019ce:	430a      	orrs	r2, r1
 80019d0:	62da      	str	r2, [r3, #44]	; 0x2c
 80019d2:	4b37      	ldr	r3, [pc, #220]	; (8001ab0 <HAL_RCC_OscConfig+0x620>)
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	4a3a      	ldr	r2, [pc, #232]	; (8001ac0 <HAL_RCC_OscConfig+0x630>)
 80019d8:	4013      	ands	r3, r2
 80019da:	0019      	movs	r1, r3
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e4:	431a      	orrs	r2, r3
 80019e6:	4b32      	ldr	r3, [pc, #200]	; (8001ab0 <HAL_RCC_OscConfig+0x620>)
 80019e8:	430a      	orrs	r2, r1
 80019ea:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019ec:	4b30      	ldr	r3, [pc, #192]	; (8001ab0 <HAL_RCC_OscConfig+0x620>)
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	4b2f      	ldr	r3, [pc, #188]	; (8001ab0 <HAL_RCC_OscConfig+0x620>)
 80019f2:	2180      	movs	r1, #128	; 0x80
 80019f4:	0449      	lsls	r1, r1, #17
 80019f6:	430a      	orrs	r2, r1
 80019f8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019fa:	f7ff fa15 	bl	8000e28 <HAL_GetTick>
 80019fe:	0003      	movs	r3, r0
 8001a00:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a02:	e008      	b.n	8001a16 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a04:	f7ff fa10 	bl	8000e28 <HAL_GetTick>
 8001a08:	0002      	movs	r2, r0
 8001a0a:	69bb      	ldr	r3, [r7, #24]
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	2b02      	cmp	r3, #2
 8001a10:	d901      	bls.n	8001a16 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001a12:	2303      	movs	r3, #3
 8001a14:	e047      	b.n	8001aa6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a16:	4b26      	ldr	r3, [pc, #152]	; (8001ab0 <HAL_RCC_OscConfig+0x620>)
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	2380      	movs	r3, #128	; 0x80
 8001a1c:	049b      	lsls	r3, r3, #18
 8001a1e:	4013      	ands	r3, r2
 8001a20:	d0f0      	beq.n	8001a04 <HAL_RCC_OscConfig+0x574>
 8001a22:	e03f      	b.n	8001aa4 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a24:	4b22      	ldr	r3, [pc, #136]	; (8001ab0 <HAL_RCC_OscConfig+0x620>)
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	4b21      	ldr	r3, [pc, #132]	; (8001ab0 <HAL_RCC_OscConfig+0x620>)
 8001a2a:	4924      	ldr	r1, [pc, #144]	; (8001abc <HAL_RCC_OscConfig+0x62c>)
 8001a2c:	400a      	ands	r2, r1
 8001a2e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a30:	f7ff f9fa 	bl	8000e28 <HAL_GetTick>
 8001a34:	0003      	movs	r3, r0
 8001a36:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a38:	e008      	b.n	8001a4c <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a3a:	f7ff f9f5 	bl	8000e28 <HAL_GetTick>
 8001a3e:	0002      	movs	r2, r0
 8001a40:	69bb      	ldr	r3, [r7, #24]
 8001a42:	1ad3      	subs	r3, r2, r3
 8001a44:	2b02      	cmp	r3, #2
 8001a46:	d901      	bls.n	8001a4c <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001a48:	2303      	movs	r3, #3
 8001a4a:	e02c      	b.n	8001aa6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a4c:	4b18      	ldr	r3, [pc, #96]	; (8001ab0 <HAL_RCC_OscConfig+0x620>)
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	2380      	movs	r3, #128	; 0x80
 8001a52:	049b      	lsls	r3, r3, #18
 8001a54:	4013      	ands	r3, r2
 8001a56:	d1f0      	bne.n	8001a3a <HAL_RCC_OscConfig+0x5aa>
 8001a58:	e024      	b.n	8001aa4 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6a1b      	ldr	r3, [r3, #32]
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	d101      	bne.n	8001a66 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e01f      	b.n	8001aa6 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001a66:	4b12      	ldr	r3, [pc, #72]	; (8001ab0 <HAL_RCC_OscConfig+0x620>)
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001a6c:	4b10      	ldr	r3, [pc, #64]	; (8001ab0 <HAL_RCC_OscConfig+0x620>)
 8001a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a70:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a72:	697a      	ldr	r2, [r7, #20]
 8001a74:	2380      	movs	r3, #128	; 0x80
 8001a76:	025b      	lsls	r3, r3, #9
 8001a78:	401a      	ands	r2, r3
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	d10e      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	220f      	movs	r2, #15
 8001a86:	401a      	ands	r2, r3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d107      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001a90:	697a      	ldr	r2, [r7, #20]
 8001a92:	23f0      	movs	r3, #240	; 0xf0
 8001a94:	039b      	lsls	r3, r3, #14
 8001a96:	401a      	ands	r2, r3
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d001      	beq.n	8001aa4 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e000      	b.n	8001aa6 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001aa4:	2300      	movs	r3, #0
}
 8001aa6:	0018      	movs	r0, r3
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	b008      	add	sp, #32
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	46c0      	nop			; (mov r8, r8)
 8001ab0:	40021000 	.word	0x40021000
 8001ab4:	00001388 	.word	0x00001388
 8001ab8:	efffffff 	.word	0xefffffff
 8001abc:	feffffff 	.word	0xfeffffff
 8001ac0:	ffc2ffff 	.word	0xffc2ffff

08001ac4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b084      	sub	sp, #16
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
 8001acc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d101      	bne.n	8001ad8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e0b3      	b.n	8001c40 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ad8:	4b5b      	ldr	r3, [pc, #364]	; (8001c48 <HAL_RCC_ClockConfig+0x184>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	2201      	movs	r2, #1
 8001ade:	4013      	ands	r3, r2
 8001ae0:	683a      	ldr	r2, [r7, #0]
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	d911      	bls.n	8001b0a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ae6:	4b58      	ldr	r3, [pc, #352]	; (8001c48 <HAL_RCC_ClockConfig+0x184>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	2201      	movs	r2, #1
 8001aec:	4393      	bics	r3, r2
 8001aee:	0019      	movs	r1, r3
 8001af0:	4b55      	ldr	r3, [pc, #340]	; (8001c48 <HAL_RCC_ClockConfig+0x184>)
 8001af2:	683a      	ldr	r2, [r7, #0]
 8001af4:	430a      	orrs	r2, r1
 8001af6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001af8:	4b53      	ldr	r3, [pc, #332]	; (8001c48 <HAL_RCC_ClockConfig+0x184>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	2201      	movs	r2, #1
 8001afe:	4013      	ands	r3, r2
 8001b00:	683a      	ldr	r2, [r7, #0]
 8001b02:	429a      	cmp	r2, r3
 8001b04:	d001      	beq.n	8001b0a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	e09a      	b.n	8001c40 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	2202      	movs	r2, #2
 8001b10:	4013      	ands	r3, r2
 8001b12:	d015      	beq.n	8001b40 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	2204      	movs	r2, #4
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	d006      	beq.n	8001b2c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001b1e:	4b4b      	ldr	r3, [pc, #300]	; (8001c4c <HAL_RCC_ClockConfig+0x188>)
 8001b20:	685a      	ldr	r2, [r3, #4]
 8001b22:	4b4a      	ldr	r3, [pc, #296]	; (8001c4c <HAL_RCC_ClockConfig+0x188>)
 8001b24:	21e0      	movs	r1, #224	; 0xe0
 8001b26:	00c9      	lsls	r1, r1, #3
 8001b28:	430a      	orrs	r2, r1
 8001b2a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b2c:	4b47      	ldr	r3, [pc, #284]	; (8001c4c <HAL_RCC_ClockConfig+0x188>)
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	22f0      	movs	r2, #240	; 0xf0
 8001b32:	4393      	bics	r3, r2
 8001b34:	0019      	movs	r1, r3
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	689a      	ldr	r2, [r3, #8]
 8001b3a:	4b44      	ldr	r3, [pc, #272]	; (8001c4c <HAL_RCC_ClockConfig+0x188>)
 8001b3c:	430a      	orrs	r2, r1
 8001b3e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	2201      	movs	r2, #1
 8001b46:	4013      	ands	r3, r2
 8001b48:	d040      	beq.n	8001bcc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d107      	bne.n	8001b62 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b52:	4b3e      	ldr	r3, [pc, #248]	; (8001c4c <HAL_RCC_ClockConfig+0x188>)
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	2380      	movs	r3, #128	; 0x80
 8001b58:	029b      	lsls	r3, r3, #10
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	d114      	bne.n	8001b88 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e06e      	b.n	8001c40 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	2b02      	cmp	r3, #2
 8001b68:	d107      	bne.n	8001b7a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b6a:	4b38      	ldr	r3, [pc, #224]	; (8001c4c <HAL_RCC_ClockConfig+0x188>)
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	2380      	movs	r3, #128	; 0x80
 8001b70:	049b      	lsls	r3, r3, #18
 8001b72:	4013      	ands	r3, r2
 8001b74:	d108      	bne.n	8001b88 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e062      	b.n	8001c40 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b7a:	4b34      	ldr	r3, [pc, #208]	; (8001c4c <HAL_RCC_ClockConfig+0x188>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	2202      	movs	r2, #2
 8001b80:	4013      	ands	r3, r2
 8001b82:	d101      	bne.n	8001b88 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	e05b      	b.n	8001c40 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b88:	4b30      	ldr	r3, [pc, #192]	; (8001c4c <HAL_RCC_ClockConfig+0x188>)
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	2203      	movs	r2, #3
 8001b8e:	4393      	bics	r3, r2
 8001b90:	0019      	movs	r1, r3
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	685a      	ldr	r2, [r3, #4]
 8001b96:	4b2d      	ldr	r3, [pc, #180]	; (8001c4c <HAL_RCC_ClockConfig+0x188>)
 8001b98:	430a      	orrs	r2, r1
 8001b9a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b9c:	f7ff f944 	bl	8000e28 <HAL_GetTick>
 8001ba0:	0003      	movs	r3, r0
 8001ba2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ba4:	e009      	b.n	8001bba <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ba6:	f7ff f93f 	bl	8000e28 <HAL_GetTick>
 8001baa:	0002      	movs	r2, r0
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	1ad3      	subs	r3, r2, r3
 8001bb0:	4a27      	ldr	r2, [pc, #156]	; (8001c50 <HAL_RCC_ClockConfig+0x18c>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d901      	bls.n	8001bba <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	e042      	b.n	8001c40 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bba:	4b24      	ldr	r3, [pc, #144]	; (8001c4c <HAL_RCC_ClockConfig+0x188>)
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	220c      	movs	r2, #12
 8001bc0:	401a      	ands	r2, r3
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d1ec      	bne.n	8001ba6 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001bcc:	4b1e      	ldr	r3, [pc, #120]	; (8001c48 <HAL_RCC_ClockConfig+0x184>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	683a      	ldr	r2, [r7, #0]
 8001bd6:	429a      	cmp	r2, r3
 8001bd8:	d211      	bcs.n	8001bfe <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bda:	4b1b      	ldr	r3, [pc, #108]	; (8001c48 <HAL_RCC_ClockConfig+0x184>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	2201      	movs	r2, #1
 8001be0:	4393      	bics	r3, r2
 8001be2:	0019      	movs	r1, r3
 8001be4:	4b18      	ldr	r3, [pc, #96]	; (8001c48 <HAL_RCC_ClockConfig+0x184>)
 8001be6:	683a      	ldr	r2, [r7, #0]
 8001be8:	430a      	orrs	r2, r1
 8001bea:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bec:	4b16      	ldr	r3, [pc, #88]	; (8001c48 <HAL_RCC_ClockConfig+0x184>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	683a      	ldr	r2, [r7, #0]
 8001bf6:	429a      	cmp	r2, r3
 8001bf8:	d001      	beq.n	8001bfe <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e020      	b.n	8001c40 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	2204      	movs	r2, #4
 8001c04:	4013      	ands	r3, r2
 8001c06:	d009      	beq.n	8001c1c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001c08:	4b10      	ldr	r3, [pc, #64]	; (8001c4c <HAL_RCC_ClockConfig+0x188>)
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	4a11      	ldr	r2, [pc, #68]	; (8001c54 <HAL_RCC_ClockConfig+0x190>)
 8001c0e:	4013      	ands	r3, r2
 8001c10:	0019      	movs	r1, r3
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	68da      	ldr	r2, [r3, #12]
 8001c16:	4b0d      	ldr	r3, [pc, #52]	; (8001c4c <HAL_RCC_ClockConfig+0x188>)
 8001c18:	430a      	orrs	r2, r1
 8001c1a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001c1c:	f000 f820 	bl	8001c60 <HAL_RCC_GetSysClockFreq>
 8001c20:	0001      	movs	r1, r0
 8001c22:	4b0a      	ldr	r3, [pc, #40]	; (8001c4c <HAL_RCC_ClockConfig+0x188>)
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	091b      	lsrs	r3, r3, #4
 8001c28:	220f      	movs	r2, #15
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	4a0a      	ldr	r2, [pc, #40]	; (8001c58 <HAL_RCC_ClockConfig+0x194>)
 8001c2e:	5cd3      	ldrb	r3, [r2, r3]
 8001c30:	000a      	movs	r2, r1
 8001c32:	40da      	lsrs	r2, r3
 8001c34:	4b09      	ldr	r3, [pc, #36]	; (8001c5c <HAL_RCC_ClockConfig+0x198>)
 8001c36:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001c38:	2000      	movs	r0, #0
 8001c3a:	f7ff f8af 	bl	8000d9c <HAL_InitTick>
  
  return HAL_OK;
 8001c3e:	2300      	movs	r3, #0
}
 8001c40:	0018      	movs	r0, r3
 8001c42:	46bd      	mov	sp, r7
 8001c44:	b004      	add	sp, #16
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	40022000 	.word	0x40022000
 8001c4c:	40021000 	.word	0x40021000
 8001c50:	00001388 	.word	0x00001388
 8001c54:	fffff8ff 	.word	0xfffff8ff
 8001c58:	08003884 	.word	0x08003884
 8001c5c:	20000004 	.word	0x20000004

08001c60 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b086      	sub	sp, #24
 8001c64:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001c66:	2300      	movs	r3, #0
 8001c68:	60fb      	str	r3, [r7, #12]
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	60bb      	str	r3, [r7, #8]
 8001c6e:	2300      	movs	r3, #0
 8001c70:	617b      	str	r3, [r7, #20]
 8001c72:	2300      	movs	r3, #0
 8001c74:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001c76:	2300      	movs	r3, #0
 8001c78:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001c7a:	4b20      	ldr	r3, [pc, #128]	; (8001cfc <HAL_RCC_GetSysClockFreq+0x9c>)
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	220c      	movs	r2, #12
 8001c84:	4013      	ands	r3, r2
 8001c86:	2b04      	cmp	r3, #4
 8001c88:	d002      	beq.n	8001c90 <HAL_RCC_GetSysClockFreq+0x30>
 8001c8a:	2b08      	cmp	r3, #8
 8001c8c:	d003      	beq.n	8001c96 <HAL_RCC_GetSysClockFreq+0x36>
 8001c8e:	e02c      	b.n	8001cea <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c90:	4b1b      	ldr	r3, [pc, #108]	; (8001d00 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001c92:	613b      	str	r3, [r7, #16]
      break;
 8001c94:	e02c      	b.n	8001cf0 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	0c9b      	lsrs	r3, r3, #18
 8001c9a:	220f      	movs	r2, #15
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	4a19      	ldr	r2, [pc, #100]	; (8001d04 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001ca0:	5cd3      	ldrb	r3, [r2, r3]
 8001ca2:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001ca4:	4b15      	ldr	r3, [pc, #84]	; (8001cfc <HAL_RCC_GetSysClockFreq+0x9c>)
 8001ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ca8:	220f      	movs	r2, #15
 8001caa:	4013      	ands	r3, r2
 8001cac:	4a16      	ldr	r2, [pc, #88]	; (8001d08 <HAL_RCC_GetSysClockFreq+0xa8>)
 8001cae:	5cd3      	ldrb	r3, [r2, r3]
 8001cb0:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001cb2:	68fa      	ldr	r2, [r7, #12]
 8001cb4:	2380      	movs	r3, #128	; 0x80
 8001cb6:	025b      	lsls	r3, r3, #9
 8001cb8:	4013      	ands	r3, r2
 8001cba:	d009      	beq.n	8001cd0 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001cbc:	68b9      	ldr	r1, [r7, #8]
 8001cbe:	4810      	ldr	r0, [pc, #64]	; (8001d00 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001cc0:	f7fe fa22 	bl	8000108 <__udivsi3>
 8001cc4:	0003      	movs	r3, r0
 8001cc6:	001a      	movs	r2, r3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	4353      	muls	r3, r2
 8001ccc:	617b      	str	r3, [r7, #20]
 8001cce:	e009      	b.n	8001ce4 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001cd0:	6879      	ldr	r1, [r7, #4]
 8001cd2:	000a      	movs	r2, r1
 8001cd4:	0152      	lsls	r2, r2, #5
 8001cd6:	1a52      	subs	r2, r2, r1
 8001cd8:	0193      	lsls	r3, r2, #6
 8001cda:	1a9b      	subs	r3, r3, r2
 8001cdc:	00db      	lsls	r3, r3, #3
 8001cde:	185b      	adds	r3, r3, r1
 8001ce0:	021b      	lsls	r3, r3, #8
 8001ce2:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	613b      	str	r3, [r7, #16]
      break;
 8001ce8:	e002      	b.n	8001cf0 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001cea:	4b05      	ldr	r3, [pc, #20]	; (8001d00 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001cec:	613b      	str	r3, [r7, #16]
      break;
 8001cee:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001cf0:	693b      	ldr	r3, [r7, #16]
}
 8001cf2:	0018      	movs	r0, r3
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	b006      	add	sp, #24
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	46c0      	nop			; (mov r8, r8)
 8001cfc:	40021000 	.word	0x40021000
 8001d00:	007a1200 	.word	0x007a1200
 8001d04:	0800389c 	.word	0x0800389c
 8001d08:	080038ac 	.word	0x080038ac

08001d0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d10:	4b02      	ldr	r3, [pc, #8]	; (8001d1c <HAL_RCC_GetHCLKFreq+0x10>)
 8001d12:	681b      	ldr	r3, [r3, #0]
}
 8001d14:	0018      	movs	r0, r3
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	46c0      	nop			; (mov r8, r8)
 8001d1c:	20000004 	.word	0x20000004

08001d20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001d24:	f7ff fff2 	bl	8001d0c <HAL_RCC_GetHCLKFreq>
 8001d28:	0001      	movs	r1, r0
 8001d2a:	4b06      	ldr	r3, [pc, #24]	; (8001d44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	0a1b      	lsrs	r3, r3, #8
 8001d30:	2207      	movs	r2, #7
 8001d32:	4013      	ands	r3, r2
 8001d34:	4a04      	ldr	r2, [pc, #16]	; (8001d48 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001d36:	5cd3      	ldrb	r3, [r2, r3]
 8001d38:	40d9      	lsrs	r1, r3
 8001d3a:	000b      	movs	r3, r1
}    
 8001d3c:	0018      	movs	r0, r3
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	46c0      	nop			; (mov r8, r8)
 8001d44:	40021000 	.word	0x40021000
 8001d48:	08003894 	.word	0x08003894

08001d4c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b086      	sub	sp, #24
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d54:	2300      	movs	r3, #0
 8001d56:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	2380      	movs	r3, #128	; 0x80
 8001d62:	025b      	lsls	r3, r3, #9
 8001d64:	4013      	ands	r3, r2
 8001d66:	d100      	bne.n	8001d6a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001d68:	e08e      	b.n	8001e88 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001d6a:	2017      	movs	r0, #23
 8001d6c:	183b      	adds	r3, r7, r0
 8001d6e:	2200      	movs	r2, #0
 8001d70:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d72:	4b57      	ldr	r3, [pc, #348]	; (8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001d74:	69da      	ldr	r2, [r3, #28]
 8001d76:	2380      	movs	r3, #128	; 0x80
 8001d78:	055b      	lsls	r3, r3, #21
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	d110      	bne.n	8001da0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001d7e:	4b54      	ldr	r3, [pc, #336]	; (8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001d80:	69da      	ldr	r2, [r3, #28]
 8001d82:	4b53      	ldr	r3, [pc, #332]	; (8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001d84:	2180      	movs	r1, #128	; 0x80
 8001d86:	0549      	lsls	r1, r1, #21
 8001d88:	430a      	orrs	r2, r1
 8001d8a:	61da      	str	r2, [r3, #28]
 8001d8c:	4b50      	ldr	r3, [pc, #320]	; (8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001d8e:	69da      	ldr	r2, [r3, #28]
 8001d90:	2380      	movs	r3, #128	; 0x80
 8001d92:	055b      	lsls	r3, r3, #21
 8001d94:	4013      	ands	r3, r2
 8001d96:	60bb      	str	r3, [r7, #8]
 8001d98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d9a:	183b      	adds	r3, r7, r0
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001da0:	4b4c      	ldr	r3, [pc, #304]	; (8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	2380      	movs	r3, #128	; 0x80
 8001da6:	005b      	lsls	r3, r3, #1
 8001da8:	4013      	ands	r3, r2
 8001daa:	d11a      	bne.n	8001de2 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dac:	4b49      	ldr	r3, [pc, #292]	; (8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	4b48      	ldr	r3, [pc, #288]	; (8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001db2:	2180      	movs	r1, #128	; 0x80
 8001db4:	0049      	lsls	r1, r1, #1
 8001db6:	430a      	orrs	r2, r1
 8001db8:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dba:	f7ff f835 	bl	8000e28 <HAL_GetTick>
 8001dbe:	0003      	movs	r3, r0
 8001dc0:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dc2:	e008      	b.n	8001dd6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dc4:	f7ff f830 	bl	8000e28 <HAL_GetTick>
 8001dc8:	0002      	movs	r2, r0
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	2b64      	cmp	r3, #100	; 0x64
 8001dd0:	d901      	bls.n	8001dd6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	e077      	b.n	8001ec6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dd6:	4b3f      	ldr	r3, [pc, #252]	; (8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	2380      	movs	r3, #128	; 0x80
 8001ddc:	005b      	lsls	r3, r3, #1
 8001dde:	4013      	ands	r3, r2
 8001de0:	d0f0      	beq.n	8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001de2:	4b3b      	ldr	r3, [pc, #236]	; (8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001de4:	6a1a      	ldr	r2, [r3, #32]
 8001de6:	23c0      	movs	r3, #192	; 0xc0
 8001de8:	009b      	lsls	r3, r3, #2
 8001dea:	4013      	ands	r3, r2
 8001dec:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d034      	beq.n	8001e5e <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	685a      	ldr	r2, [r3, #4]
 8001df8:	23c0      	movs	r3, #192	; 0xc0
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	68fa      	ldr	r2, [r7, #12]
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d02c      	beq.n	8001e5e <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001e04:	4b32      	ldr	r3, [pc, #200]	; (8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e06:	6a1b      	ldr	r3, [r3, #32]
 8001e08:	4a33      	ldr	r2, [pc, #204]	; (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001e0e:	4b30      	ldr	r3, [pc, #192]	; (8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e10:	6a1a      	ldr	r2, [r3, #32]
 8001e12:	4b2f      	ldr	r3, [pc, #188]	; (8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e14:	2180      	movs	r1, #128	; 0x80
 8001e16:	0249      	lsls	r1, r1, #9
 8001e18:	430a      	orrs	r2, r1
 8001e1a:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001e1c:	4b2c      	ldr	r3, [pc, #176]	; (8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e1e:	6a1a      	ldr	r2, [r3, #32]
 8001e20:	4b2b      	ldr	r3, [pc, #172]	; (8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e22:	492e      	ldr	r1, [pc, #184]	; (8001edc <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8001e24:	400a      	ands	r2, r1
 8001e26:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001e28:	4b29      	ldr	r3, [pc, #164]	; (8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e2a:	68fa      	ldr	r2, [r7, #12]
 8001e2c:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	2201      	movs	r2, #1
 8001e32:	4013      	ands	r3, r2
 8001e34:	d013      	beq.n	8001e5e <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e36:	f7fe fff7 	bl	8000e28 <HAL_GetTick>
 8001e3a:	0003      	movs	r3, r0
 8001e3c:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e3e:	e009      	b.n	8001e54 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e40:	f7fe fff2 	bl	8000e28 <HAL_GetTick>
 8001e44:	0002      	movs	r2, r0
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	4a25      	ldr	r2, [pc, #148]	; (8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d901      	bls.n	8001e54 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001e50:	2303      	movs	r3, #3
 8001e52:	e038      	b.n	8001ec6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e54:	4b1e      	ldr	r3, [pc, #120]	; (8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e56:	6a1b      	ldr	r3, [r3, #32]
 8001e58:	2202      	movs	r2, #2
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	d0f0      	beq.n	8001e40 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e5e:	4b1c      	ldr	r3, [pc, #112]	; (8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e60:	6a1b      	ldr	r3, [r3, #32]
 8001e62:	4a1d      	ldr	r2, [pc, #116]	; (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001e64:	4013      	ands	r3, r2
 8001e66:	0019      	movs	r1, r3
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	685a      	ldr	r2, [r3, #4]
 8001e6c:	4b18      	ldr	r3, [pc, #96]	; (8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e6e:	430a      	orrs	r2, r1
 8001e70:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001e72:	2317      	movs	r3, #23
 8001e74:	18fb      	adds	r3, r7, r3
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	d105      	bne.n	8001e88 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e7c:	4b14      	ldr	r3, [pc, #80]	; (8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e7e:	69da      	ldr	r2, [r3, #28]
 8001e80:	4b13      	ldr	r3, [pc, #76]	; (8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e82:	4918      	ldr	r1, [pc, #96]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8001e84:	400a      	ands	r2, r1
 8001e86:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	4013      	ands	r3, r2
 8001e90:	d009      	beq.n	8001ea6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001e92:	4b0f      	ldr	r3, [pc, #60]	; (8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e96:	2203      	movs	r2, #3
 8001e98:	4393      	bics	r3, r2
 8001e9a:	0019      	movs	r1, r3
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	689a      	ldr	r2, [r3, #8]
 8001ea0:	4b0b      	ldr	r3, [pc, #44]	; (8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001ea2:	430a      	orrs	r2, r1
 8001ea4:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	2220      	movs	r2, #32
 8001eac:	4013      	ands	r3, r2
 8001eae:	d009      	beq.n	8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001eb0:	4b07      	ldr	r3, [pc, #28]	; (8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb4:	2210      	movs	r2, #16
 8001eb6:	4393      	bics	r3, r2
 8001eb8:	0019      	movs	r1, r3
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	68da      	ldr	r2, [r3, #12]
 8001ebe:	4b04      	ldr	r3, [pc, #16]	; (8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001ec0:	430a      	orrs	r2, r1
 8001ec2:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001ec4:	2300      	movs	r3, #0
}
 8001ec6:	0018      	movs	r0, r3
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	b006      	add	sp, #24
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	46c0      	nop			; (mov r8, r8)
 8001ed0:	40021000 	.word	0x40021000
 8001ed4:	40007000 	.word	0x40007000
 8001ed8:	fffffcff 	.word	0xfffffcff
 8001edc:	fffeffff 	.word	0xfffeffff
 8001ee0:	00001388 	.word	0x00001388
 8001ee4:	efffffff 	.word	0xefffffff

08001ee8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d101      	bne.n	8001efa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e042      	b.n	8001f80 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	223d      	movs	r2, #61	; 0x3d
 8001efe:	5c9b      	ldrb	r3, [r3, r2]
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d107      	bne.n	8001f16 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	223c      	movs	r2, #60	; 0x3c
 8001f0a:	2100      	movs	r1, #0
 8001f0c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	0018      	movs	r0, r3
 8001f12:	f7fe fe53 	bl	8000bbc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	223d      	movs	r2, #61	; 0x3d
 8001f1a:	2102      	movs	r1, #2
 8001f1c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	3304      	adds	r3, #4
 8001f26:	0019      	movs	r1, r3
 8001f28:	0010      	movs	r0, r2
 8001f2a:	f000 f9a9 	bl	8002280 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2246      	movs	r2, #70	; 0x46
 8001f32:	2101      	movs	r1, #1
 8001f34:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	223e      	movs	r2, #62	; 0x3e
 8001f3a:	2101      	movs	r1, #1
 8001f3c:	5499      	strb	r1, [r3, r2]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	223f      	movs	r2, #63	; 0x3f
 8001f42:	2101      	movs	r1, #1
 8001f44:	5499      	strb	r1, [r3, r2]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2240      	movs	r2, #64	; 0x40
 8001f4a:	2101      	movs	r1, #1
 8001f4c:	5499      	strb	r1, [r3, r2]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2241      	movs	r2, #65	; 0x41
 8001f52:	2101      	movs	r1, #1
 8001f54:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2242      	movs	r2, #66	; 0x42
 8001f5a:	2101      	movs	r1, #1
 8001f5c:	5499      	strb	r1, [r3, r2]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2243      	movs	r2, #67	; 0x43
 8001f62:	2101      	movs	r1, #1
 8001f64:	5499      	strb	r1, [r3, r2]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2244      	movs	r2, #68	; 0x44
 8001f6a:	2101      	movs	r1, #1
 8001f6c:	5499      	strb	r1, [r3, r2]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2245      	movs	r2, #69	; 0x45
 8001f72:	2101      	movs	r1, #1
 8001f74:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	223d      	movs	r2, #61	; 0x3d
 8001f7a:	2101      	movs	r1, #1
 8001f7c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001f7e:	2300      	movs	r3, #0
}
 8001f80:	0018      	movs	r0, r3
 8001f82:	46bd      	mov	sp, r7
 8001f84:	b002      	add	sp, #8
 8001f86:	bd80      	pop	{r7, pc}

08001f88 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b084      	sub	sp, #16
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	223d      	movs	r2, #61	; 0x3d
 8001f94:	5c9b      	ldrb	r3, [r3, r2]
 8001f96:	b2db      	uxtb	r3, r3
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d001      	beq.n	8001fa0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e030      	b.n	8002002 <HAL_TIM_Base_Start_IT+0x7a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	223d      	movs	r2, #61	; 0x3d
 8001fa4:	2102      	movs	r1, #2
 8001fa6:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	68da      	ldr	r2, [r3, #12]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	2101      	movs	r1, #1
 8001fb4:	430a      	orrs	r2, r1
 8001fb6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a13      	ldr	r2, [pc, #76]	; (800200c <HAL_TIM_Base_Start_IT+0x84>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d004      	beq.n	8001fcc <HAL_TIM_Base_Start_IT+0x44>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a12      	ldr	r2, [pc, #72]	; (8002010 <HAL_TIM_Base_Start_IT+0x88>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d111      	bne.n	8001ff0 <HAL_TIM_Base_Start_IT+0x68>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	2207      	movs	r2, #7
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	2b06      	cmp	r3, #6
 8001fdc:	d010      	beq.n	8002000 <HAL_TIM_Base_Start_IT+0x78>
    {
      __HAL_TIM_ENABLE(htim);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	2101      	movs	r1, #1
 8001fea:	430a      	orrs	r2, r1
 8001fec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fee:	e007      	b.n	8002000 <HAL_TIM_Base_Start_IT+0x78>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	2101      	movs	r1, #1
 8001ffc:	430a      	orrs	r2, r1
 8001ffe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002000:	2300      	movs	r3, #0
}
 8002002:	0018      	movs	r0, r3
 8002004:	46bd      	mov	sp, r7
 8002006:	b004      	add	sp, #16
 8002008:	bd80      	pop	{r7, pc}
 800200a:	46c0      	nop			; (mov r8, r8)
 800200c:	40012c00 	.word	0x40012c00
 8002010:	40000400 	.word	0x40000400

08002014 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	691b      	ldr	r3, [r3, #16]
 8002022:	2202      	movs	r2, #2
 8002024:	4013      	ands	r3, r2
 8002026:	2b02      	cmp	r3, #2
 8002028:	d124      	bne.n	8002074 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	2202      	movs	r2, #2
 8002032:	4013      	ands	r3, r2
 8002034:	2b02      	cmp	r3, #2
 8002036:	d11d      	bne.n	8002074 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	2203      	movs	r2, #3
 800203e:	4252      	negs	r2, r2
 8002040:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2201      	movs	r2, #1
 8002046:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	699b      	ldr	r3, [r3, #24]
 800204e:	2203      	movs	r2, #3
 8002050:	4013      	ands	r3, r2
 8002052:	d004      	beq.n	800205e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	0018      	movs	r0, r3
 8002058:	f000 f8fa 	bl	8002250 <HAL_TIM_IC_CaptureCallback>
 800205c:	e007      	b.n	800206e <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	0018      	movs	r0, r3
 8002062:	f000 f8ed 	bl	8002240 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	0018      	movs	r0, r3
 800206a:	f000 f8f9 	bl	8002260 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2200      	movs	r2, #0
 8002072:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	691b      	ldr	r3, [r3, #16]
 800207a:	2204      	movs	r2, #4
 800207c:	4013      	ands	r3, r2
 800207e:	2b04      	cmp	r3, #4
 8002080:	d125      	bne.n	80020ce <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	2204      	movs	r2, #4
 800208a:	4013      	ands	r3, r2
 800208c:	2b04      	cmp	r3, #4
 800208e:	d11e      	bne.n	80020ce <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	2205      	movs	r2, #5
 8002096:	4252      	negs	r2, r2
 8002098:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2202      	movs	r2, #2
 800209e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	699a      	ldr	r2, [r3, #24]
 80020a6:	23c0      	movs	r3, #192	; 0xc0
 80020a8:	009b      	lsls	r3, r3, #2
 80020aa:	4013      	ands	r3, r2
 80020ac:	d004      	beq.n	80020b8 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	0018      	movs	r0, r3
 80020b2:	f000 f8cd 	bl	8002250 <HAL_TIM_IC_CaptureCallback>
 80020b6:	e007      	b.n	80020c8 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	0018      	movs	r0, r3
 80020bc:	f000 f8c0 	bl	8002240 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	0018      	movs	r0, r3
 80020c4:	f000 f8cc 	bl	8002260 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2200      	movs	r2, #0
 80020cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	691b      	ldr	r3, [r3, #16]
 80020d4:	2208      	movs	r2, #8
 80020d6:	4013      	ands	r3, r2
 80020d8:	2b08      	cmp	r3, #8
 80020da:	d124      	bne.n	8002126 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	68db      	ldr	r3, [r3, #12]
 80020e2:	2208      	movs	r2, #8
 80020e4:	4013      	ands	r3, r2
 80020e6:	2b08      	cmp	r3, #8
 80020e8:	d11d      	bne.n	8002126 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	2209      	movs	r2, #9
 80020f0:	4252      	negs	r2, r2
 80020f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2204      	movs	r2, #4
 80020f8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	69db      	ldr	r3, [r3, #28]
 8002100:	2203      	movs	r2, #3
 8002102:	4013      	ands	r3, r2
 8002104:	d004      	beq.n	8002110 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	0018      	movs	r0, r3
 800210a:	f000 f8a1 	bl	8002250 <HAL_TIM_IC_CaptureCallback>
 800210e:	e007      	b.n	8002120 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	0018      	movs	r0, r3
 8002114:	f000 f894 	bl	8002240 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	0018      	movs	r0, r3
 800211c:	f000 f8a0 	bl	8002260 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2200      	movs	r2, #0
 8002124:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	691b      	ldr	r3, [r3, #16]
 800212c:	2210      	movs	r2, #16
 800212e:	4013      	ands	r3, r2
 8002130:	2b10      	cmp	r3, #16
 8002132:	d125      	bne.n	8002180 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	68db      	ldr	r3, [r3, #12]
 800213a:	2210      	movs	r2, #16
 800213c:	4013      	ands	r3, r2
 800213e:	2b10      	cmp	r3, #16
 8002140:	d11e      	bne.n	8002180 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	2211      	movs	r2, #17
 8002148:	4252      	negs	r2, r2
 800214a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2208      	movs	r2, #8
 8002150:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	69da      	ldr	r2, [r3, #28]
 8002158:	23c0      	movs	r3, #192	; 0xc0
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	4013      	ands	r3, r2
 800215e:	d004      	beq.n	800216a <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	0018      	movs	r0, r3
 8002164:	f000 f874 	bl	8002250 <HAL_TIM_IC_CaptureCallback>
 8002168:	e007      	b.n	800217a <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	0018      	movs	r0, r3
 800216e:	f000 f867 	bl	8002240 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	0018      	movs	r0, r3
 8002176:	f000 f873 	bl	8002260 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2200      	movs	r2, #0
 800217e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	691b      	ldr	r3, [r3, #16]
 8002186:	2201      	movs	r2, #1
 8002188:	4013      	ands	r3, r2
 800218a:	2b01      	cmp	r3, #1
 800218c:	d10f      	bne.n	80021ae <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	2201      	movs	r2, #1
 8002196:	4013      	ands	r3, r2
 8002198:	2b01      	cmp	r3, #1
 800219a:	d108      	bne.n	80021ae <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	2202      	movs	r2, #2
 80021a2:	4252      	negs	r2, r2
 80021a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	0018      	movs	r0, r3
 80021aa:	f7fe fb0f 	bl	80007cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	691b      	ldr	r3, [r3, #16]
 80021b4:	2280      	movs	r2, #128	; 0x80
 80021b6:	4013      	ands	r3, r2
 80021b8:	2b80      	cmp	r3, #128	; 0x80
 80021ba:	d10f      	bne.n	80021dc <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	68db      	ldr	r3, [r3, #12]
 80021c2:	2280      	movs	r2, #128	; 0x80
 80021c4:	4013      	ands	r3, r2
 80021c6:	2b80      	cmp	r3, #128	; 0x80
 80021c8:	d108      	bne.n	80021dc <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	2281      	movs	r2, #129	; 0x81
 80021d0:	4252      	negs	r2, r2
 80021d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	0018      	movs	r0, r3
 80021d8:	f000 f8c6 	bl	8002368 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	691b      	ldr	r3, [r3, #16]
 80021e2:	2240      	movs	r2, #64	; 0x40
 80021e4:	4013      	ands	r3, r2
 80021e6:	2b40      	cmp	r3, #64	; 0x40
 80021e8:	d10f      	bne.n	800220a <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	2240      	movs	r2, #64	; 0x40
 80021f2:	4013      	ands	r3, r2
 80021f4:	2b40      	cmp	r3, #64	; 0x40
 80021f6:	d108      	bne.n	800220a <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	2241      	movs	r2, #65	; 0x41
 80021fe:	4252      	negs	r2, r2
 8002200:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	0018      	movs	r0, r3
 8002206:	f000 f833 	bl	8002270 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	691b      	ldr	r3, [r3, #16]
 8002210:	2220      	movs	r2, #32
 8002212:	4013      	ands	r3, r2
 8002214:	2b20      	cmp	r3, #32
 8002216:	d10f      	bne.n	8002238 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	68db      	ldr	r3, [r3, #12]
 800221e:	2220      	movs	r2, #32
 8002220:	4013      	ands	r3, r2
 8002222:	2b20      	cmp	r3, #32
 8002224:	d108      	bne.n	8002238 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	2221      	movs	r2, #33	; 0x21
 800222c:	4252      	negs	r2, r2
 800222e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	0018      	movs	r0, r3
 8002234:	f000 f890 	bl	8002358 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002238:	46c0      	nop			; (mov r8, r8)
 800223a:	46bd      	mov	sp, r7
 800223c:	b002      	add	sp, #8
 800223e:	bd80      	pop	{r7, pc}

08002240 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002248:	46c0      	nop			; (mov r8, r8)
 800224a:	46bd      	mov	sp, r7
 800224c:	b002      	add	sp, #8
 800224e:	bd80      	pop	{r7, pc}

08002250 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b082      	sub	sp, #8
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002258:	46c0      	nop			; (mov r8, r8)
 800225a:	46bd      	mov	sp, r7
 800225c:	b002      	add	sp, #8
 800225e:	bd80      	pop	{r7, pc}

08002260 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b082      	sub	sp, #8
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002268:	46c0      	nop			; (mov r8, r8)
 800226a:	46bd      	mov	sp, r7
 800226c:	b002      	add	sp, #8
 800226e:	bd80      	pop	{r7, pc}

08002270 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002278:	46c0      	nop			; (mov r8, r8)
 800227a:	46bd      	mov	sp, r7
 800227c:	b002      	add	sp, #8
 800227e:	bd80      	pop	{r7, pc}

08002280 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b084      	sub	sp, #16
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
 8002288:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	4a2b      	ldr	r2, [pc, #172]	; (8002340 <TIM_Base_SetConfig+0xc0>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d003      	beq.n	80022a0 <TIM_Base_SetConfig+0x20>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	4a2a      	ldr	r2, [pc, #168]	; (8002344 <TIM_Base_SetConfig+0xc4>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d108      	bne.n	80022b2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2270      	movs	r2, #112	; 0x70
 80022a4:	4393      	bics	r3, r2
 80022a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	68fa      	ldr	r2, [r7, #12]
 80022ae:	4313      	orrs	r3, r2
 80022b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4a22      	ldr	r2, [pc, #136]	; (8002340 <TIM_Base_SetConfig+0xc0>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d00f      	beq.n	80022da <TIM_Base_SetConfig+0x5a>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4a21      	ldr	r2, [pc, #132]	; (8002344 <TIM_Base_SetConfig+0xc4>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d00b      	beq.n	80022da <TIM_Base_SetConfig+0x5a>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4a20      	ldr	r2, [pc, #128]	; (8002348 <TIM_Base_SetConfig+0xc8>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d007      	beq.n	80022da <TIM_Base_SetConfig+0x5a>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4a1f      	ldr	r2, [pc, #124]	; (800234c <TIM_Base_SetConfig+0xcc>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d003      	beq.n	80022da <TIM_Base_SetConfig+0x5a>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4a1e      	ldr	r2, [pc, #120]	; (8002350 <TIM_Base_SetConfig+0xd0>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d108      	bne.n	80022ec <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	4a1d      	ldr	r2, [pc, #116]	; (8002354 <TIM_Base_SetConfig+0xd4>)
 80022de:	4013      	ands	r3, r2
 80022e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	68db      	ldr	r3, [r3, #12]
 80022e6:	68fa      	ldr	r2, [r7, #12]
 80022e8:	4313      	orrs	r3, r2
 80022ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2280      	movs	r2, #128	; 0x80
 80022f0:	4393      	bics	r3, r2
 80022f2:	001a      	movs	r2, r3
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	695b      	ldr	r3, [r3, #20]
 80022f8:	4313      	orrs	r3, r2
 80022fa:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	68fa      	ldr	r2, [r7, #12]
 8002300:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	689a      	ldr	r2, [r3, #8]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	4a0a      	ldr	r2, [pc, #40]	; (8002340 <TIM_Base_SetConfig+0xc0>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d007      	beq.n	800232a <TIM_Base_SetConfig+0xaa>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	4a0b      	ldr	r2, [pc, #44]	; (800234c <TIM_Base_SetConfig+0xcc>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d003      	beq.n	800232a <TIM_Base_SetConfig+0xaa>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	4a0a      	ldr	r2, [pc, #40]	; (8002350 <TIM_Base_SetConfig+0xd0>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d103      	bne.n	8002332 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	691a      	ldr	r2, [r3, #16]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2201      	movs	r2, #1
 8002336:	615a      	str	r2, [r3, #20]
}
 8002338:	46c0      	nop			; (mov r8, r8)
 800233a:	46bd      	mov	sp, r7
 800233c:	b004      	add	sp, #16
 800233e:	bd80      	pop	{r7, pc}
 8002340:	40012c00 	.word	0x40012c00
 8002344:	40000400 	.word	0x40000400
 8002348:	40002000 	.word	0x40002000
 800234c:	40014400 	.word	0x40014400
 8002350:	40014800 	.word	0x40014800
 8002354:	fffffcff 	.word	0xfffffcff

08002358 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002360:	46c0      	nop			; (mov r8, r8)
 8002362:	46bd      	mov	sp, r7
 8002364:	b002      	add	sp, #8
 8002366:	bd80      	pop	{r7, pc}

08002368 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b082      	sub	sp, #8
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002370:	46c0      	nop			; (mov r8, r8)
 8002372:	46bd      	mov	sp, r7
 8002374:	b002      	add	sp, #8
 8002376:	bd80      	pop	{r7, pc}

08002378 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b082      	sub	sp, #8
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d101      	bne.n	800238a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e044      	b.n	8002414 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800238e:	2b00      	cmp	r3, #0
 8002390:	d107      	bne.n	80023a2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2278      	movs	r2, #120	; 0x78
 8002396:	2100      	movs	r1, #0
 8002398:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	0018      	movs	r0, r3
 800239e:	f7fe fc35 	bl	8000c0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2224      	movs	r2, #36	; 0x24
 80023a6:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	2101      	movs	r1, #1
 80023b4:	438a      	bics	r2, r1
 80023b6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	0018      	movs	r0, r3
 80023bc:	f000 fc0c 	bl	8002bd8 <UART_SetConfig>
 80023c0:	0003      	movs	r3, r0
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d101      	bne.n	80023ca <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e024      	b.n	8002414 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d003      	beq.n	80023da <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	0018      	movs	r0, r3
 80023d6:	f000 fd27 	bl	8002e28 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	685a      	ldr	r2, [r3, #4]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	490d      	ldr	r1, [pc, #52]	; (800241c <HAL_UART_Init+0xa4>)
 80023e6:	400a      	ands	r2, r1
 80023e8:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	689a      	ldr	r2, [r3, #8]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	2108      	movs	r1, #8
 80023f6:	438a      	bics	r2, r1
 80023f8:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	2101      	movs	r1, #1
 8002406:	430a      	orrs	r2, r1
 8002408:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	0018      	movs	r0, r3
 800240e:	f000 fdbf 	bl	8002f90 <UART_CheckIdleState>
 8002412:	0003      	movs	r3, r0
}
 8002414:	0018      	movs	r0, r3
 8002416:	46bd      	mov	sp, r7
 8002418:	b002      	add	sp, #8
 800241a:	bd80      	pop	{r7, pc}
 800241c:	fffff7ff 	.word	0xfffff7ff

08002420 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b08a      	sub	sp, #40	; 0x28
 8002424:	af02      	add	r7, sp, #8
 8002426:	60f8      	str	r0, [r7, #12]
 8002428:	60b9      	str	r1, [r7, #8]
 800242a:	603b      	str	r3, [r7, #0]
 800242c:	1dbb      	adds	r3, r7, #6
 800242e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002434:	2b20      	cmp	r3, #32
 8002436:	d000      	beq.n	800243a <HAL_UART_Transmit+0x1a>
 8002438:	e08d      	b.n	8002556 <HAL_UART_Transmit+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d003      	beq.n	8002448 <HAL_UART_Transmit+0x28>
 8002440:	1dbb      	adds	r3, r7, #6
 8002442:	881b      	ldrh	r3, [r3, #0]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d101      	bne.n	800244c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	e085      	b.n	8002558 <HAL_UART_Transmit+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	689a      	ldr	r2, [r3, #8]
 8002450:	2380      	movs	r3, #128	; 0x80
 8002452:	015b      	lsls	r3, r3, #5
 8002454:	429a      	cmp	r2, r3
 8002456:	d109      	bne.n	800246c <HAL_UART_Transmit+0x4c>
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	691b      	ldr	r3, [r3, #16]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d105      	bne.n	800246c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	2201      	movs	r2, #1
 8002464:	4013      	ands	r3, r2
 8002466:	d001      	beq.n	800246c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	e075      	b.n	8002558 <HAL_UART_Transmit+0x138>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2284      	movs	r2, #132	; 0x84
 8002470:	2100      	movs	r1, #0
 8002472:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2221      	movs	r2, #33	; 0x21
 8002478:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800247a:	f7fe fcd5 	bl	8000e28 <HAL_GetTick>
 800247e:	0003      	movs	r3, r0
 8002480:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	1dba      	adds	r2, r7, #6
 8002486:	2150      	movs	r1, #80	; 0x50
 8002488:	8812      	ldrh	r2, [r2, #0]
 800248a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	1dba      	adds	r2, r7, #6
 8002490:	2152      	movs	r1, #82	; 0x52
 8002492:	8812      	ldrh	r2, [r2, #0]
 8002494:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	689a      	ldr	r2, [r3, #8]
 800249a:	2380      	movs	r3, #128	; 0x80
 800249c:	015b      	lsls	r3, r3, #5
 800249e:	429a      	cmp	r2, r3
 80024a0:	d108      	bne.n	80024b4 <HAL_UART_Transmit+0x94>
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	691b      	ldr	r3, [r3, #16]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d104      	bne.n	80024b4 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 80024aa:	2300      	movs	r3, #0
 80024ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	61bb      	str	r3, [r7, #24]
 80024b2:	e003      	b.n	80024bc <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80024b8:	2300      	movs	r3, #0
 80024ba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80024bc:	e030      	b.n	8002520 <HAL_UART_Transmit+0x100>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80024be:	697a      	ldr	r2, [r7, #20]
 80024c0:	68f8      	ldr	r0, [r7, #12]
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	9300      	str	r3, [sp, #0]
 80024c6:	0013      	movs	r3, r2
 80024c8:	2200      	movs	r2, #0
 80024ca:	2180      	movs	r1, #128	; 0x80
 80024cc:	f000 fe08 	bl	80030e0 <UART_WaitOnFlagUntilTimeout>
 80024d0:	1e03      	subs	r3, r0, #0
 80024d2:	d004      	beq.n	80024de <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	2220      	movs	r2, #32
 80024d8:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80024da:	2303      	movs	r3, #3
 80024dc:	e03c      	b.n	8002558 <HAL_UART_Transmit+0x138>
      }
      if (pdata8bits == NULL)
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d10b      	bne.n	80024fc <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80024e4:	69bb      	ldr	r3, [r7, #24]
 80024e6:	881a      	ldrh	r2, [r3, #0]
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	05d2      	lsls	r2, r2, #23
 80024ee:	0dd2      	lsrs	r2, r2, #23
 80024f0:	b292      	uxth	r2, r2
 80024f2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80024f4:	69bb      	ldr	r3, [r7, #24]
 80024f6:	3302      	adds	r3, #2
 80024f8:	61bb      	str	r3, [r7, #24]
 80024fa:	e008      	b.n	800250e <HAL_UART_Transmit+0xee>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80024fc:	69fb      	ldr	r3, [r7, #28]
 80024fe:	781a      	ldrb	r2, [r3, #0]
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	b292      	uxth	r2, r2
 8002506:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	3301      	adds	r3, #1
 800250c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	2252      	movs	r2, #82	; 0x52
 8002512:	5a9b      	ldrh	r3, [r3, r2]
 8002514:	b29b      	uxth	r3, r3
 8002516:	3b01      	subs	r3, #1
 8002518:	b299      	uxth	r1, r3
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	2252      	movs	r2, #82	; 0x52
 800251e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	2252      	movs	r2, #82	; 0x52
 8002524:	5a9b      	ldrh	r3, [r3, r2]
 8002526:	b29b      	uxth	r3, r3
 8002528:	2b00      	cmp	r3, #0
 800252a:	d1c8      	bne.n	80024be <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800252c:	697a      	ldr	r2, [r7, #20]
 800252e:	68f8      	ldr	r0, [r7, #12]
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	9300      	str	r3, [sp, #0]
 8002534:	0013      	movs	r3, r2
 8002536:	2200      	movs	r2, #0
 8002538:	2140      	movs	r1, #64	; 0x40
 800253a:	f000 fdd1 	bl	80030e0 <UART_WaitOnFlagUntilTimeout>
 800253e:	1e03      	subs	r3, r0, #0
 8002540:	d004      	beq.n	800254c <HAL_UART_Transmit+0x12c>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2220      	movs	r2, #32
 8002546:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8002548:	2303      	movs	r3, #3
 800254a:	e005      	b.n	8002558 <HAL_UART_Transmit+0x138>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	2220      	movs	r2, #32
 8002550:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002552:	2300      	movs	r3, #0
 8002554:	e000      	b.n	8002558 <HAL_UART_Transmit+0x138>
  }
  else
  {
    return HAL_BUSY;
 8002556:	2302      	movs	r3, #2
  }
}
 8002558:	0018      	movs	r0, r3
 800255a:	46bd      	mov	sp, r7
 800255c:	b008      	add	sp, #32
 800255e:	bd80      	pop	{r7, pc}

08002560 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b088      	sub	sp, #32
 8002564:	af00      	add	r7, sp, #0
 8002566:	60f8      	str	r0, [r7, #12]
 8002568:	60b9      	str	r1, [r7, #8]
 800256a:	1dbb      	adds	r3, r7, #6
 800256c:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	2280      	movs	r2, #128	; 0x80
 8002572:	589b      	ldr	r3, [r3, r2]
 8002574:	2b20      	cmp	r3, #32
 8002576:	d145      	bne.n	8002604 <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d003      	beq.n	8002586 <HAL_UART_Receive_IT+0x26>
 800257e:	1dbb      	adds	r3, r7, #6
 8002580:	881b      	ldrh	r3, [r3, #0]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d101      	bne.n	800258a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e03d      	b.n	8002606 <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	689a      	ldr	r2, [r3, #8]
 800258e:	2380      	movs	r3, #128	; 0x80
 8002590:	015b      	lsls	r3, r3, #5
 8002592:	429a      	cmp	r2, r3
 8002594:	d109      	bne.n	80025aa <HAL_UART_Receive_IT+0x4a>
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	691b      	ldr	r3, [r3, #16]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d105      	bne.n	80025aa <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	2201      	movs	r2, #1
 80025a2:	4013      	ands	r3, r2
 80025a4:	d001      	beq.n	80025aa <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e02d      	b.n	8002606 <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	2200      	movs	r2, #0
 80025ae:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	685a      	ldr	r2, [r3, #4]
 80025b6:	2380      	movs	r3, #128	; 0x80
 80025b8:	041b      	lsls	r3, r3, #16
 80025ba:	4013      	ands	r3, r2
 80025bc:	d019      	beq.n	80025f2 <HAL_UART_Receive_IT+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025be:	f3ef 8310 	mrs	r3, PRIMASK
 80025c2:	613b      	str	r3, [r7, #16]
  return(result);
 80025c4:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80025c6:	61fb      	str	r3, [r7, #28]
 80025c8:	2301      	movs	r3, #1
 80025ca:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	f383 8810 	msr	PRIMASK, r3
}
 80025d2:	46c0      	nop			; (mov r8, r8)
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	2180      	movs	r1, #128	; 0x80
 80025e0:	04c9      	lsls	r1, r1, #19
 80025e2:	430a      	orrs	r2, r1
 80025e4:	601a      	str	r2, [r3, #0]
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025ea:	69bb      	ldr	r3, [r7, #24]
 80025ec:	f383 8810 	msr	PRIMASK, r3
}
 80025f0:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80025f2:	1dbb      	adds	r3, r7, #6
 80025f4:	881a      	ldrh	r2, [r3, #0]
 80025f6:	68b9      	ldr	r1, [r7, #8]
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	0018      	movs	r0, r3
 80025fc:	f000 fdda 	bl	80031b4 <UART_Start_Receive_IT>
 8002600:	0003      	movs	r3, r0
 8002602:	e000      	b.n	8002606 <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8002604:	2302      	movs	r3, #2
  }
}
 8002606:	0018      	movs	r0, r3
 8002608:	46bd      	mov	sp, r7
 800260a:	b008      	add	sp, #32
 800260c:	bd80      	pop	{r7, pc}
	...

08002610 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002610:	b590      	push	{r4, r7, lr}
 8002612:	b0ab      	sub	sp, #172	; 0xac
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	69db      	ldr	r3, [r3, #28]
 800261e:	22a4      	movs	r2, #164	; 0xa4
 8002620:	18b9      	adds	r1, r7, r2
 8002622:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	20a0      	movs	r0, #160	; 0xa0
 800262c:	1839      	adds	r1, r7, r0
 800262e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	219c      	movs	r1, #156	; 0x9c
 8002638:	1879      	adds	r1, r7, r1
 800263a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800263c:	0011      	movs	r1, r2
 800263e:	18bb      	adds	r3, r7, r2
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a99      	ldr	r2, [pc, #612]	; (80028a8 <HAL_UART_IRQHandler+0x298>)
 8002644:	4013      	ands	r3, r2
 8002646:	2298      	movs	r2, #152	; 0x98
 8002648:	18bc      	adds	r4, r7, r2
 800264a:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 800264c:	18bb      	adds	r3, r7, r2
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d114      	bne.n	800267e <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002654:	187b      	adds	r3, r7, r1
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	2220      	movs	r2, #32
 800265a:	4013      	ands	r3, r2
 800265c:	d00f      	beq.n	800267e <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800265e:	183b      	adds	r3, r7, r0
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	2220      	movs	r2, #32
 8002664:	4013      	ands	r3, r2
 8002666:	d00a      	beq.n	800267e <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800266c:	2b00      	cmp	r3, #0
 800266e:	d100      	bne.n	8002672 <HAL_UART_IRQHandler+0x62>
 8002670:	e286      	b.n	8002b80 <HAL_UART_IRQHandler+0x570>
      {
        huart->RxISR(huart);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002676:	687a      	ldr	r2, [r7, #4]
 8002678:	0010      	movs	r0, r2
 800267a:	4798      	blx	r3
      }
      return;
 800267c:	e280      	b.n	8002b80 <HAL_UART_IRQHandler+0x570>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800267e:	2398      	movs	r3, #152	; 0x98
 8002680:	18fb      	adds	r3, r7, r3
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d100      	bne.n	800268a <HAL_UART_IRQHandler+0x7a>
 8002688:	e114      	b.n	80028b4 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800268a:	239c      	movs	r3, #156	; 0x9c
 800268c:	18fb      	adds	r3, r7, r3
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	2201      	movs	r2, #1
 8002692:	4013      	ands	r3, r2
 8002694:	d106      	bne.n	80026a4 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002696:	23a0      	movs	r3, #160	; 0xa0
 8002698:	18fb      	adds	r3, r7, r3
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a83      	ldr	r2, [pc, #524]	; (80028ac <HAL_UART_IRQHandler+0x29c>)
 800269e:	4013      	ands	r3, r2
 80026a0:	d100      	bne.n	80026a4 <HAL_UART_IRQHandler+0x94>
 80026a2:	e107      	b.n	80028b4 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80026a4:	23a4      	movs	r3, #164	; 0xa4
 80026a6:	18fb      	adds	r3, r7, r3
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	2201      	movs	r2, #1
 80026ac:	4013      	ands	r3, r2
 80026ae:	d012      	beq.n	80026d6 <HAL_UART_IRQHandler+0xc6>
 80026b0:	23a0      	movs	r3, #160	; 0xa0
 80026b2:	18fb      	adds	r3, r7, r3
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	2380      	movs	r3, #128	; 0x80
 80026b8:	005b      	lsls	r3, r3, #1
 80026ba:	4013      	ands	r3, r2
 80026bc:	d00b      	beq.n	80026d6 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	2201      	movs	r2, #1
 80026c4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2284      	movs	r2, #132	; 0x84
 80026ca:	589b      	ldr	r3, [r3, r2]
 80026cc:	2201      	movs	r2, #1
 80026ce:	431a      	orrs	r2, r3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2184      	movs	r1, #132	; 0x84
 80026d4:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80026d6:	23a4      	movs	r3, #164	; 0xa4
 80026d8:	18fb      	adds	r3, r7, r3
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	2202      	movs	r2, #2
 80026de:	4013      	ands	r3, r2
 80026e0:	d011      	beq.n	8002706 <HAL_UART_IRQHandler+0xf6>
 80026e2:	239c      	movs	r3, #156	; 0x9c
 80026e4:	18fb      	adds	r3, r7, r3
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	2201      	movs	r2, #1
 80026ea:	4013      	ands	r3, r2
 80026ec:	d00b      	beq.n	8002706 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	2202      	movs	r2, #2
 80026f4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2284      	movs	r2, #132	; 0x84
 80026fa:	589b      	ldr	r3, [r3, r2]
 80026fc:	2204      	movs	r2, #4
 80026fe:	431a      	orrs	r2, r3
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2184      	movs	r1, #132	; 0x84
 8002704:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002706:	23a4      	movs	r3, #164	; 0xa4
 8002708:	18fb      	adds	r3, r7, r3
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	2204      	movs	r2, #4
 800270e:	4013      	ands	r3, r2
 8002710:	d011      	beq.n	8002736 <HAL_UART_IRQHandler+0x126>
 8002712:	239c      	movs	r3, #156	; 0x9c
 8002714:	18fb      	adds	r3, r7, r3
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	2201      	movs	r2, #1
 800271a:	4013      	ands	r3, r2
 800271c:	d00b      	beq.n	8002736 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	2204      	movs	r2, #4
 8002724:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2284      	movs	r2, #132	; 0x84
 800272a:	589b      	ldr	r3, [r3, r2]
 800272c:	2202      	movs	r2, #2
 800272e:	431a      	orrs	r2, r3
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2184      	movs	r1, #132	; 0x84
 8002734:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002736:	23a4      	movs	r3, #164	; 0xa4
 8002738:	18fb      	adds	r3, r7, r3
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	2208      	movs	r2, #8
 800273e:	4013      	ands	r3, r2
 8002740:	d017      	beq.n	8002772 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002742:	23a0      	movs	r3, #160	; 0xa0
 8002744:	18fb      	adds	r3, r7, r3
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	2220      	movs	r2, #32
 800274a:	4013      	ands	r3, r2
 800274c:	d105      	bne.n	800275a <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800274e:	239c      	movs	r3, #156	; 0x9c
 8002750:	18fb      	adds	r3, r7, r3
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	2201      	movs	r2, #1
 8002756:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002758:	d00b      	beq.n	8002772 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	2208      	movs	r2, #8
 8002760:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2284      	movs	r2, #132	; 0x84
 8002766:	589b      	ldr	r3, [r3, r2]
 8002768:	2208      	movs	r2, #8
 800276a:	431a      	orrs	r2, r3
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2184      	movs	r1, #132	; 0x84
 8002770:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002772:	23a4      	movs	r3, #164	; 0xa4
 8002774:	18fb      	adds	r3, r7, r3
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	2380      	movs	r3, #128	; 0x80
 800277a:	011b      	lsls	r3, r3, #4
 800277c:	4013      	ands	r3, r2
 800277e:	d013      	beq.n	80027a8 <HAL_UART_IRQHandler+0x198>
 8002780:	23a0      	movs	r3, #160	; 0xa0
 8002782:	18fb      	adds	r3, r7, r3
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	2380      	movs	r3, #128	; 0x80
 8002788:	04db      	lsls	r3, r3, #19
 800278a:	4013      	ands	r3, r2
 800278c:	d00c      	beq.n	80027a8 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	2280      	movs	r2, #128	; 0x80
 8002794:	0112      	lsls	r2, r2, #4
 8002796:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2284      	movs	r2, #132	; 0x84
 800279c:	589b      	ldr	r3, [r3, r2]
 800279e:	2220      	movs	r2, #32
 80027a0:	431a      	orrs	r2, r3
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2184      	movs	r1, #132	; 0x84
 80027a6:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2284      	movs	r2, #132	; 0x84
 80027ac:	589b      	ldr	r3, [r3, r2]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d100      	bne.n	80027b4 <HAL_UART_IRQHandler+0x1a4>
 80027b2:	e1e7      	b.n	8002b84 <HAL_UART_IRQHandler+0x574>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80027b4:	23a4      	movs	r3, #164	; 0xa4
 80027b6:	18fb      	adds	r3, r7, r3
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	2220      	movs	r2, #32
 80027bc:	4013      	ands	r3, r2
 80027be:	d00e      	beq.n	80027de <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80027c0:	23a0      	movs	r3, #160	; 0xa0
 80027c2:	18fb      	adds	r3, r7, r3
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	2220      	movs	r2, #32
 80027c8:	4013      	ands	r3, r2
 80027ca:	d008      	beq.n	80027de <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d004      	beq.n	80027de <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80027d8:	687a      	ldr	r2, [r7, #4]
 80027da:	0010      	movs	r0, r2
 80027dc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2284      	movs	r2, #132	; 0x84
 80027e2:	589b      	ldr	r3, [r3, r2]
 80027e4:	2194      	movs	r1, #148	; 0x94
 80027e6:	187a      	adds	r2, r7, r1
 80027e8:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	2240      	movs	r2, #64	; 0x40
 80027f2:	4013      	ands	r3, r2
 80027f4:	2b40      	cmp	r3, #64	; 0x40
 80027f6:	d004      	beq.n	8002802 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80027f8:	187b      	adds	r3, r7, r1
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	2228      	movs	r2, #40	; 0x28
 80027fe:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002800:	d047      	beq.n	8002892 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	0018      	movs	r0, r3
 8002806:	f000 fd8b 	bl	8003320 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	2240      	movs	r2, #64	; 0x40
 8002812:	4013      	ands	r3, r2
 8002814:	2b40      	cmp	r3, #64	; 0x40
 8002816:	d137      	bne.n	8002888 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002818:	f3ef 8310 	mrs	r3, PRIMASK
 800281c:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 800281e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002820:	2090      	movs	r0, #144	; 0x90
 8002822:	183a      	adds	r2, r7, r0
 8002824:	6013      	str	r3, [r2, #0]
 8002826:	2301      	movs	r3, #1
 8002828:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800282a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800282c:	f383 8810 	msr	PRIMASK, r3
}
 8002830:	46c0      	nop			; (mov r8, r8)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	689a      	ldr	r2, [r3, #8]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	2140      	movs	r1, #64	; 0x40
 800283e:	438a      	bics	r2, r1
 8002840:	609a      	str	r2, [r3, #8]
 8002842:	183b      	adds	r3, r7, r0
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002848:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800284a:	f383 8810 	msr	PRIMASK, r3
}
 800284e:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002854:	2b00      	cmp	r3, #0
 8002856:	d012      	beq.n	800287e <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800285c:	4a14      	ldr	r2, [pc, #80]	; (80028b0 <HAL_UART_IRQHandler+0x2a0>)
 800285e:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002864:	0018      	movs	r0, r3
 8002866:	f7fe fc23 	bl	80010b0 <HAL_DMA_Abort_IT>
 800286a:	1e03      	subs	r3, r0, #0
 800286c:	d01a      	beq.n	80028a4 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002872:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002878:	0018      	movs	r0, r3
 800287a:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800287c:	e012      	b.n	80028a4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	0018      	movs	r0, r3
 8002882:	f000 f995 	bl	8002bb0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002886:	e00d      	b.n	80028a4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	0018      	movs	r0, r3
 800288c:	f000 f990 	bl	8002bb0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002890:	e008      	b.n	80028a4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	0018      	movs	r0, r3
 8002896:	f000 f98b 	bl	8002bb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2284      	movs	r2, #132	; 0x84
 800289e:	2100      	movs	r1, #0
 80028a0:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80028a2:	e16f      	b.n	8002b84 <HAL_UART_IRQHandler+0x574>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028a4:	46c0      	nop			; (mov r8, r8)
    return;
 80028a6:	e16d      	b.n	8002b84 <HAL_UART_IRQHandler+0x574>
 80028a8:	0000080f 	.word	0x0000080f
 80028ac:	04000120 	.word	0x04000120
 80028b0:	080033e9 	.word	0x080033e9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d000      	beq.n	80028be <HAL_UART_IRQHandler+0x2ae>
 80028bc:	e139      	b.n	8002b32 <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80028be:	23a4      	movs	r3, #164	; 0xa4
 80028c0:	18fb      	adds	r3, r7, r3
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	2210      	movs	r2, #16
 80028c6:	4013      	ands	r3, r2
 80028c8:	d100      	bne.n	80028cc <HAL_UART_IRQHandler+0x2bc>
 80028ca:	e132      	b.n	8002b32 <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80028cc:	23a0      	movs	r3, #160	; 0xa0
 80028ce:	18fb      	adds	r3, r7, r3
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	2210      	movs	r2, #16
 80028d4:	4013      	ands	r3, r2
 80028d6:	d100      	bne.n	80028da <HAL_UART_IRQHandler+0x2ca>
 80028d8:	e12b      	b.n	8002b32 <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	2210      	movs	r2, #16
 80028e0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	2240      	movs	r2, #64	; 0x40
 80028ea:	4013      	ands	r3, r2
 80028ec:	2b40      	cmp	r3, #64	; 0x40
 80028ee:	d000      	beq.n	80028f2 <HAL_UART_IRQHandler+0x2e2>
 80028f0:	e09f      	b.n	8002a32 <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	685a      	ldr	r2, [r3, #4]
 80028fa:	217e      	movs	r1, #126	; 0x7e
 80028fc:	187b      	adds	r3, r7, r1
 80028fe:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8002900:	187b      	adds	r3, r7, r1
 8002902:	881b      	ldrh	r3, [r3, #0]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d100      	bne.n	800290a <HAL_UART_IRQHandler+0x2fa>
 8002908:	e13e      	b.n	8002b88 <HAL_UART_IRQHandler+0x578>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2258      	movs	r2, #88	; 0x58
 800290e:	5a9b      	ldrh	r3, [r3, r2]
 8002910:	187a      	adds	r2, r7, r1
 8002912:	8812      	ldrh	r2, [r2, #0]
 8002914:	429a      	cmp	r2, r3
 8002916:	d300      	bcc.n	800291a <HAL_UART_IRQHandler+0x30a>
 8002918:	e136      	b.n	8002b88 <HAL_UART_IRQHandler+0x578>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	187a      	adds	r2, r7, r1
 800291e:	215a      	movs	r1, #90	; 0x5a
 8002920:	8812      	ldrh	r2, [r2, #0]
 8002922:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002928:	699b      	ldr	r3, [r3, #24]
 800292a:	2b20      	cmp	r3, #32
 800292c:	d06f      	beq.n	8002a0e <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800292e:	f3ef 8310 	mrs	r3, PRIMASK
 8002932:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8002934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002936:	67bb      	str	r3, [r7, #120]	; 0x78
 8002938:	2301      	movs	r3, #1
 800293a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800293c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800293e:	f383 8810 	msr	PRIMASK, r3
}
 8002942:	46c0      	nop			; (mov r8, r8)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4992      	ldr	r1, [pc, #584]	; (8002b98 <HAL_UART_IRQHandler+0x588>)
 8002950:	400a      	ands	r2, r1
 8002952:	601a      	str	r2, [r3, #0]
 8002954:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002956:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800295a:	f383 8810 	msr	PRIMASK, r3
}
 800295e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002960:	f3ef 8310 	mrs	r3, PRIMASK
 8002964:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8002966:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002968:	677b      	str	r3, [r7, #116]	; 0x74
 800296a:	2301      	movs	r3, #1
 800296c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800296e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002970:	f383 8810 	msr	PRIMASK, r3
}
 8002974:	46c0      	nop			; (mov r8, r8)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	689a      	ldr	r2, [r3, #8]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	2101      	movs	r1, #1
 8002982:	438a      	bics	r2, r1
 8002984:	609a      	str	r2, [r3, #8]
 8002986:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002988:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800298a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800298c:	f383 8810 	msr	PRIMASK, r3
}
 8002990:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002992:	f3ef 8310 	mrs	r3, PRIMASK
 8002996:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8002998:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800299a:	673b      	str	r3, [r7, #112]	; 0x70
 800299c:	2301      	movs	r3, #1
 800299e:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029a2:	f383 8810 	msr	PRIMASK, r3
}
 80029a6:	46c0      	nop			; (mov r8, r8)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	689a      	ldr	r2, [r3, #8]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	2140      	movs	r1, #64	; 0x40
 80029b4:	438a      	bics	r2, r1
 80029b6:	609a      	str	r2, [r3, #8]
 80029b8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80029ba:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029be:	f383 8810 	msr	PRIMASK, r3
}
 80029c2:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2280      	movs	r2, #128	; 0x80
 80029c8:	2120      	movs	r1, #32
 80029ca:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2200      	movs	r2, #0
 80029d0:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029d2:	f3ef 8310 	mrs	r3, PRIMASK
 80029d6:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80029d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80029da:	66fb      	str	r3, [r7, #108]	; 0x6c
 80029dc:	2301      	movs	r3, #1
 80029de:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80029e2:	f383 8810 	msr	PRIMASK, r3
}
 80029e6:	46c0      	nop			; (mov r8, r8)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	2110      	movs	r1, #16
 80029f4:	438a      	bics	r2, r1
 80029f6:	601a      	str	r2, [r3, #0]
 80029f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029fa:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029fe:	f383 8810 	msr	PRIMASK, r3
}
 8002a02:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a08:	0018      	movs	r0, r3
 8002a0a:	f7fe fb19 	bl	8001040 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2202      	movs	r2, #2
 8002a12:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2258      	movs	r2, #88	; 0x58
 8002a18:	5a9a      	ldrh	r2, [r3, r2]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	215a      	movs	r1, #90	; 0x5a
 8002a1e:	5a5b      	ldrh	r3, [r3, r1]
 8002a20:	b29b      	uxth	r3, r3
 8002a22:	1ad3      	subs	r3, r2, r3
 8002a24:	b29a      	uxth	r2, r3
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	0011      	movs	r1, r2
 8002a2a:	0018      	movs	r0, r3
 8002a2c:	f000 f8c8 	bl	8002bc0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002a30:	e0aa      	b.n	8002b88 <HAL_UART_IRQHandler+0x578>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2258      	movs	r2, #88	; 0x58
 8002a36:	5a99      	ldrh	r1, [r3, r2]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	225a      	movs	r2, #90	; 0x5a
 8002a3c:	5a9b      	ldrh	r3, [r3, r2]
 8002a3e:	b29a      	uxth	r2, r3
 8002a40:	208e      	movs	r0, #142	; 0x8e
 8002a42:	183b      	adds	r3, r7, r0
 8002a44:	1a8a      	subs	r2, r1, r2
 8002a46:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	225a      	movs	r2, #90	; 0x5a
 8002a4c:	5a9b      	ldrh	r3, [r3, r2]
 8002a4e:	b29b      	uxth	r3, r3
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d100      	bne.n	8002a56 <HAL_UART_IRQHandler+0x446>
 8002a54:	e09a      	b.n	8002b8c <HAL_UART_IRQHandler+0x57c>
          && (nb_rx_data > 0U))
 8002a56:	183b      	adds	r3, r7, r0
 8002a58:	881b      	ldrh	r3, [r3, #0]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d100      	bne.n	8002a60 <HAL_UART_IRQHandler+0x450>
 8002a5e:	e095      	b.n	8002b8c <HAL_UART_IRQHandler+0x57c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a60:	f3ef 8310 	mrs	r3, PRIMASK
 8002a64:	60fb      	str	r3, [r7, #12]
  return(result);
 8002a66:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a68:	2488      	movs	r4, #136	; 0x88
 8002a6a:	193a      	adds	r2, r7, r4
 8002a6c:	6013      	str	r3, [r2, #0]
 8002a6e:	2301      	movs	r3, #1
 8002a70:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	f383 8810 	msr	PRIMASK, r3
}
 8002a78:	46c0      	nop			; (mov r8, r8)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4945      	ldr	r1, [pc, #276]	; (8002b9c <HAL_UART_IRQHandler+0x58c>)
 8002a86:	400a      	ands	r2, r1
 8002a88:	601a      	str	r2, [r3, #0]
 8002a8a:	193b      	adds	r3, r7, r4
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	f383 8810 	msr	PRIMASK, r3
}
 8002a96:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a98:	f3ef 8310 	mrs	r3, PRIMASK
 8002a9c:	61bb      	str	r3, [r7, #24]
  return(result);
 8002a9e:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002aa0:	2484      	movs	r4, #132	; 0x84
 8002aa2:	193a      	adds	r2, r7, r4
 8002aa4:	6013      	str	r3, [r2, #0]
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002aaa:	69fb      	ldr	r3, [r7, #28]
 8002aac:	f383 8810 	msr	PRIMASK, r3
}
 8002ab0:	46c0      	nop			; (mov r8, r8)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	689a      	ldr	r2, [r3, #8]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	2101      	movs	r1, #1
 8002abe:	438a      	bics	r2, r1
 8002ac0:	609a      	str	r2, [r3, #8]
 8002ac2:	193b      	adds	r3, r7, r4
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ac8:	6a3b      	ldr	r3, [r7, #32]
 8002aca:	f383 8810 	msr	PRIMASK, r3
}
 8002ace:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2280      	movs	r2, #128	; 0x80
 8002ad4:	2120      	movs	r1, #32
 8002ad6:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2200      	movs	r2, #0
 8002adc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ae4:	f3ef 8310 	mrs	r3, PRIMASK
 8002ae8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002aec:	2480      	movs	r4, #128	; 0x80
 8002aee:	193a      	adds	r2, r7, r4
 8002af0:	6013      	str	r3, [r2, #0]
 8002af2:	2301      	movs	r3, #1
 8002af4:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002af8:	f383 8810 	msr	PRIMASK, r3
}
 8002afc:	46c0      	nop			; (mov r8, r8)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	2110      	movs	r1, #16
 8002b0a:	438a      	bics	r2, r1
 8002b0c:	601a      	str	r2, [r3, #0]
 8002b0e:	193b      	adds	r3, r7, r4
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b16:	f383 8810 	msr	PRIMASK, r3
}
 8002b1a:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2202      	movs	r2, #2
 8002b20:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002b22:	183b      	adds	r3, r7, r0
 8002b24:	881a      	ldrh	r2, [r3, #0]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	0011      	movs	r1, r2
 8002b2a:	0018      	movs	r0, r3
 8002b2c:	f000 f848 	bl	8002bc0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002b30:	e02c      	b.n	8002b8c <HAL_UART_IRQHandler+0x57c>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002b32:	23a4      	movs	r3, #164	; 0xa4
 8002b34:	18fb      	adds	r3, r7, r3
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	2280      	movs	r2, #128	; 0x80
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	d00f      	beq.n	8002b5e <HAL_UART_IRQHandler+0x54e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002b3e:	23a0      	movs	r3, #160	; 0xa0
 8002b40:	18fb      	adds	r3, r7, r3
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	2280      	movs	r2, #128	; 0x80
 8002b46:	4013      	ands	r3, r2
 8002b48:	d009      	beq.n	8002b5e <HAL_UART_IRQHandler+0x54e>
  {
    if (huart->TxISR != NULL)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d01e      	beq.n	8002b90 <HAL_UART_IRQHandler+0x580>
    {
      huart->TxISR(huart);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	0010      	movs	r0, r2
 8002b5a:	4798      	blx	r3
    }
    return;
 8002b5c:	e018      	b.n	8002b90 <HAL_UART_IRQHandler+0x580>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002b5e:	23a4      	movs	r3, #164	; 0xa4
 8002b60:	18fb      	adds	r3, r7, r3
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	2240      	movs	r2, #64	; 0x40
 8002b66:	4013      	ands	r3, r2
 8002b68:	d013      	beq.n	8002b92 <HAL_UART_IRQHandler+0x582>
 8002b6a:	23a0      	movs	r3, #160	; 0xa0
 8002b6c:	18fb      	adds	r3, r7, r3
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	2240      	movs	r2, #64	; 0x40
 8002b72:	4013      	ands	r3, r2
 8002b74:	d00d      	beq.n	8002b92 <HAL_UART_IRQHandler+0x582>
  {
    UART_EndTransmit_IT(huart);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	0018      	movs	r0, r3
 8002b7a:	f000 fc4c 	bl	8003416 <UART_EndTransmit_IT>
    return;
 8002b7e:	e008      	b.n	8002b92 <HAL_UART_IRQHandler+0x582>
      return;
 8002b80:	46c0      	nop			; (mov r8, r8)
 8002b82:	e006      	b.n	8002b92 <HAL_UART_IRQHandler+0x582>
    return;
 8002b84:	46c0      	nop			; (mov r8, r8)
 8002b86:	e004      	b.n	8002b92 <HAL_UART_IRQHandler+0x582>
      return;
 8002b88:	46c0      	nop			; (mov r8, r8)
 8002b8a:	e002      	b.n	8002b92 <HAL_UART_IRQHandler+0x582>
      return;
 8002b8c:	46c0      	nop			; (mov r8, r8)
 8002b8e:	e000      	b.n	8002b92 <HAL_UART_IRQHandler+0x582>
    return;
 8002b90:	46c0      	nop			; (mov r8, r8)
  }

}
 8002b92:	46bd      	mov	sp, r7
 8002b94:	b02b      	add	sp, #172	; 0xac
 8002b96:	bd90      	pop	{r4, r7, pc}
 8002b98:	fffffeff 	.word	0xfffffeff
 8002b9c:	fffffedf 	.word	0xfffffedf

08002ba0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b082      	sub	sp, #8
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002ba8:	46c0      	nop			; (mov r8, r8)
 8002baa:	46bd      	mov	sp, r7
 8002bac:	b002      	add	sp, #8
 8002bae:	bd80      	pop	{r7, pc}

08002bb0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b082      	sub	sp, #8
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002bb8:	46c0      	nop			; (mov r8, r8)
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	b002      	add	sp, #8
 8002bbe:	bd80      	pop	{r7, pc}

08002bc0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b082      	sub	sp, #8
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
 8002bc8:	000a      	movs	r2, r1
 8002bca:	1cbb      	adds	r3, r7, #2
 8002bcc:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002bce:	46c0      	nop			; (mov r8, r8)
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	b002      	add	sp, #8
 8002bd4:	bd80      	pop	{r7, pc}
	...

08002bd8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b088      	sub	sp, #32
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002be0:	231e      	movs	r3, #30
 8002be2:	18fb      	adds	r3, r7, r3
 8002be4:	2200      	movs	r2, #0
 8002be6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	689a      	ldr	r2, [r3, #8]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	691b      	ldr	r3, [r3, #16]
 8002bf0:	431a      	orrs	r2, r3
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	695b      	ldr	r3, [r3, #20]
 8002bf6:	431a      	orrs	r2, r3
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	69db      	ldr	r3, [r3, #28]
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a83      	ldr	r2, [pc, #524]	; (8002e14 <UART_SetConfig+0x23c>)
 8002c08:	4013      	ands	r3, r2
 8002c0a:	0019      	movs	r1, r3
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	697a      	ldr	r2, [r7, #20]
 8002c12:	430a      	orrs	r2, r1
 8002c14:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	4a7e      	ldr	r2, [pc, #504]	; (8002e18 <UART_SetConfig+0x240>)
 8002c1e:	4013      	ands	r3, r2
 8002c20:	0019      	movs	r1, r3
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	68da      	ldr	r2, [r3, #12]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	430a      	orrs	r2, r1
 8002c2c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	699b      	ldr	r3, [r3, #24]
 8002c32:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6a1b      	ldr	r3, [r3, #32]
 8002c38:	697a      	ldr	r2, [r7, #20]
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	4a75      	ldr	r2, [pc, #468]	; (8002e1c <UART_SetConfig+0x244>)
 8002c46:	4013      	ands	r3, r2
 8002c48:	0019      	movs	r1, r3
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	697a      	ldr	r2, [r7, #20]
 8002c50:	430a      	orrs	r2, r1
 8002c52:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002c54:	4b72      	ldr	r3, [pc, #456]	; (8002e20 <UART_SetConfig+0x248>)
 8002c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c58:	2203      	movs	r2, #3
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	2b03      	cmp	r3, #3
 8002c5e:	d00d      	beq.n	8002c7c <UART_SetConfig+0xa4>
 8002c60:	d81b      	bhi.n	8002c9a <UART_SetConfig+0xc2>
 8002c62:	2b02      	cmp	r3, #2
 8002c64:	d014      	beq.n	8002c90 <UART_SetConfig+0xb8>
 8002c66:	d818      	bhi.n	8002c9a <UART_SetConfig+0xc2>
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d002      	beq.n	8002c72 <UART_SetConfig+0x9a>
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d00a      	beq.n	8002c86 <UART_SetConfig+0xae>
 8002c70:	e013      	b.n	8002c9a <UART_SetConfig+0xc2>
 8002c72:	231f      	movs	r3, #31
 8002c74:	18fb      	adds	r3, r7, r3
 8002c76:	2200      	movs	r2, #0
 8002c78:	701a      	strb	r2, [r3, #0]
 8002c7a:	e012      	b.n	8002ca2 <UART_SetConfig+0xca>
 8002c7c:	231f      	movs	r3, #31
 8002c7e:	18fb      	adds	r3, r7, r3
 8002c80:	2202      	movs	r2, #2
 8002c82:	701a      	strb	r2, [r3, #0]
 8002c84:	e00d      	b.n	8002ca2 <UART_SetConfig+0xca>
 8002c86:	231f      	movs	r3, #31
 8002c88:	18fb      	adds	r3, r7, r3
 8002c8a:	2204      	movs	r2, #4
 8002c8c:	701a      	strb	r2, [r3, #0]
 8002c8e:	e008      	b.n	8002ca2 <UART_SetConfig+0xca>
 8002c90:	231f      	movs	r3, #31
 8002c92:	18fb      	adds	r3, r7, r3
 8002c94:	2208      	movs	r2, #8
 8002c96:	701a      	strb	r2, [r3, #0]
 8002c98:	e003      	b.n	8002ca2 <UART_SetConfig+0xca>
 8002c9a:	231f      	movs	r3, #31
 8002c9c:	18fb      	adds	r3, r7, r3
 8002c9e:	2210      	movs	r2, #16
 8002ca0:	701a      	strb	r2, [r3, #0]
 8002ca2:	46c0      	nop			; (mov r8, r8)

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	69da      	ldr	r2, [r3, #28]
 8002ca8:	2380      	movs	r3, #128	; 0x80
 8002caa:	021b      	lsls	r3, r3, #8
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d15c      	bne.n	8002d6a <UART_SetConfig+0x192>
  {
    switch (clocksource)
 8002cb0:	231f      	movs	r3, #31
 8002cb2:	18fb      	adds	r3, r7, r3
 8002cb4:	781b      	ldrb	r3, [r3, #0]
 8002cb6:	2b08      	cmp	r3, #8
 8002cb8:	d015      	beq.n	8002ce6 <UART_SetConfig+0x10e>
 8002cba:	dc18      	bgt.n	8002cee <UART_SetConfig+0x116>
 8002cbc:	2b04      	cmp	r3, #4
 8002cbe:	d00d      	beq.n	8002cdc <UART_SetConfig+0x104>
 8002cc0:	dc15      	bgt.n	8002cee <UART_SetConfig+0x116>
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d002      	beq.n	8002ccc <UART_SetConfig+0xf4>
 8002cc6:	2b02      	cmp	r3, #2
 8002cc8:	d005      	beq.n	8002cd6 <UART_SetConfig+0xfe>
 8002cca:	e010      	b.n	8002cee <UART_SetConfig+0x116>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ccc:	f7ff f828 	bl	8001d20 <HAL_RCC_GetPCLK1Freq>
 8002cd0:	0003      	movs	r3, r0
 8002cd2:	61bb      	str	r3, [r7, #24]
        break;
 8002cd4:	e012      	b.n	8002cfc <UART_SetConfig+0x124>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002cd6:	4b53      	ldr	r3, [pc, #332]	; (8002e24 <UART_SetConfig+0x24c>)
 8002cd8:	61bb      	str	r3, [r7, #24]
        break;
 8002cda:	e00f      	b.n	8002cfc <UART_SetConfig+0x124>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002cdc:	f7fe ffc0 	bl	8001c60 <HAL_RCC_GetSysClockFreq>
 8002ce0:	0003      	movs	r3, r0
 8002ce2:	61bb      	str	r3, [r7, #24]
        break;
 8002ce4:	e00a      	b.n	8002cfc <UART_SetConfig+0x124>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ce6:	2380      	movs	r3, #128	; 0x80
 8002ce8:	021b      	lsls	r3, r3, #8
 8002cea:	61bb      	str	r3, [r7, #24]
        break;
 8002cec:	e006      	b.n	8002cfc <UART_SetConfig+0x124>
      default:
        pclk = 0U;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002cf2:	231e      	movs	r3, #30
 8002cf4:	18fb      	adds	r3, r7, r3
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	701a      	strb	r2, [r3, #0]
        break;
 8002cfa:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002cfc:	69bb      	ldr	r3, [r7, #24]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d100      	bne.n	8002d04 <UART_SetConfig+0x12c>
 8002d02:	e07a      	b.n	8002dfa <UART_SetConfig+0x222>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002d04:	69bb      	ldr	r3, [r7, #24]
 8002d06:	005a      	lsls	r2, r3, #1
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	085b      	lsrs	r3, r3, #1
 8002d0e:	18d2      	adds	r2, r2, r3
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	0019      	movs	r1, r3
 8002d16:	0010      	movs	r0, r2
 8002d18:	f7fd f9f6 	bl	8000108 <__udivsi3>
 8002d1c:	0003      	movs	r3, r0
 8002d1e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	2b0f      	cmp	r3, #15
 8002d24:	d91c      	bls.n	8002d60 <UART_SetConfig+0x188>
 8002d26:	693a      	ldr	r2, [r7, #16]
 8002d28:	2380      	movs	r3, #128	; 0x80
 8002d2a:	025b      	lsls	r3, r3, #9
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d217      	bcs.n	8002d60 <UART_SetConfig+0x188>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	b29a      	uxth	r2, r3
 8002d34:	200e      	movs	r0, #14
 8002d36:	183b      	adds	r3, r7, r0
 8002d38:	210f      	movs	r1, #15
 8002d3a:	438a      	bics	r2, r1
 8002d3c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	085b      	lsrs	r3, r3, #1
 8002d42:	b29b      	uxth	r3, r3
 8002d44:	2207      	movs	r2, #7
 8002d46:	4013      	ands	r3, r2
 8002d48:	b299      	uxth	r1, r3
 8002d4a:	183b      	adds	r3, r7, r0
 8002d4c:	183a      	adds	r2, r7, r0
 8002d4e:	8812      	ldrh	r2, [r2, #0]
 8002d50:	430a      	orrs	r2, r1
 8002d52:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	183a      	adds	r2, r7, r0
 8002d5a:	8812      	ldrh	r2, [r2, #0]
 8002d5c:	60da      	str	r2, [r3, #12]
 8002d5e:	e04c      	b.n	8002dfa <UART_SetConfig+0x222>
      }
      else
      {
        ret = HAL_ERROR;
 8002d60:	231e      	movs	r3, #30
 8002d62:	18fb      	adds	r3, r7, r3
 8002d64:	2201      	movs	r2, #1
 8002d66:	701a      	strb	r2, [r3, #0]
 8002d68:	e047      	b.n	8002dfa <UART_SetConfig+0x222>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002d6a:	231f      	movs	r3, #31
 8002d6c:	18fb      	adds	r3, r7, r3
 8002d6e:	781b      	ldrb	r3, [r3, #0]
 8002d70:	2b08      	cmp	r3, #8
 8002d72:	d015      	beq.n	8002da0 <UART_SetConfig+0x1c8>
 8002d74:	dc18      	bgt.n	8002da8 <UART_SetConfig+0x1d0>
 8002d76:	2b04      	cmp	r3, #4
 8002d78:	d00d      	beq.n	8002d96 <UART_SetConfig+0x1be>
 8002d7a:	dc15      	bgt.n	8002da8 <UART_SetConfig+0x1d0>
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d002      	beq.n	8002d86 <UART_SetConfig+0x1ae>
 8002d80:	2b02      	cmp	r3, #2
 8002d82:	d005      	beq.n	8002d90 <UART_SetConfig+0x1b8>
 8002d84:	e010      	b.n	8002da8 <UART_SetConfig+0x1d0>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d86:	f7fe ffcb 	bl	8001d20 <HAL_RCC_GetPCLK1Freq>
 8002d8a:	0003      	movs	r3, r0
 8002d8c:	61bb      	str	r3, [r7, #24]
        break;
 8002d8e:	e012      	b.n	8002db6 <UART_SetConfig+0x1de>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002d90:	4b24      	ldr	r3, [pc, #144]	; (8002e24 <UART_SetConfig+0x24c>)
 8002d92:	61bb      	str	r3, [r7, #24]
        break;
 8002d94:	e00f      	b.n	8002db6 <UART_SetConfig+0x1de>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d96:	f7fe ff63 	bl	8001c60 <HAL_RCC_GetSysClockFreq>
 8002d9a:	0003      	movs	r3, r0
 8002d9c:	61bb      	str	r3, [r7, #24]
        break;
 8002d9e:	e00a      	b.n	8002db6 <UART_SetConfig+0x1de>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002da0:	2380      	movs	r3, #128	; 0x80
 8002da2:	021b      	lsls	r3, r3, #8
 8002da4:	61bb      	str	r3, [r7, #24]
        break;
 8002da6:	e006      	b.n	8002db6 <UART_SetConfig+0x1de>
      default:
        pclk = 0U;
 8002da8:	2300      	movs	r3, #0
 8002daa:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002dac:	231e      	movs	r3, #30
 8002dae:	18fb      	adds	r3, r7, r3
 8002db0:	2201      	movs	r2, #1
 8002db2:	701a      	strb	r2, [r3, #0]
        break;
 8002db4:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002db6:	69bb      	ldr	r3, [r7, #24]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d01e      	beq.n	8002dfa <UART_SetConfig+0x222>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	085a      	lsrs	r2, r3, #1
 8002dc2:	69bb      	ldr	r3, [r7, #24]
 8002dc4:	18d2      	adds	r2, r2, r3
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	0019      	movs	r1, r3
 8002dcc:	0010      	movs	r0, r2
 8002dce:	f7fd f99b 	bl	8000108 <__udivsi3>
 8002dd2:	0003      	movs	r3, r0
 8002dd4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	2b0f      	cmp	r3, #15
 8002dda:	d90a      	bls.n	8002df2 <UART_SetConfig+0x21a>
 8002ddc:	693a      	ldr	r2, [r7, #16]
 8002dde:	2380      	movs	r3, #128	; 0x80
 8002de0:	025b      	lsls	r3, r3, #9
 8002de2:	429a      	cmp	r2, r3
 8002de4:	d205      	bcs.n	8002df2 <UART_SetConfig+0x21a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	b29a      	uxth	r2, r3
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	60da      	str	r2, [r3, #12]
 8002df0:	e003      	b.n	8002dfa <UART_SetConfig+0x222>
      }
      else
      {
        ret = HAL_ERROR;
 8002df2:	231e      	movs	r3, #30
 8002df4:	18fb      	adds	r3, r7, r3
 8002df6:	2201      	movs	r2, #1
 8002df8:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2200      	movs	r2, #0
 8002e04:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002e06:	231e      	movs	r3, #30
 8002e08:	18fb      	adds	r3, r7, r3
 8002e0a:	781b      	ldrb	r3, [r3, #0]
}
 8002e0c:	0018      	movs	r0, r3
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	b008      	add	sp, #32
 8002e12:	bd80      	pop	{r7, pc}
 8002e14:	ffff69f3 	.word	0xffff69f3
 8002e18:	ffffcfff 	.word	0xffffcfff
 8002e1c:	fffff4ff 	.word	0xfffff4ff
 8002e20:	40021000 	.word	0x40021000
 8002e24:	007a1200 	.word	0x007a1200

08002e28 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b082      	sub	sp, #8
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e34:	2201      	movs	r2, #1
 8002e36:	4013      	ands	r3, r2
 8002e38:	d00b      	beq.n	8002e52 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	4a4a      	ldr	r2, [pc, #296]	; (8002f6c <UART_AdvFeatureConfig+0x144>)
 8002e42:	4013      	ands	r3, r2
 8002e44:	0019      	movs	r1, r3
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	430a      	orrs	r2, r1
 8002e50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e56:	2202      	movs	r2, #2
 8002e58:	4013      	ands	r3, r2
 8002e5a:	d00b      	beq.n	8002e74 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	4a43      	ldr	r2, [pc, #268]	; (8002f70 <UART_AdvFeatureConfig+0x148>)
 8002e64:	4013      	ands	r3, r2
 8002e66:	0019      	movs	r1, r3
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	430a      	orrs	r2, r1
 8002e72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e78:	2204      	movs	r2, #4
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	d00b      	beq.n	8002e96 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	4a3b      	ldr	r2, [pc, #236]	; (8002f74 <UART_AdvFeatureConfig+0x14c>)
 8002e86:	4013      	ands	r3, r2
 8002e88:	0019      	movs	r1, r3
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	430a      	orrs	r2, r1
 8002e94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e9a:	2208      	movs	r2, #8
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	d00b      	beq.n	8002eb8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	4a34      	ldr	r2, [pc, #208]	; (8002f78 <UART_AdvFeatureConfig+0x150>)
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	0019      	movs	r1, r3
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	430a      	orrs	r2, r1
 8002eb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ebc:	2210      	movs	r2, #16
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	d00b      	beq.n	8002eda <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	4a2c      	ldr	r2, [pc, #176]	; (8002f7c <UART_AdvFeatureConfig+0x154>)
 8002eca:	4013      	ands	r3, r2
 8002ecc:	0019      	movs	r1, r3
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	430a      	orrs	r2, r1
 8002ed8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ede:	2220      	movs	r2, #32
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	d00b      	beq.n	8002efc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	4a25      	ldr	r2, [pc, #148]	; (8002f80 <UART_AdvFeatureConfig+0x158>)
 8002eec:	4013      	ands	r3, r2
 8002eee:	0019      	movs	r1, r3
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	430a      	orrs	r2, r1
 8002efa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f00:	2240      	movs	r2, #64	; 0x40
 8002f02:	4013      	ands	r3, r2
 8002f04:	d01d      	beq.n	8002f42 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	4a1d      	ldr	r2, [pc, #116]	; (8002f84 <UART_AdvFeatureConfig+0x15c>)
 8002f0e:	4013      	ands	r3, r2
 8002f10:	0019      	movs	r1, r3
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	430a      	orrs	r2, r1
 8002f1c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f22:	2380      	movs	r3, #128	; 0x80
 8002f24:	035b      	lsls	r3, r3, #13
 8002f26:	429a      	cmp	r2, r3
 8002f28:	d10b      	bne.n	8002f42 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	4a15      	ldr	r2, [pc, #84]	; (8002f88 <UART_AdvFeatureConfig+0x160>)
 8002f32:	4013      	ands	r3, r2
 8002f34:	0019      	movs	r1, r3
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	430a      	orrs	r2, r1
 8002f40:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f46:	2280      	movs	r2, #128	; 0x80
 8002f48:	4013      	ands	r3, r2
 8002f4a:	d00b      	beq.n	8002f64 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	4a0e      	ldr	r2, [pc, #56]	; (8002f8c <UART_AdvFeatureConfig+0x164>)
 8002f54:	4013      	ands	r3, r2
 8002f56:	0019      	movs	r1, r3
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	430a      	orrs	r2, r1
 8002f62:	605a      	str	r2, [r3, #4]
  }
}
 8002f64:	46c0      	nop			; (mov r8, r8)
 8002f66:	46bd      	mov	sp, r7
 8002f68:	b002      	add	sp, #8
 8002f6a:	bd80      	pop	{r7, pc}
 8002f6c:	fffdffff 	.word	0xfffdffff
 8002f70:	fffeffff 	.word	0xfffeffff
 8002f74:	fffbffff 	.word	0xfffbffff
 8002f78:	ffff7fff 	.word	0xffff7fff
 8002f7c:	ffffefff 	.word	0xffffefff
 8002f80:	ffffdfff 	.word	0xffffdfff
 8002f84:	ffefffff 	.word	0xffefffff
 8002f88:	ff9fffff 	.word	0xff9fffff
 8002f8c:	fff7ffff 	.word	0xfff7ffff

08002f90 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b092      	sub	sp, #72	; 0x48
 8002f94:	af02      	add	r7, sp, #8
 8002f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2284      	movs	r2, #132	; 0x84
 8002f9c:	2100      	movs	r1, #0
 8002f9e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002fa0:	f7fd ff42 	bl	8000e28 <HAL_GetTick>
 8002fa4:	0003      	movs	r3, r0
 8002fa6:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	2208      	movs	r2, #8
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	2b08      	cmp	r3, #8
 8002fb4:	d12c      	bne.n	8003010 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002fb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fb8:	2280      	movs	r2, #128	; 0x80
 8002fba:	0391      	lsls	r1, r2, #14
 8002fbc:	6878      	ldr	r0, [r7, #4]
 8002fbe:	4a46      	ldr	r2, [pc, #280]	; (80030d8 <UART_CheckIdleState+0x148>)
 8002fc0:	9200      	str	r2, [sp, #0]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	f000 f88c 	bl	80030e0 <UART_WaitOnFlagUntilTimeout>
 8002fc8:	1e03      	subs	r3, r0, #0
 8002fca:	d021      	beq.n	8003010 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002fcc:	f3ef 8310 	mrs	r3, PRIMASK
 8002fd0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002fd4:	63bb      	str	r3, [r7, #56]	; 0x38
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fdc:	f383 8810 	msr	PRIMASK, r3
}
 8002fe0:	46c0      	nop			; (mov r8, r8)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	2180      	movs	r1, #128	; 0x80
 8002fee:	438a      	bics	r2, r1
 8002ff0:	601a      	str	r2, [r3, #0]
 8002ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ff8:	f383 8810 	msr	PRIMASK, r3
}
 8002ffc:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2220      	movs	r2, #32
 8003002:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2278      	movs	r2, #120	; 0x78
 8003008:	2100      	movs	r1, #0
 800300a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800300c:	2303      	movs	r3, #3
 800300e:	e05f      	b.n	80030d0 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	2204      	movs	r2, #4
 8003018:	4013      	ands	r3, r2
 800301a:	2b04      	cmp	r3, #4
 800301c:	d146      	bne.n	80030ac <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800301e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003020:	2280      	movs	r2, #128	; 0x80
 8003022:	03d1      	lsls	r1, r2, #15
 8003024:	6878      	ldr	r0, [r7, #4]
 8003026:	4a2c      	ldr	r2, [pc, #176]	; (80030d8 <UART_CheckIdleState+0x148>)
 8003028:	9200      	str	r2, [sp, #0]
 800302a:	2200      	movs	r2, #0
 800302c:	f000 f858 	bl	80030e0 <UART_WaitOnFlagUntilTimeout>
 8003030:	1e03      	subs	r3, r0, #0
 8003032:	d03b      	beq.n	80030ac <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003034:	f3ef 8310 	mrs	r3, PRIMASK
 8003038:	60fb      	str	r3, [r7, #12]
  return(result);
 800303a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800303c:	637b      	str	r3, [r7, #52]	; 0x34
 800303e:	2301      	movs	r3, #1
 8003040:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	f383 8810 	msr	PRIMASK, r3
}
 8003048:	46c0      	nop			; (mov r8, r8)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4921      	ldr	r1, [pc, #132]	; (80030dc <UART_CheckIdleState+0x14c>)
 8003056:	400a      	ands	r2, r1
 8003058:	601a      	str	r2, [r3, #0]
 800305a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800305c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	f383 8810 	msr	PRIMASK, r3
}
 8003064:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003066:	f3ef 8310 	mrs	r3, PRIMASK
 800306a:	61bb      	str	r3, [r7, #24]
  return(result);
 800306c:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800306e:	633b      	str	r3, [r7, #48]	; 0x30
 8003070:	2301      	movs	r3, #1
 8003072:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003074:	69fb      	ldr	r3, [r7, #28]
 8003076:	f383 8810 	msr	PRIMASK, r3
}
 800307a:	46c0      	nop			; (mov r8, r8)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	689a      	ldr	r2, [r3, #8]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	2101      	movs	r1, #1
 8003088:	438a      	bics	r2, r1
 800308a:	609a      	str	r2, [r3, #8]
 800308c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800308e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003090:	6a3b      	ldr	r3, [r7, #32]
 8003092:	f383 8810 	msr	PRIMASK, r3
}
 8003096:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2280      	movs	r2, #128	; 0x80
 800309c:	2120      	movs	r1, #32
 800309e:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2278      	movs	r2, #120	; 0x78
 80030a4:	2100      	movs	r1, #0
 80030a6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80030a8:	2303      	movs	r3, #3
 80030aa:	e011      	b.n	80030d0 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2220      	movs	r2, #32
 80030b0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2280      	movs	r2, #128	; 0x80
 80030b6:	2120      	movs	r1, #32
 80030b8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2200      	movs	r2, #0
 80030be:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2200      	movs	r2, #0
 80030c4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2278      	movs	r2, #120	; 0x78
 80030ca:	2100      	movs	r1, #0
 80030cc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80030ce:	2300      	movs	r3, #0
}
 80030d0:	0018      	movs	r0, r3
 80030d2:	46bd      	mov	sp, r7
 80030d4:	b010      	add	sp, #64	; 0x40
 80030d6:	bd80      	pop	{r7, pc}
 80030d8:	01ffffff 	.word	0x01ffffff
 80030dc:	fffffedf 	.word	0xfffffedf

080030e0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b084      	sub	sp, #16
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	60f8      	str	r0, [r7, #12]
 80030e8:	60b9      	str	r1, [r7, #8]
 80030ea:	603b      	str	r3, [r7, #0]
 80030ec:	1dfb      	adds	r3, r7, #7
 80030ee:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030f0:	e04b      	b.n	800318a <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030f2:	69bb      	ldr	r3, [r7, #24]
 80030f4:	3301      	adds	r3, #1
 80030f6:	d048      	beq.n	800318a <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030f8:	f7fd fe96 	bl	8000e28 <HAL_GetTick>
 80030fc:	0002      	movs	r2, r0
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	69ba      	ldr	r2, [r7, #24]
 8003104:	429a      	cmp	r2, r3
 8003106:	d302      	bcc.n	800310e <UART_WaitOnFlagUntilTimeout+0x2e>
 8003108:	69bb      	ldr	r3, [r7, #24]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d101      	bne.n	8003112 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800310e:	2303      	movs	r3, #3
 8003110:	e04b      	b.n	80031aa <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	2204      	movs	r2, #4
 800311a:	4013      	ands	r3, r2
 800311c:	d035      	beq.n	800318a <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	69db      	ldr	r3, [r3, #28]
 8003124:	2208      	movs	r2, #8
 8003126:	4013      	ands	r3, r2
 8003128:	2b08      	cmp	r3, #8
 800312a:	d111      	bne.n	8003150 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	2208      	movs	r2, #8
 8003132:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	0018      	movs	r0, r3
 8003138:	f000 f8f2 	bl	8003320 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2284      	movs	r2, #132	; 0x84
 8003140:	2108      	movs	r1, #8
 8003142:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2278      	movs	r2, #120	; 0x78
 8003148:	2100      	movs	r1, #0
 800314a:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	e02c      	b.n	80031aa <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	69da      	ldr	r2, [r3, #28]
 8003156:	2380      	movs	r3, #128	; 0x80
 8003158:	011b      	lsls	r3, r3, #4
 800315a:	401a      	ands	r2, r3
 800315c:	2380      	movs	r3, #128	; 0x80
 800315e:	011b      	lsls	r3, r3, #4
 8003160:	429a      	cmp	r2, r3
 8003162:	d112      	bne.n	800318a <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	2280      	movs	r2, #128	; 0x80
 800316a:	0112      	lsls	r2, r2, #4
 800316c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	0018      	movs	r0, r3
 8003172:	f000 f8d5 	bl	8003320 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2284      	movs	r2, #132	; 0x84
 800317a:	2120      	movs	r1, #32
 800317c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2278      	movs	r2, #120	; 0x78
 8003182:	2100      	movs	r1, #0
 8003184:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003186:	2303      	movs	r3, #3
 8003188:	e00f      	b.n	80031aa <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	69db      	ldr	r3, [r3, #28]
 8003190:	68ba      	ldr	r2, [r7, #8]
 8003192:	4013      	ands	r3, r2
 8003194:	68ba      	ldr	r2, [r7, #8]
 8003196:	1ad3      	subs	r3, r2, r3
 8003198:	425a      	negs	r2, r3
 800319a:	4153      	adcs	r3, r2
 800319c:	b2db      	uxtb	r3, r3
 800319e:	001a      	movs	r2, r3
 80031a0:	1dfb      	adds	r3, r7, #7
 80031a2:	781b      	ldrb	r3, [r3, #0]
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d0a4      	beq.n	80030f2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80031a8:	2300      	movs	r3, #0
}
 80031aa:	0018      	movs	r0, r3
 80031ac:	46bd      	mov	sp, r7
 80031ae:	b004      	add	sp, #16
 80031b0:	bd80      	pop	{r7, pc}
	...

080031b4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b090      	sub	sp, #64	; 0x40
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	60f8      	str	r0, [r7, #12]
 80031bc:	60b9      	str	r1, [r7, #8]
 80031be:	1dbb      	adds	r3, r7, #6
 80031c0:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	68ba      	ldr	r2, [r7, #8]
 80031c6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	1dba      	adds	r2, r7, #6
 80031cc:	2158      	movs	r1, #88	; 0x58
 80031ce:	8812      	ldrh	r2, [r2, #0]
 80031d0:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	1dba      	adds	r2, r7, #6
 80031d6:	215a      	movs	r1, #90	; 0x5a
 80031d8:	8812      	ldrh	r2, [r2, #0]
 80031da:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2200      	movs	r2, #0
 80031e0:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	689a      	ldr	r2, [r3, #8]
 80031e6:	2380      	movs	r3, #128	; 0x80
 80031e8:	015b      	lsls	r3, r3, #5
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d10d      	bne.n	800320a <UART_Start_Receive_IT+0x56>
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	691b      	ldr	r3, [r3, #16]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d104      	bne.n	8003200 <UART_Start_Receive_IT+0x4c>
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	225c      	movs	r2, #92	; 0x5c
 80031fa:	4946      	ldr	r1, [pc, #280]	; (8003314 <UART_Start_Receive_IT+0x160>)
 80031fc:	5299      	strh	r1, [r3, r2]
 80031fe:	e01a      	b.n	8003236 <UART_Start_Receive_IT+0x82>
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	225c      	movs	r2, #92	; 0x5c
 8003204:	21ff      	movs	r1, #255	; 0xff
 8003206:	5299      	strh	r1, [r3, r2]
 8003208:	e015      	b.n	8003236 <UART_Start_Receive_IT+0x82>
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d10d      	bne.n	800322e <UART_Start_Receive_IT+0x7a>
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	691b      	ldr	r3, [r3, #16]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d104      	bne.n	8003224 <UART_Start_Receive_IT+0x70>
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	225c      	movs	r2, #92	; 0x5c
 800321e:	21ff      	movs	r1, #255	; 0xff
 8003220:	5299      	strh	r1, [r3, r2]
 8003222:	e008      	b.n	8003236 <UART_Start_Receive_IT+0x82>
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	225c      	movs	r2, #92	; 0x5c
 8003228:	217f      	movs	r1, #127	; 0x7f
 800322a:	5299      	strh	r1, [r3, r2]
 800322c:	e003      	b.n	8003236 <UART_Start_Receive_IT+0x82>
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	225c      	movs	r2, #92	; 0x5c
 8003232:	2100      	movs	r1, #0
 8003234:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2284      	movs	r2, #132	; 0x84
 800323a:	2100      	movs	r1, #0
 800323c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2280      	movs	r2, #128	; 0x80
 8003242:	2122      	movs	r1, #34	; 0x22
 8003244:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003246:	f3ef 8310 	mrs	r3, PRIMASK
 800324a:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800324c:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800324e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003250:	2301      	movs	r3, #1
 8003252:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003256:	f383 8810 	msr	PRIMASK, r3
}
 800325a:	46c0      	nop			; (mov r8, r8)
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	689a      	ldr	r2, [r3, #8]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	2101      	movs	r1, #1
 8003268:	430a      	orrs	r2, r1
 800326a:	609a      	str	r2, [r3, #8]
 800326c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800326e:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003272:	f383 8810 	msr	PRIMASK, r3
}
 8003276:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	689a      	ldr	r2, [r3, #8]
 800327c:	2380      	movs	r3, #128	; 0x80
 800327e:	015b      	lsls	r3, r3, #5
 8003280:	429a      	cmp	r2, r3
 8003282:	d107      	bne.n	8003294 <UART_Start_Receive_IT+0xe0>
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	691b      	ldr	r3, [r3, #16]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d103      	bne.n	8003294 <UART_Start_Receive_IT+0xe0>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	4a22      	ldr	r2, [pc, #136]	; (8003318 <UART_Start_Receive_IT+0x164>)
 8003290:	669a      	str	r2, [r3, #104]	; 0x68
 8003292:	e002      	b.n	800329a <UART_Start_Receive_IT+0xe6>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	4a21      	ldr	r2, [pc, #132]	; (800331c <UART_Start_Receive_IT+0x168>)
 8003298:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	691b      	ldr	r3, [r3, #16]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d019      	beq.n	80032d6 <UART_Start_Receive_IT+0x122>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032a2:	f3ef 8310 	mrs	r3, PRIMASK
 80032a6:	61fb      	str	r3, [r7, #28]
  return(result);
 80032a8:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80032aa:	637b      	str	r3, [r7, #52]	; 0x34
 80032ac:	2301      	movs	r3, #1
 80032ae:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032b0:	6a3b      	ldr	r3, [r7, #32]
 80032b2:	f383 8810 	msr	PRIMASK, r3
}
 80032b6:	46c0      	nop			; (mov r8, r8)
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	2190      	movs	r1, #144	; 0x90
 80032c4:	0049      	lsls	r1, r1, #1
 80032c6:	430a      	orrs	r2, r1
 80032c8:	601a      	str	r2, [r3, #0]
 80032ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032cc:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d0:	f383 8810 	msr	PRIMASK, r3
}
 80032d4:	e018      	b.n	8003308 <UART_Start_Receive_IT+0x154>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032d6:	f3ef 8310 	mrs	r3, PRIMASK
 80032da:	613b      	str	r3, [r7, #16]
  return(result);
 80032dc:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80032de:	63bb      	str	r3, [r7, #56]	; 0x38
 80032e0:	2301      	movs	r3, #1
 80032e2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	f383 8810 	msr	PRIMASK, r3
}
 80032ea:	46c0      	nop			; (mov r8, r8)
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	2120      	movs	r1, #32
 80032f8:	430a      	orrs	r2, r1
 80032fa:	601a      	str	r2, [r3, #0]
 80032fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032fe:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003300:	69bb      	ldr	r3, [r7, #24]
 8003302:	f383 8810 	msr	PRIMASK, r3
}
 8003306:	46c0      	nop			; (mov r8, r8)
  }
  return HAL_OK;
 8003308:	2300      	movs	r3, #0
}
 800330a:	0018      	movs	r0, r3
 800330c:	46bd      	mov	sp, r7
 800330e:	b010      	add	sp, #64	; 0x40
 8003310:	bd80      	pop	{r7, pc}
 8003312:	46c0      	nop			; (mov r8, r8)
 8003314:	000001ff 	.word	0x000001ff
 8003318:	08003625 	.word	0x08003625
 800331c:	0800346d 	.word	0x0800346d

08003320 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b08e      	sub	sp, #56	; 0x38
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003328:	f3ef 8310 	mrs	r3, PRIMASK
 800332c:	617b      	str	r3, [r7, #20]
  return(result);
 800332e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003330:	637b      	str	r3, [r7, #52]	; 0x34
 8003332:	2301      	movs	r3, #1
 8003334:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003336:	69bb      	ldr	r3, [r7, #24]
 8003338:	f383 8810 	msr	PRIMASK, r3
}
 800333c:	46c0      	nop			; (mov r8, r8)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4926      	ldr	r1, [pc, #152]	; (80033e4 <UART_EndRxTransfer+0xc4>)
 800334a:	400a      	ands	r2, r1
 800334c:	601a      	str	r2, [r3, #0]
 800334e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003350:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003352:	69fb      	ldr	r3, [r7, #28]
 8003354:	f383 8810 	msr	PRIMASK, r3
}
 8003358:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800335a:	f3ef 8310 	mrs	r3, PRIMASK
 800335e:	623b      	str	r3, [r7, #32]
  return(result);
 8003360:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003362:	633b      	str	r3, [r7, #48]	; 0x30
 8003364:	2301      	movs	r3, #1
 8003366:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800336a:	f383 8810 	msr	PRIMASK, r3
}
 800336e:	46c0      	nop			; (mov r8, r8)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	689a      	ldr	r2, [r3, #8]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	2101      	movs	r1, #1
 800337c:	438a      	bics	r2, r1
 800337e:	609a      	str	r2, [r3, #8]
 8003380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003382:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003386:	f383 8810 	msr	PRIMASK, r3
}
 800338a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003390:	2b01      	cmp	r3, #1
 8003392:	d118      	bne.n	80033c6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003394:	f3ef 8310 	mrs	r3, PRIMASK
 8003398:	60bb      	str	r3, [r7, #8]
  return(result);
 800339a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800339c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800339e:	2301      	movs	r3, #1
 80033a0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	f383 8810 	msr	PRIMASK, r3
}
 80033a8:	46c0      	nop			; (mov r8, r8)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	2110      	movs	r1, #16
 80033b6:	438a      	bics	r2, r1
 80033b8:	601a      	str	r2, [r3, #0]
 80033ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033bc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	f383 8810 	msr	PRIMASK, r3
}
 80033c4:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2280      	movs	r2, #128	; 0x80
 80033ca:	2120      	movs	r1, #32
 80033cc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2200      	movs	r2, #0
 80033d2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2200      	movs	r2, #0
 80033d8:	669a      	str	r2, [r3, #104]	; 0x68
}
 80033da:	46c0      	nop			; (mov r8, r8)
 80033dc:	46bd      	mov	sp, r7
 80033de:	b00e      	add	sp, #56	; 0x38
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	46c0      	nop			; (mov r8, r8)
 80033e4:	fffffedf 	.word	0xfffffedf

080033e8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b084      	sub	sp, #16
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	225a      	movs	r2, #90	; 0x5a
 80033fa:	2100      	movs	r1, #0
 80033fc:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2252      	movs	r2, #82	; 0x52
 8003402:	2100      	movs	r1, #0
 8003404:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	0018      	movs	r0, r3
 800340a:	f7ff fbd1 	bl	8002bb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800340e:	46c0      	nop			; (mov r8, r8)
 8003410:	46bd      	mov	sp, r7
 8003412:	b004      	add	sp, #16
 8003414:	bd80      	pop	{r7, pc}

08003416 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003416:	b580      	push	{r7, lr}
 8003418:	b086      	sub	sp, #24
 800341a:	af00      	add	r7, sp, #0
 800341c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800341e:	f3ef 8310 	mrs	r3, PRIMASK
 8003422:	60bb      	str	r3, [r7, #8]
  return(result);
 8003424:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003426:	617b      	str	r3, [r7, #20]
 8003428:	2301      	movs	r3, #1
 800342a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	f383 8810 	msr	PRIMASK, r3
}
 8003432:	46c0      	nop			; (mov r8, r8)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	2140      	movs	r1, #64	; 0x40
 8003440:	438a      	bics	r2, r1
 8003442:	601a      	str	r2, [r3, #0]
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	f383 8810 	msr	PRIMASK, r3
}
 800344e:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2220      	movs	r2, #32
 8003454:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2200      	movs	r2, #0
 800345a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	0018      	movs	r0, r3
 8003460:	f7ff fb9e 	bl	8002ba0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003464:	46c0      	nop			; (mov r8, r8)
 8003466:	46bd      	mov	sp, r7
 8003468:	b006      	add	sp, #24
 800346a:	bd80      	pop	{r7, pc}

0800346c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b094      	sub	sp, #80	; 0x50
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003474:	204e      	movs	r0, #78	; 0x4e
 8003476:	183b      	adds	r3, r7, r0
 8003478:	687a      	ldr	r2, [r7, #4]
 800347a:	215c      	movs	r1, #92	; 0x5c
 800347c:	5a52      	ldrh	r2, [r2, r1]
 800347e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2280      	movs	r2, #128	; 0x80
 8003484:	589b      	ldr	r3, [r3, r2]
 8003486:	2b22      	cmp	r3, #34	; 0x22
 8003488:	d000      	beq.n	800348c <UART_RxISR_8BIT+0x20>
 800348a:	e0ba      	b.n	8003602 <UART_RxISR_8BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	214c      	movs	r1, #76	; 0x4c
 8003492:	187b      	adds	r3, r7, r1
 8003494:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8003496:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003498:	187b      	adds	r3, r7, r1
 800349a:	881b      	ldrh	r3, [r3, #0]
 800349c:	b2da      	uxtb	r2, r3
 800349e:	183b      	adds	r3, r7, r0
 80034a0:	881b      	ldrh	r3, [r3, #0]
 80034a2:	b2d9      	uxtb	r1, r3
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034a8:	400a      	ands	r2, r1
 80034aa:	b2d2      	uxtb	r2, r2
 80034ac:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034b2:	1c5a      	adds	r2, r3, #1
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	225a      	movs	r2, #90	; 0x5a
 80034bc:	5a9b      	ldrh	r3, [r3, r2]
 80034be:	b29b      	uxth	r3, r3
 80034c0:	3b01      	subs	r3, #1
 80034c2:	b299      	uxth	r1, r3
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	225a      	movs	r2, #90	; 0x5a
 80034c8:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	225a      	movs	r2, #90	; 0x5a
 80034ce:	5a9b      	ldrh	r3, [r3, r2]
 80034d0:	b29b      	uxth	r3, r3
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d000      	beq.n	80034d8 <UART_RxISR_8BIT+0x6c>
 80034d6:	e09c      	b.n	8003612 <UART_RxISR_8BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034d8:	f3ef 8310 	mrs	r3, PRIMASK
 80034dc:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80034de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034e0:	64bb      	str	r3, [r7, #72]	; 0x48
 80034e2:	2301      	movs	r3, #1
 80034e4:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034e8:	f383 8810 	msr	PRIMASK, r3
}
 80034ec:	46c0      	nop			; (mov r8, r8)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4948      	ldr	r1, [pc, #288]	; (800361c <UART_RxISR_8BIT+0x1b0>)
 80034fa:	400a      	ands	r2, r1
 80034fc:	601a      	str	r2, [r3, #0]
 80034fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003500:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003504:	f383 8810 	msr	PRIMASK, r3
}
 8003508:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800350a:	f3ef 8310 	mrs	r3, PRIMASK
 800350e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003510:	6b3b      	ldr	r3, [r7, #48]	; 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003512:	647b      	str	r3, [r7, #68]	; 0x44
 8003514:	2301      	movs	r3, #1
 8003516:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003518:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800351a:	f383 8810 	msr	PRIMASK, r3
}
 800351e:	46c0      	nop			; (mov r8, r8)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	689a      	ldr	r2, [r3, #8]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	2101      	movs	r1, #1
 800352c:	438a      	bics	r2, r1
 800352e:	609a      	str	r2, [r3, #8]
 8003530:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003532:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003536:	f383 8810 	msr	PRIMASK, r3
}
 800353a:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2280      	movs	r2, #128	; 0x80
 8003540:	2120      	movs	r1, #32
 8003542:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2200      	movs	r2, #0
 8003548:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2200      	movs	r2, #0
 800354e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	685a      	ldr	r2, [r3, #4]
 8003556:	2380      	movs	r3, #128	; 0x80
 8003558:	041b      	lsls	r3, r3, #16
 800355a:	4013      	ands	r3, r2
 800355c:	d018      	beq.n	8003590 <UART_RxISR_8BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800355e:	f3ef 8310 	mrs	r3, PRIMASK
 8003562:	61bb      	str	r3, [r7, #24]
  return(result);
 8003564:	69bb      	ldr	r3, [r7, #24]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003566:	643b      	str	r3, [r7, #64]	; 0x40
 8003568:	2301      	movs	r3, #1
 800356a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800356c:	69fb      	ldr	r3, [r7, #28]
 800356e:	f383 8810 	msr	PRIMASK, r3
}
 8003572:	46c0      	nop			; (mov r8, r8)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4928      	ldr	r1, [pc, #160]	; (8003620 <UART_RxISR_8BIT+0x1b4>)
 8003580:	400a      	ands	r2, r1
 8003582:	601a      	str	r2, [r3, #0]
 8003584:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003586:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003588:	6a3b      	ldr	r3, [r7, #32]
 800358a:	f383 8810 	msr	PRIMASK, r3
}
 800358e:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003594:	2b01      	cmp	r3, #1
 8003596:	d12f      	bne.n	80035f8 <UART_RxISR_8BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2200      	movs	r2, #0
 800359c:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800359e:	f3ef 8310 	mrs	r3, PRIMASK
 80035a2:	60fb      	str	r3, [r7, #12]
  return(result);
 80035a4:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035a8:	2301      	movs	r3, #1
 80035aa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	f383 8810 	msr	PRIMASK, r3
}
 80035b2:	46c0      	nop			; (mov r8, r8)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	2110      	movs	r1, #16
 80035c0:	438a      	bics	r2, r1
 80035c2:	601a      	str	r2, [r3, #0]
 80035c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035c6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	f383 8810 	msr	PRIMASK, r3
}
 80035ce:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	69db      	ldr	r3, [r3, #28]
 80035d6:	2210      	movs	r2, #16
 80035d8:	4013      	ands	r3, r2
 80035da:	2b10      	cmp	r3, #16
 80035dc:	d103      	bne.n	80035e6 <UART_RxISR_8BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	2210      	movs	r2, #16
 80035e4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2258      	movs	r2, #88	; 0x58
 80035ea:	5a9a      	ldrh	r2, [r3, r2]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	0011      	movs	r1, r2
 80035f0:	0018      	movs	r0, r3
 80035f2:	f7ff fae5 	bl	8002bc0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80035f6:	e00c      	b.n	8003612 <UART_RxISR_8BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	0018      	movs	r0, r3
 80035fc:	f7fd f9fc 	bl	80009f8 <HAL_UART_RxCpltCallback>
}
 8003600:	e007      	b.n	8003612 <UART_RxISR_8BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	699a      	ldr	r2, [r3, #24]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	2108      	movs	r1, #8
 800360e:	430a      	orrs	r2, r1
 8003610:	619a      	str	r2, [r3, #24]
}
 8003612:	46c0      	nop			; (mov r8, r8)
 8003614:	46bd      	mov	sp, r7
 8003616:	b014      	add	sp, #80	; 0x50
 8003618:	bd80      	pop	{r7, pc}
 800361a:	46c0      	nop			; (mov r8, r8)
 800361c:	fffffedf 	.word	0xfffffedf
 8003620:	fbffffff 	.word	0xfbffffff

08003624 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b094      	sub	sp, #80	; 0x50
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800362c:	204e      	movs	r0, #78	; 0x4e
 800362e:	183b      	adds	r3, r7, r0
 8003630:	687a      	ldr	r2, [r7, #4]
 8003632:	215c      	movs	r1, #92	; 0x5c
 8003634:	5a52      	ldrh	r2, [r2, r1]
 8003636:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2280      	movs	r2, #128	; 0x80
 800363c:	589b      	ldr	r3, [r3, r2]
 800363e:	2b22      	cmp	r3, #34	; 0x22
 8003640:	d000      	beq.n	8003644 <UART_RxISR_16BIT+0x20>
 8003642:	e0ba      	b.n	80037ba <UART_RxISR_16BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	214c      	movs	r1, #76	; 0x4c
 800364a:	187b      	adds	r3, r7, r1
 800364c:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 800364e:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003654:	64bb      	str	r3, [r7, #72]	; 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8003656:	187b      	adds	r3, r7, r1
 8003658:	183a      	adds	r2, r7, r0
 800365a:	881b      	ldrh	r3, [r3, #0]
 800365c:	8812      	ldrh	r2, [r2, #0]
 800365e:	4013      	ands	r3, r2
 8003660:	b29a      	uxth	r2, r3
 8003662:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003664:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800366a:	1c9a      	adds	r2, r3, #2
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	225a      	movs	r2, #90	; 0x5a
 8003674:	5a9b      	ldrh	r3, [r3, r2]
 8003676:	b29b      	uxth	r3, r3
 8003678:	3b01      	subs	r3, #1
 800367a:	b299      	uxth	r1, r3
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	225a      	movs	r2, #90	; 0x5a
 8003680:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	225a      	movs	r2, #90	; 0x5a
 8003686:	5a9b      	ldrh	r3, [r3, r2]
 8003688:	b29b      	uxth	r3, r3
 800368a:	2b00      	cmp	r3, #0
 800368c:	d000      	beq.n	8003690 <UART_RxISR_16BIT+0x6c>
 800368e:	e09c      	b.n	80037ca <UART_RxISR_16BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003690:	f3ef 8310 	mrs	r3, PRIMASK
 8003694:	623b      	str	r3, [r7, #32]
  return(result);
 8003696:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003698:	647b      	str	r3, [r7, #68]	; 0x44
 800369a:	2301      	movs	r3, #1
 800369c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800369e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a0:	f383 8810 	msr	PRIMASK, r3
}
 80036a4:	46c0      	nop			; (mov r8, r8)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4948      	ldr	r1, [pc, #288]	; (80037d4 <UART_RxISR_16BIT+0x1b0>)
 80036b2:	400a      	ands	r2, r1
 80036b4:	601a      	str	r2, [r3, #0]
 80036b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036b8:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036bc:	f383 8810 	msr	PRIMASK, r3
}
 80036c0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036c2:	f3ef 8310 	mrs	r3, PRIMASK
 80036c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 80036c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036ca:	643b      	str	r3, [r7, #64]	; 0x40
 80036cc:	2301      	movs	r3, #1
 80036ce:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036d2:	f383 8810 	msr	PRIMASK, r3
}
 80036d6:	46c0      	nop			; (mov r8, r8)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	689a      	ldr	r2, [r3, #8]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	2101      	movs	r1, #1
 80036e4:	438a      	bics	r2, r1
 80036e6:	609a      	str	r2, [r3, #8]
 80036e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036ea:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036ee:	f383 8810 	msr	PRIMASK, r3
}
 80036f2:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2280      	movs	r2, #128	; 0x80
 80036f8:	2120      	movs	r1, #32
 80036fa:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2200      	movs	r2, #0
 8003700:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2200      	movs	r2, #0
 8003706:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	685a      	ldr	r2, [r3, #4]
 800370e:	2380      	movs	r3, #128	; 0x80
 8003710:	041b      	lsls	r3, r3, #16
 8003712:	4013      	ands	r3, r2
 8003714:	d018      	beq.n	8003748 <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003716:	f3ef 8310 	mrs	r3, PRIMASK
 800371a:	617b      	str	r3, [r7, #20]
  return(result);
 800371c:	697b      	ldr	r3, [r7, #20]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800371e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003720:	2301      	movs	r3, #1
 8003722:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003724:	69bb      	ldr	r3, [r7, #24]
 8003726:	f383 8810 	msr	PRIMASK, r3
}
 800372a:	46c0      	nop			; (mov r8, r8)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4928      	ldr	r1, [pc, #160]	; (80037d8 <UART_RxISR_16BIT+0x1b4>)
 8003738:	400a      	ands	r2, r1
 800373a:	601a      	str	r2, [r3, #0]
 800373c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800373e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003740:	69fb      	ldr	r3, [r7, #28]
 8003742:	f383 8810 	msr	PRIMASK, r3
}
 8003746:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800374c:	2b01      	cmp	r3, #1
 800374e:	d12f      	bne.n	80037b0 <UART_RxISR_16BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2200      	movs	r2, #0
 8003754:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003756:	f3ef 8310 	mrs	r3, PRIMASK
 800375a:	60bb      	str	r3, [r7, #8]
  return(result);
 800375c:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800375e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003760:	2301      	movs	r3, #1
 8003762:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	f383 8810 	msr	PRIMASK, r3
}
 800376a:	46c0      	nop			; (mov r8, r8)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	2110      	movs	r1, #16
 8003778:	438a      	bics	r2, r1
 800377a:	601a      	str	r2, [r3, #0]
 800377c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800377e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	f383 8810 	msr	PRIMASK, r3
}
 8003786:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	69db      	ldr	r3, [r3, #28]
 800378e:	2210      	movs	r2, #16
 8003790:	4013      	ands	r3, r2
 8003792:	2b10      	cmp	r3, #16
 8003794:	d103      	bne.n	800379e <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	2210      	movs	r2, #16
 800379c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2258      	movs	r2, #88	; 0x58
 80037a2:	5a9a      	ldrh	r2, [r3, r2]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	0011      	movs	r1, r2
 80037a8:	0018      	movs	r0, r3
 80037aa:	f7ff fa09 	bl	8002bc0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80037ae:	e00c      	b.n	80037ca <UART_RxISR_16BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	0018      	movs	r0, r3
 80037b4:	f7fd f920 	bl	80009f8 <HAL_UART_RxCpltCallback>
}
 80037b8:	e007      	b.n	80037ca <UART_RxISR_16BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	699a      	ldr	r2, [r3, #24]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	2108      	movs	r1, #8
 80037c6:	430a      	orrs	r2, r1
 80037c8:	619a      	str	r2, [r3, #24]
}
 80037ca:	46c0      	nop			; (mov r8, r8)
 80037cc:	46bd      	mov	sp, r7
 80037ce:	b014      	add	sp, #80	; 0x50
 80037d0:	bd80      	pop	{r7, pc}
 80037d2:	46c0      	nop			; (mov r8, r8)
 80037d4:	fffffedf 	.word	0xfffffedf
 80037d8:	fbffffff 	.word	0xfbffffff

080037dc <__libc_init_array>:
 80037dc:	b570      	push	{r4, r5, r6, lr}
 80037de:	2600      	movs	r6, #0
 80037e0:	4d0c      	ldr	r5, [pc, #48]	; (8003814 <__libc_init_array+0x38>)
 80037e2:	4c0d      	ldr	r4, [pc, #52]	; (8003818 <__libc_init_array+0x3c>)
 80037e4:	1b64      	subs	r4, r4, r5
 80037e6:	10a4      	asrs	r4, r4, #2
 80037e8:	42a6      	cmp	r6, r4
 80037ea:	d109      	bne.n	8003800 <__libc_init_array+0x24>
 80037ec:	2600      	movs	r6, #0
 80037ee:	f000 f821 	bl	8003834 <_init>
 80037f2:	4d0a      	ldr	r5, [pc, #40]	; (800381c <__libc_init_array+0x40>)
 80037f4:	4c0a      	ldr	r4, [pc, #40]	; (8003820 <__libc_init_array+0x44>)
 80037f6:	1b64      	subs	r4, r4, r5
 80037f8:	10a4      	asrs	r4, r4, #2
 80037fa:	42a6      	cmp	r6, r4
 80037fc:	d105      	bne.n	800380a <__libc_init_array+0x2e>
 80037fe:	bd70      	pop	{r4, r5, r6, pc}
 8003800:	00b3      	lsls	r3, r6, #2
 8003802:	58eb      	ldr	r3, [r5, r3]
 8003804:	4798      	blx	r3
 8003806:	3601      	adds	r6, #1
 8003808:	e7ee      	b.n	80037e8 <__libc_init_array+0xc>
 800380a:	00b3      	lsls	r3, r6, #2
 800380c:	58eb      	ldr	r3, [r5, r3]
 800380e:	4798      	blx	r3
 8003810:	3601      	adds	r6, #1
 8003812:	e7f2      	b.n	80037fa <__libc_init_array+0x1e>
 8003814:	080038bc 	.word	0x080038bc
 8003818:	080038bc 	.word	0x080038bc
 800381c:	080038bc 	.word	0x080038bc
 8003820:	080038c0 	.word	0x080038c0

08003824 <memset>:
 8003824:	0003      	movs	r3, r0
 8003826:	1882      	adds	r2, r0, r2
 8003828:	4293      	cmp	r3, r2
 800382a:	d100      	bne.n	800382e <memset+0xa>
 800382c:	4770      	bx	lr
 800382e:	7019      	strb	r1, [r3, #0]
 8003830:	3301      	adds	r3, #1
 8003832:	e7f9      	b.n	8003828 <memset+0x4>

08003834 <_init>:
 8003834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003836:	46c0      	nop			; (mov r8, r8)
 8003838:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800383a:	bc08      	pop	{r3}
 800383c:	469e      	mov	lr, r3
 800383e:	4770      	bx	lr

08003840 <_fini>:
 8003840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003842:	46c0      	nop			; (mov r8, r8)
 8003844:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003846:	bc08      	pop	{r3}
 8003848:	469e      	mov	lr, r3
 800384a:	4770      	bx	lr
